KIF programming style
 KIF is an ASPECT programming language.
The way a variable is handled depends on its context of utilisation.

 KIF requires that every variable should be declared with a specific type:
A predefined type: string, float, int, boolean, map, vector, xml, time, fst, node or dependency.
A user defined type: a frame.

 KIF offers a large range of methods, which can be enlarged at will.
First program
//We declare a string variable s, which we initialize with a string.








//IMPORTANT NOTICE: the KIF print is compatible with the XIP script language, which means that a print in a KIF program will show in JAVA or in XIPUI, exactly as the print in XIP script language.


Second program

//We then declare another integer variable, which is initialized and added to s…


Function declaration
 Functions are declared in KIF with the keyword: function.
 Beware KIF is case sensitive.
 A function is a list of parameters and a body.
Example:


FRAME declaration
 A frame is very similar to a class. A frame is declared with the keyword: frame.
 It gathers a list of variables and a list of functions.

 A sub-frame is declared into the frame body. It automatically inherits the methods and variables from the top frame. 

 Redefinition of a function is possible within a sub-frame.

 Member variables can be instantiated within the frame.

 A method initial can be declared, which will be automatically called for each new instance of this frame.


Example
frame myframe  {
	int i=10;                //every new frame will instantiate i with 10
	string s=“initial”;
	vector myvect;
	function display() {
		print(“IN MYFRAME:”+s+”\n”);
	 }
	frame mysubframe  {
		 function display() {
			print(“IN MYSUBFRAME:”+s+”\n”);
		   }       
	 }
}

Using a frame
 Declaration 




 
Calling a frame’s function
Initial

The initial method is the frame constructor. It is automatically called when a new instance is created.
This method is declared as a normal function, whose parameters must be provided in the declaration:


		

Different Objects
KIF provides many different objects, each with specific methods. Some of these objects are specific to XIP. Each of these objects come with a list of predefined methods.

Transparent Object:
self

Basic Objects:
string, int, float, boolean, time, call

Complex Objects:
vector, map, matrix,file, iterator

XIP Objects:
node, dependency, xml, fst, rule.

self
self should be used only as a parameter declaration in a function. It is a transparent object, similar to a sort of pointer, that does not require any specific transformation for the parameter.

string
Methods:
	size():	return the length of  a string
	ord():	return the  code of a string character. Send either the code of the first character or a list of codes, according to the type of the receiving variable.
	split(string splitter,vector vect): split a string along splitter and store the results  in a vector. If splitter==“”, then the string is split into a vector of characters
	removefirst(int nb): remove the first nb characters of a string
	removelast(int nb): remove the last nb characters of a string
	left(int nb): return the first nb characters of a string 
	right(int nb): return the last nb characters of a string 
	mid(int pos,int nb): return the nb characters starting at position pos of a string 
	pop(i): remove character at position i
	pop(): remove last character
	last(): return last character
	insert(i,s): insert the string s at I

String II
Methods:
	trim(): remove the trailing characters
	upper(): Return the string in upper characters
	lower(): Return the string in lower characters
	latin(): convert an UTF8 string in LATIN
	utf8(): convert a LATIN string into UTF8
	replace(rgx,str): Replace the substrings matching rgx with str
	boolean=regex(rgx): Test if the regular expression rgx applies to string
	vector=regex(rgx): Split the string along the regular expression rgx
	string=regex(rgx): Return the substring matching rgx in the string
	int=regex(rgx): Return the position of the substring matching rgx in the string
	
Operator
	sub in s: test if sub is a substring of s
	+: concatenate two strings.
Indexes
	str[i]:	return the ith character of a string
	str[i:j]: return the substring between  i and j.
int, float
Methods:
	log10(),ln, exp,sqrt,tan,sin,cos,atan: different mathematical functions
	chr():	return the ascii character corresponding to this number as a code.

Operators
	+,-,*,/:	mathematical operators
	<<,>>: bitwise operators
	%: division modulo
	^: power


	


	
vector
Methods:
	size():	return the length of  the vector
	push(a): add a to the vector
	pop(int i): remove the ith element from the vector and return it.
	pop(): remove the last element from the vector and return it.
	last(): return the last element of the vector
	join(string sep): concatenate each element in the vector in a string where each element is separated from the others with sep
	insert(i,x): insert the element x at position i
	sum(): Sum each element with the others
	product(): Multiply each element with the others
	clear(): clean the vector
	sort(compare): sort the content of the vector according to compare function.
	apply(a,b,c…): apply all XIP rules store in the vector, passing a,b,c etc. as parameters.



	
vector
Operator
	x in vect: return true or a list of indexes, according to the receiving variable.
	+,*,-,/ etc..: add etc.. a value to each element of a vector or add each element of vector to another
	&&,||: intersection or union of two vectors

Indexes:
	str[i]:	return the ith character of a vector
	str[i:j]: return the sub-vector between  i and j.

As an integer or a float
Return the vector size

Initialisation
A vector can be initialised with a structure between “[]”.
vector v=[1,2,3,4,5];
	


	
vector:  sort
//This function should return only true or false
//The type of the parameters will determine its
//behaviour
function compare(int i,int j) {
	if (i<j)
	    return(true);
	return(false);
}

vector myvect;

myvect.push(10);
myvect.push(5);
myvect.push(20);

myvect.sort(compare);

it=myvect;
for (it.begin();it.nend();it.next())
	print(“Content:”+it.key()+”=”+it.value(),”\n”);


vector:  sort bis
//This function should return only true or false
//The type of the parameters will determine its
//behaviour
function compare(string i,string j) {
	if (i<j)
	    return(true);
	return(false);
}

vector myvect;

myvect.push(10);
myvect.push(5);
myvect.push(20);

myvect.sort(compare);

it=myvect;
for (it.begin();it.nend();it.next())
	print(“Content:”+it.key()+”=”+it.value(),”\n”);


map
Store any objects with a key. This key is always a string. Thus, “1” has the same key as 1.

Methods:
	size():	return the length of  the vector
	sum(): Sum each element with the others
	product(): Multiply each element with the others
	pop(string key): remove the elements matching key
	clear(): clean the vector

Operator
	x in amap: return true or a list of indexes, according to the receiving variable. 
	IMPORTANT: X is compared to the values stored in the map
	+,*,-,/ etc..: add etc.. a value to each element of a map or add each element of a map to another along keys
	&&,||: intersection or union of two maps along keys.



	


	
map
Indexes:
	str[key]:  return the ith character of a vector

As an integer or a float
Return the size of the map

Initialisation
	A map can be initialised with a description such as: {“a”:1,”b”:2}
	map toto= {“a”:1,”b”:2};




	


	
matrix
Store any objects with a class, an attribute and an instance value

Methods:
	size():	return the number of elements in the matrix
	instances(): return the number of  instances in the matrix	
	set(int instance,string class,string attribute, value):  Add an element with a class instance value, according to an attribute and an instance Id.
	get(int instance,string class,string attribute):  Return the element with a specific class instance value, according to an attribute and an instance Id.
	clear(): clean the vector
	save(filename,type):  save the matrix on the disk. type can take two values: “arff” or “xml”.

Operator
	x in amatrix: return true if x is in amtrix values

As an integer or a float
Return the number of elements stored in the matrix.


	


	
matrix: Example
matrix mat;
//We initialise our matrix
mat.set(0,"toto","taille",10.01);
mat.set(0"toto","couleur","rougeâtre");
mat.set(1,"toto","taille",20.2);
mat.set(1,"toto","couleur","rouge");
mat.set(2,"tutu","taille",30.323);
mat.set(2,"tutu","couleur","bleuâtre");
mat.set(3,"tutu","taille",50.23);
mat.set(3,"tutu","couleur","verdâtre");

mat.save(“toto.xml”,”xml”);
mat.save(“toto.arff”,”arff”);

iterator, riterator
Iterate on any objects of type: string, vector or map, rule.
riterator is the reverse iterator, to iterate from the end of the collection.
Instantiation: it consists in affecting an iterator with any objects of the above type.
Methods:
	value(): return the value of the current element
	key(): return the key of the current element
	valuetype(): return the value type of the current element	
	isvaluetype(string type):  test the type of the current element
	begin(): initialiaze the iterator with the beginning of the collection
	next(): next element in the collection
	end(): return true when the end of the collection is reached
	nend(): return true while the end of the collection has not been reached (~end())
	apply(a,b,c): apply a XIP rule





	


	
time
Methods:
	setdate(year,month,day,hour,min,sec): set a time variable
	date(): return the date as a string
	year(): return the year as an integer
	month(): return the month as an integer
	day(): return the day as an integer
	hour(): return the hour as an integer
	min(): return the min as an integer
	sec(): return the sec as an integer

Operators
	+,-:	dates can be added or substracted
As a string
	return the date as a string
As an integer or a float
	return the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC


	

	


	
Example:
vector myvect;
int i;
string s;
iterator it;

s=“12345”;
i=10;
print(“Intermediary:”+s+i+”  “+(i+s)+”\n”);
i+=s;
myvect.push(s);
myvect.push(i);

it=myvect;
for (it.begin();it.nend();it.next())
	print(“Content:”+it.key()+”=”+it.value(),”\n”);


call
Method:
		apply(…): apply the function with the given parameters

This method is used to store a function, which can then be applied through a variable of that type.

function display(string e)  {
	print(“DISPLAY:”,e,endl);
}

call myfunc;
myfunc=display;
myfunc.apply(“TEST”);



	
file
Methods:
		openwrite(string filename): open a file in write mode
		openread(string filename): open a file in read mode
		write(string s1,string s2,…): write strings in the file
		get(): read one character from the file
		unget(): return one character to the stream
		unget(nb): return nb character to the stream
		read(): read a line from a file
		readln(): read a line from a file
		seek(int p): position the file cursor at p
		tell(): return the position of the file cursor
		eof(): return true when the end of file is reached

Operator
x in file: if x is a string, then it receives a line from the file, if it is a vector, it pushes the line on the top of it. If x is an integer or a float, it gets only one character from the stream.


	
Example of a FILE manipulationA text file is split into a list of words
function testreadafile(string path) {
	file f;
	f.openread(path);
	string s;
	vector words;
	iterator it;
	while (~f.eof()) {
		s=f.readln();
		s=s.trim();
		s.split(" ",words);
		it=words;
		for (it.begin();~it.end();it.next()) 
			print("word:",it.value(),endl);
	}
	f.close();
}

Frames again…
When a frame is used in a specific context, the user might want to use it as an integer, a string or a float. Since a frame does not have this sort of property, it is necessary for the user to explain how a frame should be considered when used in these contexts. A user can then implement a int, a string or a float method within the frame in order for the language to correctly handle it in context:

frame myframe {
	string s=“toto”;
	int i;
	float f;
	function string() {
		return(s);
    }
}


node: Syntactic XIP node
Methods:
	name(): return the part of speech
	data(map feats): Features are stored in map as attribute/value 
	setfeature(string att, string val):  feature assignment to the node
	feature(string att):  return the value of an attribute
	feature(string att,string val):  test the value of an attribute
	next(): return the next node after current node
	previous(): return the previous node after current node
	child(): return the first child node under current node
	last(): return the last child node under current node
	parent(): return the parent node above current node
	surface(): return the surface string
	lemma(): return the lemma string
node: Syntactic XIP node II
Methods:
	number(): return the ID of current node
	offset(int left,int right): left and right receive the offset
	offsetchar(int left,int right): left and right receive the character offset
	tokenoffset(int left,int right): left and right receive the  token offset
	xmlnode(): return the XML node associated with this node (TOKENIZE mode)

As a string
Return the Part of Speech
As an integer or a float
Return the node ID


	
dependency: Syntactic XIP dependency
Methods:
	name(): return the dependency name
	data(map feats): Features are stored in map as attribute/value 
	setfeature(string att, string val):  feature assignment to the dependency
	feature(string att):  return the value of an attribute
	feature(string att,string val):  test the value of an attribute
	parameters(): return a vector of node variable
	stack(vector v): return the dependency stack in a vector of strings
	push(string s): push s on the dependency’s stack
	pop(int i): remove the ith element from the dependency’s stack
	pop(): remove the last element on top of the dependency’s stack

As a string
Return the dependency name
As an integer or a float
Return the dependency ID



	
generation: XIP generation Node
This object shares most of its methods with dependency. However, it adds the following one:
Methods:
	next(): return the next Generation Node
	previous(): return the previous Generation Node 
	child(): return the first Generation Node  child
	parent(): return the parent Generation Node 
	last():  return the last child
	



	
fst
This object enables the utilization of an FST script to do lookup or lookdown operations over strings.
Methods:
	load(string script, string flags, int strategy,boolean utf8): load an FST script. Strategy=0 for a DEPTH strategy, 1 for a BREADTH strategy. 
	compile(map m, string filename): compile the map m into a FST. Keys should be a lemma+”\t”+features and values should be a surface form: m[“abc\t+Noun]=“bca”;
	up(string w): return the vector of all readings for the word w
	down(string l, string feats): return the surface form of a lemma l with features feats

As a String	
Return the filename of the FST script



	
xml: XML nodes
Methods:
	name(): return the XML node name
	data(map props): Properties are stored in map as attribute/value 
	next(): return the next XML node
	previous(): return the previous XML node
	child(): return the first child node under current node
	parent(): return the parent node above current node

As a string
Return the XML node name


	
rule: Dependency Rules
Two ways:
In a dependency file, field name is replaced with KifDependencies, then the next instruction should be: rule myrules, where myrules is a kif variable, in which every next rule will be stored. This variable can be declared as many times as necessary to store more rules in it. More than one variable can be declared for a given grammar.
A dependency rule can be directly declared in a KIF programme.


Methods:
	apply(a,b,c…): return the features of current dependency as a map
	set(float weight,float threshold,float value): set the probabilities value of a rule
	get(float weight,float threshold,float value): get the probabilities value of a rule



	
Rules
Rules can be directly declared in a KIF programme in the following way:

	

	rule myrule = |Noun#1,Verb#2| if (~subj(#2,#1)) subj(#2,#1);


To apply a rule,  you simply call the apply method: myrule.apply();

Rules II
It is also possible to declare a rule, which in turn will call a KIF function:



	rule myrule = |Noun#1,Verb#2| if (~subj(#2,#1)) {kifcall(x,y);};
       x,y parameters can then be passed through the apply function:  myrule.apply(10,20);

Rules
Rules can also be applied one after the others with an iterator:

		iterator it=myrule;
		for (it.begin();it.nend();it.next())
			it.apply(10,20);
switch	
The switch enables to list a series of tests for one single object:

switch(expression) {
	 v1 : {…
	}
	 v2 : {…
	} 
	default: {…	//default is a predefined keyword
     }
}

	v1,v2,..vn can be either a string or an integer or a float. The expression is evaluated once and compared with v1, v2, vn… 
For, while
	for is composed of three parts, an initialisation, a Boolean expression and a continuation part.

	for (expression;boolean;next) {…}

	while is composed of a single Boolean expression.

	while (boolean) {…}

The keywords: continue and break can be used in any of these expressions. 

try, catch, raise
Try, catch and raise are used to handle errors. 
catch can be associated with a string or an integer parameter. This variable is automatically set to null when the try bloc is evaluated. A catch without variable is also possible.

	string s;
	try {…
	}
	catch(s);


raise(string s): raise an error with the message s. An error message should always starts with an error number on three characters: 000… The first digit should always be different from 0, which is kept for internal KF errors. However no verification will be made by the language.

Example: raise(“201 My error”);
Operator in
This operator operates on string, vector or map. It returns either true or a list of keys according to the context of the test.

	map dico;
	vector lst;
	dico["a"]=1;
	dico["b"]=6;
	dico[“c"]=4;
	dico[“d"]=6;

	if (6 in dico)
	     print(“As expected",endl);
	lst=6 in dico;
	riterator revit=lst;
	for (revit.begin();revit.nend();revit.next())
		print("LST:",revit.value(),endl);	

Operator: in with function
The operator in can be used with a comparison function. This function is introduced with the with operator.

		function compare(int i, int j) {
			if (i<j)
			    return(true);
		     return(false);
		}

		if (14 in vect with compare)
		      print(“OK”);
Operator: in for a frame
This operator is quite peculiar. This operator tests the presence of an element in a vector, a map or a string. However, the in operator can also be used to test the content of a frame, if and only if a in function is declared in this frame.

frame  myframe {
      vector vect;
	function in(self i) {
		if ( i in vect)
		    return(true);
                return(false);
   }
}

A KIF programme in a XIP grammar
A KIF programme can be called from any XIP grammar rule. Only functions will be visible. However, XIP variables are visible from within a KIF programme.

Variables:
String s=“in XIP”;

Kif:

function display() {
	print(“S=“,s,endl);
}
KIF programme in XIP
Furthermore, a KIF programme can modify any XIP variables. It can also return numerical values.

Variables:
String s=“in XIP”;

Kif:

function display() {
	print(“S=“,s,endl);
	s=“value from KIF”;
}


KIF programme in XIP
To pass a XIP node to a KIF function, do as usual…


Kif:

function display(node n) {
	print(“NODE POS=“+n+endl);
}


KIF programme in XIP
To pass a XIP dependency to a KIF function, do as usual…

Kif:

function display(dependency d) {
	print(“Dependency=“+d+endl);
}


KIF programme in XIP
A KIF function can also be called from a XIP rule

Kif:

function testpos(node n) {
//We need to force the STRING
//interpretation of n…
	if ( “noun”==n)
	   return(true);
	return(false);
}


Some remarks
By default, when an object does not have the requested type, it is translated as a null object. The null object returns the following values:
As a string: “”
As an integer or a float: 0
As a Boolean: false

Function
In the case of a function, which is called from within an expression, the context can be queried thank to the environment() function, which returns the type as a string or an integer.
BUGS…
NONE OF COURSE…

