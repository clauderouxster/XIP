/* soapKIF_USCOREBindingProxy.cpp
   Generated by gSOAP 2.8.22 from kifwebservice.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapKIF_USCOREBindingProxy.h"

KIF_USCOREBindingProxy::KIF_USCOREBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	KIF_USCOREBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

KIF_USCOREBindingProxy::KIF_USCOREBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	KIF_USCOREBindingProxy_init(_soap->imode, _soap->omode);
}

KIF_USCOREBindingProxy::KIF_USCOREBindingProxy(const char *url)
{	this->soap = soap_new();
	this->soap_own = true;
	KIF_USCOREBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

KIF_USCOREBindingProxy::KIF_USCOREBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	KIF_USCOREBindingProxy_init(iomode, iomode);
}

KIF_USCOREBindingProxy::KIF_USCOREBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	KIF_USCOREBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

KIF_USCOREBindingProxy::KIF_USCOREBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	KIF_USCOREBindingProxy_init(imode, omode);
}

KIF_USCOREBindingProxy::~KIF_USCOREBindingProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void KIF_USCOREBindingProxy::KIF_USCOREBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"kifws", "urn:kifservice", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void KIF_USCOREBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void KIF_USCOREBindingProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	KIF_USCOREBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void KIF_USCOREBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *KIF_USCOREBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *KIF_USCOREBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *KIF_USCOREBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *KIF_USCOREBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int KIF_USCOREBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int KIF_USCOREBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void KIF_USCOREBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void KIF_USCOREBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *KIF_USCOREBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int KIF_USCOREBindingProxy::callKIF(const char *endpoint, const char *soap_action, std::string name, std::string param1, std::string param2, std::string param3, std::string &returned)
{	struct soap *soap = this->soap;
	struct kifws__callKIF soap_tmp_kifws__callKIF;
	struct kifws__callKIFResponse *soap_tmp_kifws__callKIFResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.examples.com/KIF/";
	if (soap_action == NULL)
		soap_action = "callKIF";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_kifws__callKIF.name = name;
	soap_tmp_kifws__callKIF.param1 = param1;
	soap_tmp_kifws__callKIF.param2 = param2;
	soap_tmp_kifws__callKIF.param3 = param3;
	soap_serializeheader(soap);
	soap_serialize_kifws__callKIF(soap, &soap_tmp_kifws__callKIF);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_kifws__callKIF(soap, &soap_tmp_kifws__callKIF, "kifws:callKIF", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kifws__callKIF(soap, &soap_tmp_kifws__callKIF, "kifws:callKIF", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&returned)
		return soap_closesock(soap);
	soap_default_std__string(soap, &returned);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_kifws__callKIFResponse = soap_get_kifws__callKIFResponse(soap, NULL, "", NULL);
	if (!soap_tmp_kifws__callKIFResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	returned = soap_tmp_kifws__callKIFResponse->returned;
	return soap_closesock(soap);
}
/* End of client proxy code */
