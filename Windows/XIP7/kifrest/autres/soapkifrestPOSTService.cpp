/* soapkifrestPOSTService.cpp
   Generated by gSOAP 2.8.22 from kifrest.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapkifrestPOSTService.h"

kifrestPOSTService::kifrestPOSTService()
{	this->soap = soap_new();
	this->soap_own = true;
	kifrestPOSTService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

kifrestPOSTService::kifrestPOSTService(struct soap *_soap, std::string l)
{	this->soap = _soap;
	this->soap_own = false;
	localhost = l;
	kifrestPOSTService_init(_soap->imode, _soap->omode);
}

kifrestPOSTService::kifrestPOSTService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	kifrestPOSTService_init(iomode, iomode);
}

kifrestPOSTService::kifrestPOSTService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	kifrestPOSTService_init(imode, omode);
}

kifrestPOSTService::~kifrestPOSTService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void kifrestPOSTService::kifrestPOSTService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	if (localhost == "")
		localhost = "http://websrv.cs.fsu.edu/~engelen/kifrest.wsdl";

	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "urn:kifrest", NULL, NULL},
	{"kifREST", localhost.c_str(), NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void kifrestPOSTService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void kifrestPOSTService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	kifrestPOSTService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
kifrestPOSTService *kifrestPOSTService::copy()
{	kifrestPOSTService *dup = SOAP_NEW_COPY(kifrestPOSTService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int kifrestPOSTService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int kifrestPOSTService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int kifrestPOSTService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int kifrestPOSTService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int kifrestPOSTService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int kifrestPOSTService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void kifrestPOSTService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void kifrestPOSTService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *kifrestPOSTService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void kifrestPOSTService::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *kifrestPOSTService::soap_header()
{	return this->soap->header;
}

int kifrestPOSTService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				break;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	return this->soap->error;
}

SOAP_SOCKET kifrestPOSTService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET kifrestPOSTService::accept()
{	
	std::cerr << "ACCEPTE" << std::endl;
	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int kifrestPOSTService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int kifrestPOSTService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___kifREST__call(struct soap*, kifrestPOSTService*);

int kifrestPOSTService::dispatch()
{	return dispatch(this->soap);
}

int kifrestPOSTService::dispatch(struct soap* soap)
{	kifrestPOSTService_init(soap->imode, soap->omode);
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:call"))
		return serve___kifREST__call(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___kifREST__call(struct soap *soap, kifrestPOSTService *service)
{	struct __kifREST__call soap_tmp___kifREST__call;
	struct __kifREST__callResponse soap_tmp___kifREST__callResponse;
	soap_default___kifREST__callResponse(soap, &soap_tmp___kifREST__callResponse);
	soap_default___kifREST__call(soap, &soap_tmp___kifREST__call);
	if (!soap_get___kifREST__call(soap, &soap_tmp___kifREST__call, "-kifREST:call", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->call(soap_tmp___kifREST__call.ns1__call, soap_tmp___kifREST__callResponse.ns1__callResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___kifREST__callResponse(soap, &soap_tmp___kifREST__callResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___kifREST__callResponse(soap, &soap_tmp___kifREST__callResponse, "-kifREST:callResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___kifREST__callResponse(soap, &soap_tmp___kifREST__callResponse, "-kifREST:callResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
