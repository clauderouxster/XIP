/* soapClient.cpp
   Generated by gSOAP 2.8.22 from kifrest.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.22 2015-07-27 11:44:55 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___kifrest__call(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__quadruplet *ns1__call, std::string &ns1__callResponse)
{	struct __kifrest__call soap_tmp___kifrest__call;
	struct __kifrest__callResponse *soap_tmp___kifrest__callResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://websrv.cs.fsu.edu/~engelen/kifrestserver.cgi";
	if (soap_action == NULL)
		soap_action = "";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___kifrest__call.ns1__call = ns1__call;
	soap_set_version(soap, 0); /* no SOAP */
	soap_serialize___kifrest__call(soap, &soap_tmp___kifrest__call);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_put___kifrest__call(soap, &soap_tmp___kifrest__call, "-kifrest:call", NULL)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	soap->http_content = "text/xml";
	if (soap_connect_command(soap, SOAP_POST_FILE, soap_url(soap, soap_endpoint, soap_action), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_put___kifrest__call(soap, &soap_tmp___kifrest__call, "-kifrest:call", NULL)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns1__callResponse)
		return soap_closesock(soap);
	soap_default_std__string(soap, &ns1__callResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___kifrest__callResponse = soap_get___kifrest__callResponse(soap, NULL, "-kifrest:callResponse", NULL);
	if (!soap_tmp___kifrest__callResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ns1__callResponse = soap_tmp___kifrest__callResponse->ns1__callResponse;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
