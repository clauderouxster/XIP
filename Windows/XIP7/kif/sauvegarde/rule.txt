#La grammaire d'analyse du generateur a base de regle


mot := [A-Z|a-z] [A-Z|a-z|0-9]*
string := %$ [A-Z|a-z] [A-Z|a-z|0-9]*
digits := [0-9]+
chiffre := %\ digits
symbole := %% .
point := %.
interval := [A-Z|a-z|0-9] %- [A-Z|a-z|0-9]

token := negation^string^point^interval^mot^chiffre^symbole

negation := %~ (blanc) crochet^optionel^contexte^token

kleene := [%*|%+] (blanc elementobligatoire)

blanc := % +

optionel := %( liste %)

crochet := %[ liste %]

contexte := %{ liste %}

elementobligatoire := crochet^token

elementbase := crochet^optionel^contexte^token

element := elementbase (kleene)

exclusif := %^ (blanc) liste
union := %| (blanc) liste
coupechoix := %; (blanc) liste
sequence := blanc liste
suivant := exclusif^union^coupechoix^sequence

liste := element (suivant)

regle := mot (blanc) %: %= (blanc) liste
