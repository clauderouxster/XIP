/* soapKIF_USCOREBinding0Proxy.cpp
   Generated by gSOAP 2.8.22 from kifwebservice.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapKIF_USCOREBinding0Proxy.h"

KIF_USCOREBinding0Proxy::KIF_USCOREBinding0Proxy()
{	this->soap = soap_new();
	this->soap_own = true;
	KIF_USCOREBinding0Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

KIF_USCOREBinding0Proxy::KIF_USCOREBinding0Proxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	KIF_USCOREBinding0Proxy_init(_soap->imode, _soap->omode);
}

KIF_USCOREBinding0Proxy::KIF_USCOREBinding0Proxy(const char *url)
{	this->soap = soap_new();
	this->soap_own = true;
	KIF_USCOREBinding0Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

KIF_USCOREBinding0Proxy::KIF_USCOREBinding0Proxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	KIF_USCOREBinding0Proxy_init(iomode, iomode);
}

KIF_USCOREBinding0Proxy::KIF_USCOREBinding0Proxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	KIF_USCOREBinding0Proxy_init(iomode, iomode);
	soap_endpoint = url;
}

KIF_USCOREBinding0Proxy::KIF_USCOREBinding0Proxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	KIF_USCOREBinding0Proxy_init(imode, omode);
}

KIF_USCOREBinding0Proxy::~KIF_USCOREBinding0Proxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void KIF_USCOREBinding0Proxy::KIF_USCOREBinding0Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"kifws", "urn:kifservice", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void KIF_USCOREBinding0Proxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void KIF_USCOREBinding0Proxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	KIF_USCOREBinding0Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void KIF_USCOREBinding0Proxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *KIF_USCOREBinding0Proxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *KIF_USCOREBinding0Proxy::soap_fault()
{	return this->soap->fault;
}

const char *KIF_USCOREBinding0Proxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *KIF_USCOREBinding0Proxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int KIF_USCOREBinding0Proxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int KIF_USCOREBinding0Proxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void KIF_USCOREBinding0Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void KIF_USCOREBinding0Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *KIF_USCOREBinding0Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int KIF_USCOREBinding0Proxy::callKIF0(const char *endpoint, const char *soap_action, std::string name, std::string &returned)
{	struct soap *soap = this->soap;
	struct kifws__callKIF0 soap_tmp_kifws__callKIF0;
	struct kifws__callKIF0Response *soap_tmp_kifws__callKIF0Response;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.examples.com/KIF/";
	if (soap_action == NULL)
		soap_action = "callKIF0";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_kifws__callKIF0.name = name;
	soap_serializeheader(soap);
	soap_serialize_kifws__callKIF0(soap, &soap_tmp_kifws__callKIF0);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_kifws__callKIF0(soap, &soap_tmp_kifws__callKIF0, "kifws:callKIF0", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kifws__callKIF0(soap, &soap_tmp_kifws__callKIF0, "kifws:callKIF0", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&returned)
		return soap_closesock(soap);
	soap_default_std__string(soap, &returned);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_kifws__callKIF0Response = soap_get_kifws__callKIF0Response(soap, NULL, "", NULL);
	if (!soap_tmp_kifws__callKIF0Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	returned = soap_tmp_kifws__callKIF0Response->returned;
	return soap_closesock(soap);
}

int KIF_USCOREBinding0Proxy::callKIF1(const char *endpoint, const char *soap_action, std::string name, std::string param1, std::string &returned)
{	struct soap *soap = this->soap;
	struct kifws__callKIF1 soap_tmp_kifws__callKIF1;
	struct kifws__callKIF1Response *soap_tmp_kifws__callKIF1Response;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.examples.com/KIF/";
	if (soap_action == NULL)
		soap_action = "callKIF1";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_kifws__callKIF1.name = name;
	soap_tmp_kifws__callKIF1.param1 = param1;
	soap_serializeheader(soap);
	soap_serialize_kifws__callKIF1(soap, &soap_tmp_kifws__callKIF1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_kifws__callKIF1(soap, &soap_tmp_kifws__callKIF1, "kifws:callKIF1", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kifws__callKIF1(soap, &soap_tmp_kifws__callKIF1, "kifws:callKIF1", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&returned)
		return soap_closesock(soap);
	soap_default_std__string(soap, &returned);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_kifws__callKIF1Response = soap_get_kifws__callKIF1Response(soap, NULL, "", NULL);
	if (!soap_tmp_kifws__callKIF1Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	returned = soap_tmp_kifws__callKIF1Response->returned;
	return soap_closesock(soap);
}

int KIF_USCOREBinding0Proxy::callKIF2(const char *endpoint, const char *soap_action, std::string name, std::string param1, std::string param2, std::string &returned)
{	struct soap *soap = this->soap;
	struct kifws__callKIF2 soap_tmp_kifws__callKIF2;
	struct kifws__callKIF2Response *soap_tmp_kifws__callKIF2Response;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.examples.com/KIF/";
	if (soap_action == NULL)
		soap_action = "callKIF2";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_kifws__callKIF2.name = name;
	soap_tmp_kifws__callKIF2.param1 = param1;
	soap_tmp_kifws__callKIF2.param2 = param2;
	soap_serializeheader(soap);
	soap_serialize_kifws__callKIF2(soap, &soap_tmp_kifws__callKIF2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_kifws__callKIF2(soap, &soap_tmp_kifws__callKIF2, "kifws:callKIF2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kifws__callKIF2(soap, &soap_tmp_kifws__callKIF2, "kifws:callKIF2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&returned)
		return soap_closesock(soap);
	soap_default_std__string(soap, &returned);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_kifws__callKIF2Response = soap_get_kifws__callKIF2Response(soap, NULL, "", NULL);
	if (!soap_tmp_kifws__callKIF2Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	returned = soap_tmp_kifws__callKIF2Response->returned;
	return soap_closesock(soap);
}

int KIF_USCOREBinding0Proxy::callKIF3(const char *endpoint, const char *soap_action, std::string name, std::string param1, std::string param2, std::string param3, std::string &returned)
{	struct soap *soap = this->soap;
	struct kifws__callKIF3 soap_tmp_kifws__callKIF3;
	struct kifws__callKIF3Response *soap_tmp_kifws__callKIF3Response;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.examples.com/KIF/";
	if (soap_action == NULL)
		soap_action = "callKIF3";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_kifws__callKIF3.name = name;
	soap_tmp_kifws__callKIF3.param1 = param1;
	soap_tmp_kifws__callKIF3.param2 = param2;
	soap_tmp_kifws__callKIF3.param3 = param3;
	soap_serializeheader(soap);
	soap_serialize_kifws__callKIF3(soap, &soap_tmp_kifws__callKIF3);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_kifws__callKIF3(soap, &soap_tmp_kifws__callKIF3, "kifws:callKIF3", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kifws__callKIF3(soap, &soap_tmp_kifws__callKIF3, "kifws:callKIF3", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&returned)
		return soap_closesock(soap);
	soap_default_std__string(soap, &returned);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_kifws__callKIF3Response = soap_get_kifws__callKIF3Response(soap, NULL, "", NULL);
	if (!soap_tmp_kifws__callKIF3Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	returned = soap_tmp_kifws__callKIF3Response->returned;
	return soap_closesock(soap);
}

int KIF_USCOREBinding0Proxy::callKIF4(const char *endpoint, const char *soap_action, std::string name, std::string param1, std::string param2, std::string param3, std::string param4, std::string &returned)
{	struct soap *soap = this->soap;
	struct kifws__callKIF4 soap_tmp_kifws__callKIF4;
	struct kifws__callKIF4Response *soap_tmp_kifws__callKIF4Response;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.examples.com/KIF/";
	if (soap_action == NULL)
		soap_action = "callKIF4";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_kifws__callKIF4.name = name;
	soap_tmp_kifws__callKIF4.param1 = param1;
	soap_tmp_kifws__callKIF4.param2 = param2;
	soap_tmp_kifws__callKIF4.param3 = param3;
	soap_tmp_kifws__callKIF4.param4 = param4;
	soap_serializeheader(soap);
	soap_serialize_kifws__callKIF4(soap, &soap_tmp_kifws__callKIF4);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_kifws__callKIF4(soap, &soap_tmp_kifws__callKIF4, "kifws:callKIF4", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kifws__callKIF4(soap, &soap_tmp_kifws__callKIF4, "kifws:callKIF4", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&returned)
		return soap_closesock(soap);
	soap_default_std__string(soap, &returned);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_kifws__callKIF4Response = soap_get_kifws__callKIF4Response(soap, NULL, "", NULL);
	if (!soap_tmp_kifws__callKIF4Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	returned = soap_tmp_kifws__callKIF4Response->returned;
	return soap_closesock(soap);
}

int KIF_USCOREBinding0Proxy::callKIF5(const char *endpoint, const char *soap_action, std::string name, std::string param1, std::string param2, std::string param3, std::string param4, std::string param5, std::string &returned)
{	struct soap *soap = this->soap;
	struct kifws__callKIF5 soap_tmp_kifws__callKIF5;
	struct kifws__callKIF5Response *soap_tmp_kifws__callKIF5Response;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.examples.com/KIF/";
	if (soap_action == NULL)
		soap_action = "callKIF5";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_kifws__callKIF5.name = name;
	soap_tmp_kifws__callKIF5.param1 = param1;
	soap_tmp_kifws__callKIF5.param2 = param2;
	soap_tmp_kifws__callKIF5.param3 = param3;
	soap_tmp_kifws__callKIF5.param4 = param4;
	soap_tmp_kifws__callKIF5.param5 = param5;
	soap_serializeheader(soap);
	soap_serialize_kifws__callKIF5(soap, &soap_tmp_kifws__callKIF5);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_kifws__callKIF5(soap, &soap_tmp_kifws__callKIF5, "kifws:callKIF5", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kifws__callKIF5(soap, &soap_tmp_kifws__callKIF5, "kifws:callKIF5", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&returned)
		return soap_closesock(soap);
	soap_default_std__string(soap, &returned);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_kifws__callKIF5Response = soap_get_kifws__callKIF5Response(soap, NULL, "", NULL);
	if (!soap_tmp_kifws__callKIF5Response || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	returned = soap_tmp_kifws__callKIF5Response->returned;
	return soap_closesock(soap);
}

int KIF_USCOREBinding0Proxy::MethodsResponse(const char *endpoint, const char *soap_action, std::string &returned)
{	struct soap *soap = this->soap;
	struct kifws__MethodsResponse soap_tmp_kifws__MethodsResponse;
	struct kifws__MethodsResponseResponse *soap_tmp_kifws__MethodsResponseResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://www.examples.com/KIF/";
	if (soap_action == NULL)
		soap_action = "Methods";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_kifws__MethodsResponse(soap, &soap_tmp_kifws__MethodsResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_kifws__MethodsResponse(soap, &soap_tmp_kifws__MethodsResponse, "kifws:MethodsResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kifws__MethodsResponse(soap, &soap_tmp_kifws__MethodsResponse, "kifws:MethodsResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&returned)
		return soap_closesock(soap);
	soap_default_std__string(soap, &returned);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_kifws__MethodsResponseResponse = soap_get_kifws__MethodsResponseResponse(soap, NULL, "", NULL);
	if (!soap_tmp_kifws__MethodsResponseResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	returned = soap_tmp_kifws__MethodsResponseResponse->returned;
	return soap_closesock(soap);
}
/* End of client proxy code */
