/* soapH.h
   Generated by gSOAP 2.8.22 from kifwebservice.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data), 0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data), 0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data), 0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_kifws__MethodsResponse
#define SOAP_TYPE_kifws__MethodsResponse (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__MethodsResponse(struct soap*, struct kifws__MethodsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__MethodsResponse(struct soap*, const struct kifws__MethodsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__MethodsResponse(struct soap*, const char*, int, const struct kifws__MethodsResponse *, const char*);
SOAP_FMAC3 struct kifws__MethodsResponse * SOAP_FMAC4 soap_in_kifws__MethodsResponse(struct soap*, const char*, struct kifws__MethodsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__MethodsResponse(struct soap*, const struct kifws__MethodsResponse *, const char*, const char*);

#ifndef soap_write_kifws__MethodsResponse
#define soap_write_kifws__MethodsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__MethodsResponse(soap, data), 0) || soap_put_kifws__MethodsResponse(soap, data, "kifws:MethodsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__MethodsResponse * SOAP_FMAC4 soap_get_kifws__MethodsResponse(struct soap*, struct kifws__MethodsResponse *, const char*, const char*);

#ifndef soap_read_kifws__MethodsResponse
#define soap_read_kifws__MethodsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__MethodsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__MethodsResponse * SOAP_FMAC2 soap_instantiate_kifws__MethodsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__MethodsResponse * soap_new_kifws__MethodsResponse(struct soap *soap, int n = -1) { return soap_instantiate_kifws__MethodsResponse(soap, n, NULL, NULL, NULL); }

inline struct kifws__MethodsResponse * soap_new_req_kifws__MethodsResponse(struct soap *soap) { struct kifws__MethodsResponse *_p = soap_instantiate_kifws__MethodsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__MethodsResponse(soap, _p); } return _p; }

inline struct kifws__MethodsResponse * soap_new_set_kifws__MethodsResponse(struct soap *soap) { struct kifws__MethodsResponse *_p = soap_instantiate_kifws__MethodsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__MethodsResponse(soap, _p); } return _p; }

inline void soap_delete_kifws__MethodsResponse(struct soap *soap, struct kifws__MethodsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__MethodsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__MethodsResponseResponse
#define SOAP_TYPE_kifws__MethodsResponseResponse (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__MethodsResponseResponse(struct soap*, struct kifws__MethodsResponseResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__MethodsResponseResponse(struct soap*, const struct kifws__MethodsResponseResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__MethodsResponseResponse(struct soap*, const char*, int, const struct kifws__MethodsResponseResponse *, const char*);
SOAP_FMAC3 struct kifws__MethodsResponseResponse * SOAP_FMAC4 soap_in_kifws__MethodsResponseResponse(struct soap*, const char*, struct kifws__MethodsResponseResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__MethodsResponseResponse(struct soap*, const struct kifws__MethodsResponseResponse *, const char*, const char*);

#ifndef soap_write_kifws__MethodsResponseResponse
#define soap_write_kifws__MethodsResponseResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__MethodsResponseResponse(soap, data), 0) || soap_put_kifws__MethodsResponseResponse(soap, data, "kifws:MethodsResponseResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__MethodsResponseResponse * SOAP_FMAC4 soap_get_kifws__MethodsResponseResponse(struct soap*, struct kifws__MethodsResponseResponse *, const char*, const char*);

#ifndef soap_read_kifws__MethodsResponseResponse
#define soap_read_kifws__MethodsResponseResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__MethodsResponseResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__MethodsResponseResponse * SOAP_FMAC2 soap_instantiate_kifws__MethodsResponseResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__MethodsResponseResponse * soap_new_kifws__MethodsResponseResponse(struct soap *soap, int n = -1) { return soap_instantiate_kifws__MethodsResponseResponse(soap, n, NULL, NULL, NULL); }

inline struct kifws__MethodsResponseResponse * soap_new_req_kifws__MethodsResponseResponse(struct soap *soap, std::string& returned) { struct kifws__MethodsResponseResponse *_p = soap_instantiate_kifws__MethodsResponseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__MethodsResponseResponse(soap, _p); _p->returned = returned; } return _p; }

inline struct kifws__MethodsResponseResponse * soap_new_set_kifws__MethodsResponseResponse(struct soap *soap, std::string& returned) { struct kifws__MethodsResponseResponse *_p = soap_instantiate_kifws__MethodsResponseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__MethodsResponseResponse(soap, _p); _p->returned = returned; } return _p; }

inline void soap_delete_kifws__MethodsResponseResponse(struct soap *soap, struct kifws__MethodsResponseResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__MethodsResponseResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF5
#define SOAP_TYPE_kifws__callKIF5 (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF5(struct soap*, struct kifws__callKIF5 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF5(struct soap*, const struct kifws__callKIF5 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF5(struct soap*, const char*, int, const struct kifws__callKIF5 *, const char*);
SOAP_FMAC3 struct kifws__callKIF5 * SOAP_FMAC4 soap_in_kifws__callKIF5(struct soap*, const char*, struct kifws__callKIF5 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF5(struct soap*, const struct kifws__callKIF5 *, const char*, const char*);

#ifndef soap_write_kifws__callKIF5
#define soap_write_kifws__callKIF5(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF5(soap, data), 0) || soap_put_kifws__callKIF5(soap, data, "kifws:callKIF5", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF5 * SOAP_FMAC4 soap_get_kifws__callKIF5(struct soap*, struct kifws__callKIF5 *, const char*, const char*);

#ifndef soap_read_kifws__callKIF5
#define soap_read_kifws__callKIF5(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF5(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF5 * SOAP_FMAC2 soap_instantiate_kifws__callKIF5(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF5 * soap_new_kifws__callKIF5(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF5(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF5 * soap_new_req_kifws__callKIF5(struct soap *soap, std::string& name, std::string& param1, std::string& param2, std::string& param3, std::string& param4, std::string& param5) { struct kifws__callKIF5 *_p = soap_instantiate_kifws__callKIF5(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF5(soap, _p); _p->name = name; _p->param1 = param1; _p->param2 = param2; _p->param3 = param3; _p->param4 = param4; _p->param5 = param5; } return _p; }

inline struct kifws__callKIF5 * soap_new_set_kifws__callKIF5(struct soap *soap, std::string& name, std::string& param1, std::string& param2, std::string& param3, std::string& param4, std::string& param5) { struct kifws__callKIF5 *_p = soap_instantiate_kifws__callKIF5(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF5(soap, _p); _p->name = name; _p->param1 = param1; _p->param2 = param2; _p->param3 = param3; _p->param4 = param4; _p->param5 = param5; } return _p; }

inline void soap_delete_kifws__callKIF5(struct soap *soap, struct kifws__callKIF5 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF5(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF5Response
#define SOAP_TYPE_kifws__callKIF5Response (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF5Response(struct soap*, struct kifws__callKIF5Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF5Response(struct soap*, const struct kifws__callKIF5Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF5Response(struct soap*, const char*, int, const struct kifws__callKIF5Response *, const char*);
SOAP_FMAC3 struct kifws__callKIF5Response * SOAP_FMAC4 soap_in_kifws__callKIF5Response(struct soap*, const char*, struct kifws__callKIF5Response *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF5Response(struct soap*, const struct kifws__callKIF5Response *, const char*, const char*);

#ifndef soap_write_kifws__callKIF5Response
#define soap_write_kifws__callKIF5Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF5Response(soap, data), 0) || soap_put_kifws__callKIF5Response(soap, data, "kifws:callKIF5Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF5Response * SOAP_FMAC4 soap_get_kifws__callKIF5Response(struct soap*, struct kifws__callKIF5Response *, const char*, const char*);

#ifndef soap_read_kifws__callKIF5Response
#define soap_read_kifws__callKIF5Response(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF5Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF5Response * SOAP_FMAC2 soap_instantiate_kifws__callKIF5Response(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF5Response * soap_new_kifws__callKIF5Response(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF5Response(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF5Response * soap_new_req_kifws__callKIF5Response(struct soap *soap, std::string& returned) { struct kifws__callKIF5Response *_p = soap_instantiate_kifws__callKIF5Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF5Response(soap, _p); _p->returned = returned; } return _p; }

inline struct kifws__callKIF5Response * soap_new_set_kifws__callKIF5Response(struct soap *soap, std::string& returned) { struct kifws__callKIF5Response *_p = soap_instantiate_kifws__callKIF5Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF5Response(soap, _p); _p->returned = returned; } return _p; }

inline void soap_delete_kifws__callKIF5Response(struct soap *soap, struct kifws__callKIF5Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF5Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF4
#define SOAP_TYPE_kifws__callKIF4 (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF4(struct soap*, struct kifws__callKIF4 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF4(struct soap*, const struct kifws__callKIF4 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF4(struct soap*, const char*, int, const struct kifws__callKIF4 *, const char*);
SOAP_FMAC3 struct kifws__callKIF4 * SOAP_FMAC4 soap_in_kifws__callKIF4(struct soap*, const char*, struct kifws__callKIF4 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF4(struct soap*, const struct kifws__callKIF4 *, const char*, const char*);

#ifndef soap_write_kifws__callKIF4
#define soap_write_kifws__callKIF4(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF4(soap, data), 0) || soap_put_kifws__callKIF4(soap, data, "kifws:callKIF4", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF4 * SOAP_FMAC4 soap_get_kifws__callKIF4(struct soap*, struct kifws__callKIF4 *, const char*, const char*);

#ifndef soap_read_kifws__callKIF4
#define soap_read_kifws__callKIF4(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF4(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF4 * SOAP_FMAC2 soap_instantiate_kifws__callKIF4(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF4 * soap_new_kifws__callKIF4(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF4(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF4 * soap_new_req_kifws__callKIF4(struct soap *soap, std::string& name, std::string& param1, std::string& param2, std::string& param3, std::string& param4) { struct kifws__callKIF4 *_p = soap_instantiate_kifws__callKIF4(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF4(soap, _p); _p->name = name; _p->param1 = param1; _p->param2 = param2; _p->param3 = param3; _p->param4 = param4; } return _p; }

inline struct kifws__callKIF4 * soap_new_set_kifws__callKIF4(struct soap *soap, std::string& name, std::string& param1, std::string& param2, std::string& param3, std::string& param4) { struct kifws__callKIF4 *_p = soap_instantiate_kifws__callKIF4(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF4(soap, _p); _p->name = name; _p->param1 = param1; _p->param2 = param2; _p->param3 = param3; _p->param4 = param4; } return _p; }

inline void soap_delete_kifws__callKIF4(struct soap *soap, struct kifws__callKIF4 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF4(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF4Response
#define SOAP_TYPE_kifws__callKIF4Response (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF4Response(struct soap*, struct kifws__callKIF4Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF4Response(struct soap*, const struct kifws__callKIF4Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF4Response(struct soap*, const char*, int, const struct kifws__callKIF4Response *, const char*);
SOAP_FMAC3 struct kifws__callKIF4Response * SOAP_FMAC4 soap_in_kifws__callKIF4Response(struct soap*, const char*, struct kifws__callKIF4Response *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF4Response(struct soap*, const struct kifws__callKIF4Response *, const char*, const char*);

#ifndef soap_write_kifws__callKIF4Response
#define soap_write_kifws__callKIF4Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF4Response(soap, data), 0) || soap_put_kifws__callKIF4Response(soap, data, "kifws:callKIF4Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF4Response * SOAP_FMAC4 soap_get_kifws__callKIF4Response(struct soap*, struct kifws__callKIF4Response *, const char*, const char*);

#ifndef soap_read_kifws__callKIF4Response
#define soap_read_kifws__callKIF4Response(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF4Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF4Response * SOAP_FMAC2 soap_instantiate_kifws__callKIF4Response(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF4Response * soap_new_kifws__callKIF4Response(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF4Response(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF4Response * soap_new_req_kifws__callKIF4Response(struct soap *soap, std::string& returned) { struct kifws__callKIF4Response *_p = soap_instantiate_kifws__callKIF4Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF4Response(soap, _p); _p->returned = returned; } return _p; }

inline struct kifws__callKIF4Response * soap_new_set_kifws__callKIF4Response(struct soap *soap, std::string& returned) { struct kifws__callKIF4Response *_p = soap_instantiate_kifws__callKIF4Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF4Response(soap, _p); _p->returned = returned; } return _p; }

inline void soap_delete_kifws__callKIF4Response(struct soap *soap, struct kifws__callKIF4Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF4Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF3
#define SOAP_TYPE_kifws__callKIF3 (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF3(struct soap*, struct kifws__callKIF3 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF3(struct soap*, const struct kifws__callKIF3 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF3(struct soap*, const char*, int, const struct kifws__callKIF3 *, const char*);
SOAP_FMAC3 struct kifws__callKIF3 * SOAP_FMAC4 soap_in_kifws__callKIF3(struct soap*, const char*, struct kifws__callKIF3 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF3(struct soap*, const struct kifws__callKIF3 *, const char*, const char*);

#ifndef soap_write_kifws__callKIF3
#define soap_write_kifws__callKIF3(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF3(soap, data), 0) || soap_put_kifws__callKIF3(soap, data, "kifws:callKIF3", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF3 * SOAP_FMAC4 soap_get_kifws__callKIF3(struct soap*, struct kifws__callKIF3 *, const char*, const char*);

#ifndef soap_read_kifws__callKIF3
#define soap_read_kifws__callKIF3(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF3(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF3 * SOAP_FMAC2 soap_instantiate_kifws__callKIF3(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF3 * soap_new_kifws__callKIF3(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF3(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF3 * soap_new_req_kifws__callKIF3(struct soap *soap, std::string& name, std::string& param1, std::string& param2, std::string& param3) { struct kifws__callKIF3 *_p = soap_instantiate_kifws__callKIF3(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF3(soap, _p); _p->name = name; _p->param1 = param1; _p->param2 = param2; _p->param3 = param3; } return _p; }

inline struct kifws__callKIF3 * soap_new_set_kifws__callKIF3(struct soap *soap, std::string& name, std::string& param1, std::string& param2, std::string& param3) { struct kifws__callKIF3 *_p = soap_instantiate_kifws__callKIF3(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF3(soap, _p); _p->name = name; _p->param1 = param1; _p->param2 = param2; _p->param3 = param3; } return _p; }

inline void soap_delete_kifws__callKIF3(struct soap *soap, struct kifws__callKIF3 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF3(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF3Response
#define SOAP_TYPE_kifws__callKIF3Response (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF3Response(struct soap*, struct kifws__callKIF3Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF3Response(struct soap*, const struct kifws__callKIF3Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF3Response(struct soap*, const char*, int, const struct kifws__callKIF3Response *, const char*);
SOAP_FMAC3 struct kifws__callKIF3Response * SOAP_FMAC4 soap_in_kifws__callKIF3Response(struct soap*, const char*, struct kifws__callKIF3Response *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF3Response(struct soap*, const struct kifws__callKIF3Response *, const char*, const char*);

#ifndef soap_write_kifws__callKIF3Response
#define soap_write_kifws__callKIF3Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF3Response(soap, data), 0) || soap_put_kifws__callKIF3Response(soap, data, "kifws:callKIF3Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF3Response * SOAP_FMAC4 soap_get_kifws__callKIF3Response(struct soap*, struct kifws__callKIF3Response *, const char*, const char*);

#ifndef soap_read_kifws__callKIF3Response
#define soap_read_kifws__callKIF3Response(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF3Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF3Response * SOAP_FMAC2 soap_instantiate_kifws__callKIF3Response(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF3Response * soap_new_kifws__callKIF3Response(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF3Response(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF3Response * soap_new_req_kifws__callKIF3Response(struct soap *soap, std::string& returned) { struct kifws__callKIF3Response *_p = soap_instantiate_kifws__callKIF3Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF3Response(soap, _p); _p->returned = returned; } return _p; }

inline struct kifws__callKIF3Response * soap_new_set_kifws__callKIF3Response(struct soap *soap, std::string& returned) { struct kifws__callKIF3Response *_p = soap_instantiate_kifws__callKIF3Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF3Response(soap, _p); _p->returned = returned; } return _p; }

inline void soap_delete_kifws__callKIF3Response(struct soap *soap, struct kifws__callKIF3Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF3Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF2
#define SOAP_TYPE_kifws__callKIF2 (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF2(struct soap*, struct kifws__callKIF2 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF2(struct soap*, const struct kifws__callKIF2 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF2(struct soap*, const char*, int, const struct kifws__callKIF2 *, const char*);
SOAP_FMAC3 struct kifws__callKIF2 * SOAP_FMAC4 soap_in_kifws__callKIF2(struct soap*, const char*, struct kifws__callKIF2 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF2(struct soap*, const struct kifws__callKIF2 *, const char*, const char*);

#ifndef soap_write_kifws__callKIF2
#define soap_write_kifws__callKIF2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF2(soap, data), 0) || soap_put_kifws__callKIF2(soap, data, "kifws:callKIF2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF2 * SOAP_FMAC4 soap_get_kifws__callKIF2(struct soap*, struct kifws__callKIF2 *, const char*, const char*);

#ifndef soap_read_kifws__callKIF2
#define soap_read_kifws__callKIF2(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF2 * SOAP_FMAC2 soap_instantiate_kifws__callKIF2(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF2 * soap_new_kifws__callKIF2(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF2(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF2 * soap_new_req_kifws__callKIF2(struct soap *soap, std::string& name, std::string& param1, std::string& param2) { struct kifws__callKIF2 *_p = soap_instantiate_kifws__callKIF2(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF2(soap, _p); _p->name = name; _p->param1 = param1; _p->param2 = param2; } return _p; }

inline struct kifws__callKIF2 * soap_new_set_kifws__callKIF2(struct soap *soap, std::string& name, std::string& param1, std::string& param2) { struct kifws__callKIF2 *_p = soap_instantiate_kifws__callKIF2(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF2(soap, _p); _p->name = name; _p->param1 = param1; _p->param2 = param2; } return _p; }

inline void soap_delete_kifws__callKIF2(struct soap *soap, struct kifws__callKIF2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF2Response
#define SOAP_TYPE_kifws__callKIF2Response (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF2Response(struct soap*, struct kifws__callKIF2Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF2Response(struct soap*, const struct kifws__callKIF2Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF2Response(struct soap*, const char*, int, const struct kifws__callKIF2Response *, const char*);
SOAP_FMAC3 struct kifws__callKIF2Response * SOAP_FMAC4 soap_in_kifws__callKIF2Response(struct soap*, const char*, struct kifws__callKIF2Response *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF2Response(struct soap*, const struct kifws__callKIF2Response *, const char*, const char*);

#ifndef soap_write_kifws__callKIF2Response
#define soap_write_kifws__callKIF2Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF2Response(soap, data), 0) || soap_put_kifws__callKIF2Response(soap, data, "kifws:callKIF2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF2Response * SOAP_FMAC4 soap_get_kifws__callKIF2Response(struct soap*, struct kifws__callKIF2Response *, const char*, const char*);

#ifndef soap_read_kifws__callKIF2Response
#define soap_read_kifws__callKIF2Response(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF2Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF2Response * SOAP_FMAC2 soap_instantiate_kifws__callKIF2Response(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF2Response * soap_new_kifws__callKIF2Response(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF2Response(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF2Response * soap_new_req_kifws__callKIF2Response(struct soap *soap, std::string& returned) { struct kifws__callKIF2Response *_p = soap_instantiate_kifws__callKIF2Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF2Response(soap, _p); _p->returned = returned; } return _p; }

inline struct kifws__callKIF2Response * soap_new_set_kifws__callKIF2Response(struct soap *soap, std::string& returned) { struct kifws__callKIF2Response *_p = soap_instantiate_kifws__callKIF2Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF2Response(soap, _p); _p->returned = returned; } return _p; }

inline void soap_delete_kifws__callKIF2Response(struct soap *soap, struct kifws__callKIF2Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF2Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF1
#define SOAP_TYPE_kifws__callKIF1 (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF1(struct soap*, struct kifws__callKIF1 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF1(struct soap*, const struct kifws__callKIF1 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF1(struct soap*, const char*, int, const struct kifws__callKIF1 *, const char*);
SOAP_FMAC3 struct kifws__callKIF1 * SOAP_FMAC4 soap_in_kifws__callKIF1(struct soap*, const char*, struct kifws__callKIF1 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF1(struct soap*, const struct kifws__callKIF1 *, const char*, const char*);

#ifndef soap_write_kifws__callKIF1
#define soap_write_kifws__callKIF1(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF1(soap, data), 0) || soap_put_kifws__callKIF1(soap, data, "kifws:callKIF1", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF1 * SOAP_FMAC4 soap_get_kifws__callKIF1(struct soap*, struct kifws__callKIF1 *, const char*, const char*);

#ifndef soap_read_kifws__callKIF1
#define soap_read_kifws__callKIF1(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF1(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF1 * SOAP_FMAC2 soap_instantiate_kifws__callKIF1(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF1 * soap_new_kifws__callKIF1(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF1(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF1 * soap_new_req_kifws__callKIF1(struct soap *soap, std::string& name, std::string& param1) { struct kifws__callKIF1 *_p = soap_instantiate_kifws__callKIF1(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF1(soap, _p); _p->name = name; _p->param1 = param1; } return _p; }

inline struct kifws__callKIF1 * soap_new_set_kifws__callKIF1(struct soap *soap, std::string& name, std::string& param1) { struct kifws__callKIF1 *_p = soap_instantiate_kifws__callKIF1(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF1(soap, _p); _p->name = name; _p->param1 = param1; } return _p; }

inline void soap_delete_kifws__callKIF1(struct soap *soap, struct kifws__callKIF1 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF1(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF1Response
#define SOAP_TYPE_kifws__callKIF1Response (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF1Response(struct soap*, struct kifws__callKIF1Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF1Response(struct soap*, const struct kifws__callKIF1Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF1Response(struct soap*, const char*, int, const struct kifws__callKIF1Response *, const char*);
SOAP_FMAC3 struct kifws__callKIF1Response * SOAP_FMAC4 soap_in_kifws__callKIF1Response(struct soap*, const char*, struct kifws__callKIF1Response *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF1Response(struct soap*, const struct kifws__callKIF1Response *, const char*, const char*);

#ifndef soap_write_kifws__callKIF1Response
#define soap_write_kifws__callKIF1Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF1Response(soap, data), 0) || soap_put_kifws__callKIF1Response(soap, data, "kifws:callKIF1Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF1Response * SOAP_FMAC4 soap_get_kifws__callKIF1Response(struct soap*, struct kifws__callKIF1Response *, const char*, const char*);

#ifndef soap_read_kifws__callKIF1Response
#define soap_read_kifws__callKIF1Response(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF1Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF1Response * SOAP_FMAC2 soap_instantiate_kifws__callKIF1Response(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF1Response * soap_new_kifws__callKIF1Response(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF1Response(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF1Response * soap_new_req_kifws__callKIF1Response(struct soap *soap, std::string& returned) { struct kifws__callKIF1Response *_p = soap_instantiate_kifws__callKIF1Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF1Response(soap, _p); _p->returned = returned; } return _p; }

inline struct kifws__callKIF1Response * soap_new_set_kifws__callKIF1Response(struct soap *soap, std::string& returned) { struct kifws__callKIF1Response *_p = soap_instantiate_kifws__callKIF1Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF1Response(soap, _p); _p->returned = returned; } return _p; }

inline void soap_delete_kifws__callKIF1Response(struct soap *soap, struct kifws__callKIF1Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF1Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF0
#define SOAP_TYPE_kifws__callKIF0 (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF0(struct soap*, struct kifws__callKIF0 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF0(struct soap*, const struct kifws__callKIF0 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF0(struct soap*, const char*, int, const struct kifws__callKIF0 *, const char*);
SOAP_FMAC3 struct kifws__callKIF0 * SOAP_FMAC4 soap_in_kifws__callKIF0(struct soap*, const char*, struct kifws__callKIF0 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF0(struct soap*, const struct kifws__callKIF0 *, const char*, const char*);

#ifndef soap_write_kifws__callKIF0
#define soap_write_kifws__callKIF0(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF0(soap, data), 0) || soap_put_kifws__callKIF0(soap, data, "kifws:callKIF0", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF0 * SOAP_FMAC4 soap_get_kifws__callKIF0(struct soap*, struct kifws__callKIF0 *, const char*, const char*);

#ifndef soap_read_kifws__callKIF0
#define soap_read_kifws__callKIF0(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF0(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF0 * SOAP_FMAC2 soap_instantiate_kifws__callKIF0(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF0 * soap_new_kifws__callKIF0(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF0(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF0 * soap_new_req_kifws__callKIF0(struct soap *soap, std::string& name) { struct kifws__callKIF0 *_p = soap_instantiate_kifws__callKIF0(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF0(soap, _p); _p->name = name; } return _p; }

inline struct kifws__callKIF0 * soap_new_set_kifws__callKIF0(struct soap *soap, std::string& name) { struct kifws__callKIF0 *_p = soap_instantiate_kifws__callKIF0(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF0(soap, _p); _p->name = name; } return _p; }

inline void soap_delete_kifws__callKIF0(struct soap *soap, struct kifws__callKIF0 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF0(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_kifws__callKIF0Response
#define SOAP_TYPE_kifws__callKIF0Response (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_kifws__callKIF0Response(struct soap*, struct kifws__callKIF0Response *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_kifws__callKIF0Response(struct soap*, const struct kifws__callKIF0Response *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_kifws__callKIF0Response(struct soap*, const char*, int, const struct kifws__callKIF0Response *, const char*);
SOAP_FMAC3 struct kifws__callKIF0Response * SOAP_FMAC4 soap_in_kifws__callKIF0Response(struct soap*, const char*, struct kifws__callKIF0Response *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_kifws__callKIF0Response(struct soap*, const struct kifws__callKIF0Response *, const char*, const char*);

#ifndef soap_write_kifws__callKIF0Response
#define soap_write_kifws__callKIF0Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_kifws__callKIF0Response(soap, data), 0) || soap_put_kifws__callKIF0Response(soap, data, "kifws:callKIF0Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct kifws__callKIF0Response * SOAP_FMAC4 soap_get_kifws__callKIF0Response(struct soap*, struct kifws__callKIF0Response *, const char*, const char*);

#ifndef soap_read_kifws__callKIF0Response
#define soap_read_kifws__callKIF0Response(soap, data) ( soap_begin_recv(soap) || !soap_get_kifws__callKIF0Response(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct kifws__callKIF0Response * SOAP_FMAC2 soap_instantiate_kifws__callKIF0Response(struct soap*, int, const char*, const char*, size_t*);

inline struct kifws__callKIF0Response * soap_new_kifws__callKIF0Response(struct soap *soap, int n = -1) { return soap_instantiate_kifws__callKIF0Response(soap, n, NULL, NULL, NULL); }

inline struct kifws__callKIF0Response * soap_new_req_kifws__callKIF0Response(struct soap *soap, std::string& returned) { struct kifws__callKIF0Response *_p = soap_instantiate_kifws__callKIF0Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF0Response(soap, _p); _p->returned = returned; } return _p; }

inline struct kifws__callKIF0Response * soap_new_set_kifws__callKIF0Response(struct soap *soap, std::string& returned) { struct kifws__callKIF0Response *_p = soap_instantiate_kifws__callKIF0Response(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_kifws__callKIF0Response(soap, _p); _p->returned = returned; } return _p; }

inline void soap_delete_kifws__callKIF0Response(struct soap *soap, struct kifws__callKIF0Response *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_kifws__callKIF0Response(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
