//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
//!
//! File:	translations.xip
//! Content:	mappings morphology -> XIP features
//!
//! Language:	ITALIAN
//! ENCODING:	UTF-8	[€àâáäã]
//!
//! Author:	Anne Schiller
//!
//! Date: 	17-Jan-2006	:: initial version
//! Update:	08-Apr-2008	:: changed to UTF-8
//!
//!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Translation:


//-- MORPHOLOGICAL CATEGORIES ----------------------------------------------------------
					// DESCRIPTION		EXAMPLE

1P		= [1P=+].		// first person			io::io+Pron+Nom+1P+MF+Sg
2P		= [2P=+].		// second person		dai::dare+Verb+PresInd+2P+Sg
3P		= [3P=+].		// third person			si::si+Pron+Refl+Aton+3P+MF+SP
Abbr		= [Abbr=+].		// abbreviation			etc.::eccetera+Adv+Abbr
Acc		= [Acc=+].		// accusative (pronoun)		mi::io+Pron+Acc+Aton+1P+MF+Sg
AConj		= [AConj=+].
Adj		= adj.			// adjective			brave::bravo+Adj+Fem+Pl
Adv		= adv.			// adverb			domani::domani+Adv
Apoc		= [Apoc=+].		// apocope (truncated)		un::uno+Art+Indef+Masc+Sg+Apoc
Art		= det[art=+].			// article			la::lo+Art+Def+Fem+Sg
Aton		= [Aton=+].		// atonic (clitic) pronoun	vi::voi+Pron+Acc+Aton+2P+MF+Pl
Aug		= [Aug=+].		// augmentative			omone::uomo+Noun+Aug+Masc+Sg
Card		= [Card=+].		// cardinal number		due::due+Num+Card
City		= [City=+].		// name of a city		Roma::Roma+Prop+Cit
Comp		= [Comp=+].		// comparative (adjective)	maggiori::grande+Adj+Comp+Masc+Pl
Company		= [Company=+].
Cond		= [Cond=+].		// conditional			darebbe::dare+Verb+Cond+3P+Sg
Conj		= conj.			// conjunction			perché::perché+Conj
Continent		= [Continent=+].	// continent (proper name)	Europa::Europa+Prop+Continent+Fem+Sg
Coord		= [Coord=+].	// coordinative Conj or Adv	E, ma, o, cioè, Piuttosto, Pure.
Country		= [Country=+].		// a state/country name		Italia::Italia+Prop+Pay+Fem+Sg
Curr		= [Curr=+].		// currency			100$::100$+Dig+Curr
Dat		= [Dat=+].		// dative (pronoun)		ti::tu+Pron+Dat+Aton+2P+MF+Sg
Date		= [Date=+].		// date expression		29.X.1999::29.X.1999+Dig+Date
Day		= [Day=+].		// day-of-the-week name		lunedì::lunedì+Noun+Day+Masc+Sg
Def		= [Def=+].		// definite (article)		le::lo+Art+Def+Fem+Pl
Deg		= [Deg=+].		// degrees (temperature)	25°::25°+Dig+Deg
Dem		= [Dem=+].		// demonstrative (pronoun)	quello::quello+Pron+Dem+Masc+Sg
Demonym		= [Demonym=+].	
Det		= det.			// determiner			tale::tale+Det+MF+Sg
Dig		= num[Dig=+].		// digit			123::123+Dig
Dim		= [Dim=+].		// diminutive			piccolino::piccolo+Noun+Dim+Masc+Sg
Elided		= [Elided=+].		// elision			c'::ci+Pron+Dem+Elided
Euph		= [Euph=+].		// final consonant (euphony)	ed::e+Conj+Euph
Fam		= [Fam=+].		// family name			Romano::Romano+Prop+Fam
Fem		= [Fem=+].		// feminine gender		rana::rana+Noun+Fem+Sg
Firstname		= [Firstname=+].		// given name			Anna::Anna+Prop+Giv+Fem+Sg
For		= misc[Foreign=+].	// common foreign word		the::the+For
FutInd		= [Fut=+,Ind=+].	// future indicative		darò::dare+Verb+FutInd+1P+Sg
Gerund		= [Gerund=+].		// gerund			dando::dare+Verb+Gerund
Giv		= [Firstname=+].		// given name			Anna::Anna+Prop+Giv+Fem+Sg
ImpInd		= [Imperf=+,Ind=+].	// imperfect indicative		davate::dare+Verb+ImpInd+2P+Pl
ImpSubj		= [Imperf=+,Subj=+].	// imperfect subjunctiv		deste::dare+Verb+ImpSubj+2P+Pl
Impv		= [Impv=+].		// imperative mood		dai::dare+Verb+Impv+2P+Sg
Indef		= [Indef=+].		// indefinite (pronoun)		uno::uno+Pron+Indef+Fem+Sg
Inf		= [Inf=+].		// infinitive			dare::dare+Verb+Inf
Initial		= [Initial=+].		// initials			J.::J.+Initial
Interj		= interj.		// interjections.		bah::bah+Interj
Interrog		= [Interrog=+].		// interrogative pronoun	chi::chi+Pron+Interrog+MF+Sg
Inst		= [Inst=+].		// political institutions and research instituts ONU, Ministero del Lavoro, CNRS, ENEA
Lake		= [Lake=+].		// lake name			Maggiore::Maggiore+Prop+Lake+Masc+Sg
Lastname		= [Lastname=+].		// last names...!!!
Let		= noun[Let=+].		// single letter		y::y+Let
MF		= [Masc=+,Fem=+].		// feminine or masculine 	tu::tu+Pron+Nom+2P+MF+Sg
Masc		= [Masc=+].		// masculine gender		gatto::gatto+Noun+Masc+Sg
Meas		= noun[Meas=+].		// measurement			cm::cm+Meas
Modal		= [Modal=+].		// modal and "phrasal" verbs	Volere Potere Dovere, Sapere, Fare
Month		= [Month=+].		// month names			ottobre::ottobre+Noun+Month+Masc+Sg
Mountain		= [Mount=+].		// mountain names		Vesuvio::Vesuvio+Prop+Mount+Masc+Sg
NAdj		= [Nadj=+].		// noun-adjective		italiano: nadj
Ne		= [Ne=+].		// "ne" particle		ne::ne+Pron+Ne+MF+SP
Newspaper		= [newspaper=+].	
Nom		= [Nom=+].		// nominative pronoun		voi::voi+Pron+Nom+2P+MF+Pl
Noun		= noun.			// noun				gatto::gatto+Noun+Masc+Sg
Num		= num.			// number			cinque::cinque+Num+Card
Number		= num.			// number			cinque::cinque+Num+Card
Onom		= interj[Onom=+].	// onomatopeic sound		muuuh::muuuh+Onom
Ord		= [Ord=+].		// ordinal number		quinti::quinto+Num+Ord+Masc+Pl
Org		= [Org=+].		// name of an organization	ONU::ONU+Prop+Org+Fem+Sg
Paren		= [Paren=+].		// parenthesis, bracket		(::(+Punct+Paren
PastPart		= [PastPart=+].		// past participle		fusi::fondere+Verb+PastPart+Masc+Pl
Pay		= [Country=+].		// a state/country name		Italia::Italia+Prop+Pay+Fem+Sg
Pej		= [Pej=+].		// pejorative			omaccio::uomo+Noun+Pej+Masc+Sg
Percent		= [Percent=+].		// percentage number		15%::15%+Dig+Percent
Perf		= [Perf=+].		// perfect tense		fusi::fondere+Verb+Perf+1P+Sg
Pl		= [Pl=+].		// plural number		gatti::gatto+Noun+Masc+Pl
Place		= [Place=+].		// place name and adj			Romagna::Romagna+Prop+Place+Fem+Sg
Poss		= [Poss=+].		// possessive pronoun		sua::suo+Pron+Poss+Fem+Sg
Postmod		= [Postmod=+].
Preclit		= [Preclit=+].		// pre-clitic			me::io+Pron+Dat+Aton+1P+MF+Sg+Preclit
PreConj		= conj[Pre=+].		// pre-conjunction		prima::prima +PreConj
PreDet		= det[Pre=+].		// predeterminer		tutti::tutto+PreDet+Masc+Pl
Premod		= [premod=+].
Preprep		= prep[Pre=+].		// pre-preposition		prima::prima +Preprep
Prep		= prep.			// preposition			su::su+Prep
PresInd		= [Pres=+,Ind=+].	// present indicative		dai::dare+Verb+PresInd+2P+Sg
PresPart		= [PresPart=+].	// present participle		fondente::fondere+Verb+PresPart+Fem+Sg
PresSubj		= [Pres=+,Subj=+].	// present subjunctive		diamo::dare+Verb+PresSubj+1P+Pl
Prod		= [Prod=+].		// product name			TextBridge::TextBridge+Prop+Prod
Prof		= [prof=+].		// professions names			for NE
Pron		= pron.		// pronoun			voi::voi+Pron+Nom+2P+MF+Pl
Prop		= noun[Prop=+].	// proper name			Paolo::Paolo+Prop+Giv+Masc+Sg
Quant		= quant.		// quantifier			qualche::qualche+Quant+MF+Sg
QuantPron		= quant[Pron=+].	// both quantifier and pronoun	tutti::tutto+QuantPron+Masc+Pl
Quote		= [Quote=+].	// quotation mark		"::"+Punct+Quote
Region		= [region=+].
Refl		= [Refl=+].		// reflexive pronoun		si::si+Pron+Refl+Aton+3P+MF+SP
Rel		= [Rel=+].		// relative pronoun		chi::chi+Pron+Rel+MF+Sg
River		= [river=+].		// river name			Po::Po+Prop+River+Masc+Sg
Rom		= [Rom=+].		// roman numeral		XII::XII+Dig+Rom
SP		= [Sg=+,Pl=+].	// singular or plural		si::si+Pron+Refl+Aton+3P+MF+SP
Sci		= [Sci=+].		// scientific name		ASCII::ASCII+Prop+Sci
Sea		= [Sea=+].		// sea/ocean name		Adriatico::Adriatico+Prop+Sea+Masc+Sg
Sg		= [Sg=+].		// singular number		gatto::gatto+Noun+Masc+Sg
Sgml		= symbol[Sgml=+].	// markup tags			<p>::<p>+Sgml+Sent
Soc		= [Soc=+].		// company name			Xerox::Xerox+Prop+Soc+Fem+Sg
Spec		= [Spec=+].		// special (punctuation)		-::-+Punct+Spec
Sport		= [Sport=+].		// NE: sport teams
Subord		= [Subord=+].	// subordinative Conj or Adv	che, dunque
Sup		= [Sup=+].		// superlative (adjective)	bravissimo::bravo+Adj+Sup+Masc+Sg
Tel		= [Tel=+].		// telephone number		12.34.56::12.34.56+Dig+Tel
Time		= [Time=+].		// time expression		12:30::12:30+Dig+Time
Title		= noun[Title=+,people=+].	// title			signora::signora+Title+Fem+Sg
Ton		= [Ton=+].		// tonic pronoun		voi::voi+Pron+Acc+Ton+2P+MF+Pl
Usastate		= [State=+].		// state (of the USA)		Texas::Texas+Prop+Usastate+Masc+Sg
Verb		= verb.			// verb				dare::dare+Verb+Inf
WordPart		= misc[WordPart=+].	// not a valid word alone	ex::ex+Adj+WordPart
Year		= [Year=+].		// year				'99::'99+Dig+Year



// additional translations for punctuations and special symbols:
//Accent		= [accent=+].		// accent
//Bracket		= [bracket=+].		// bracket
Comma 		= [comma=+].		// comma
//Dash		= [dash=+].		// dash
Dots		= [dots=+].		// dots
Left		= [left=+].		// left (paren or bracket)
Paren		= [paren=+].		// parenthesis
Punct		= punct.			// punctuation
Quote		= [quote=+].		// quotation mark
Right		= [right=+].		// right (paren or bracket)
Sent		= [sent=+].		// sentence final punctuation
Slash	 	= [slash=+].		// slash or backslash
Symbol		= symbol.			// special symbol



// source identifier
guessed		= [src=guess].		// guesser
open		= [src=open].		// open class FST


