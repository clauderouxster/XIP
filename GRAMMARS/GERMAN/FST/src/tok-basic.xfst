# =====================================================================
# CONTENT:	Finite-State Tokenizer (GERMAN)
#
# AUTHOR:	Anne Schiller
# ENCODING:	UTF-8
#
# UPDATE:	29-June-1999
# UPDATE:	02-Aug-2006	(converted to UTF-8)
# =====================================================================

# NOTE: load abbreviations first!
define ABBR

# ---------------------------------------------------------------------
echo >>> define token separator symbol
define TS	"*TS*" ;

echo >>> define internal markers
define LFT	"<*" ;
define RGT	"*>" ;

define ANY	\[TS] ;
define ANY1	\[TS|LFT|RGT] ;

define INPUT	ANY1* ;

# ---------------------------------------------------------------------
echo >>> define white space
define SPACE [
  "\u0009"	#	HORIZONTAL TABULATION
| "\u000A"	#	LINE FEED
| "\u000D"	#	CARRIAGE RETURN
| "\u0020"	#	SPACE
| "\u00A0"	#	NO-BREAK SPACE
];

# ---------------------------------------------------------------------
echo >>> define single symbols
define DQUOTE [
  "\u0022"	# ["] # QUOTATION MARK
| "\u201C"	# [“] # LEFT DOUBLE QUOTATION MARK
| "\u201D"	# [”] # RIGHT DOUBLE QUOTATION MARK
| "\u201E"	# [„] # DOUBLE LOW-9 QUOTATION MARK
| "\u201F"	# [‟] # DOUBLE HIGH-REVERSED-9 QUOTATION MARK
| "\u00AB"	# [«] # LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
| "\u00BB"	# [»] # RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
];

define SINGLE [ 
  "\u0021"	# [!] # EXCLAMATION MARK
| "\u0028"	# [(] # LEFT PARENTHESIS
| "\u0029"	# [)] # RIGHT PARENTHESIS
| "\u002F"	# [/] # SOLIDUS
| "\u003C"	# [<] # LESS-THAN SIGN
| "\u003E"	# [>] # GREATER-THAN SIGN
| "\u003F"	# [?] # QUESTION MARK
| "\u005B"	# [[] # LEFT SQUARE BRACKET
| "\u005D"	# []] # RIGHT SQUARE BRACKET
| "\u007B"	# [{] # LEFT CURLY BRACKET
| "\u007D"	# [}] # RIGHT CURLY BRACKET
| "\u00A1"	# [¡] # INVERTED EXCLAMATION MARK
| "\u00BF"	# [¿] # INVERTED QUESTION MARK

| "\u2039"	# [‹] # SINGLE LEFT-POINTING ANGLE QUOTATION MARK
| "\u203A"	# [›] # SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
| "\u2022"	# [•] # BULLET
| "\u2026"	# […] # HORIZONTAL ELLIPSIS
| "\u2014"	# [—] # EM DASH
| "\u00B7"	# [·] # MIDDLE DOT
#| "\u00A4"	# [¤] # CURRENCY SIGN
| DQUOTE
];

# ---------------------------------------------------------------------
echo >>> define QUOTES
define LQUOTE [
  "\u0060"	# [`] # GRAVE ACCENT	# only if used as quote
| "\u2018"	# [‘] # LEFT SINGLE QUOTATION MARK
| "\u201A"	# [‚] # SINGLE LOW-9 QUOTATION MARK
| "\u201B"	# [‛] # SINGLE HIGH-REVERSED-9 QUOTATION MARK
];

define RQUOTE [
  "\u0027"	# ['] # APOSTROPHE
| "\u00B4"	# [´] # ACUTE ACCENT	# only if used as quote
| "\u2019"	# [’] # RIGHT SINGLE QUOTATION MARK
];

define QUOTE	[ LQUOTE | RQUOTE ];

# ---------------------------------------------------------------------
echo >>> define right boundary symbols
define RIGHT [
  "\u002C"	# [,] # COMMA
| "\u002E"	# [.] # FULL STOP
| "\u003A"	# [:] # COLON
| "\u003B"	# [;] # SEMICOLON
| "\u201A"	# [‚] # SINGLE LOW-9 QUOTATION MARK	# if used as comma
];

# ---------------------------------------------------------------------
echo >>> define characters
define ALPHA	ANY - [ QUOTE | BOUND | SINGLE | SPACE ];

# ---------------------------------------------------------------------
echo >>> define special tokens
define SPEC [
  %, (TS) %,		# \u002C	# COMMA
| %‚ (TS) %‚		# \u201A 	# SINGLE LOW-9 QUOTATION MARK
| %' (TS) %'		# \u0027	# APOSTROPHE
| %` (TS) %` 		# \u0060	# GRAVE ACCENT
| %‘ (TS) %‘		# \u2018	# LEFT SINGLE QUOTATION MARK
| %’ (TS) %’ 		# \u2019	# RIGHT SINGLE QUOTATION MARK
| %´ (TS) %´ 		# \u00B4	# ACUTE ACCENT
| %. [ (TS) %. ]+	# \u002E	# FULL STOP
| %- [ (TS) %- ]+	# \u002D	# HYPHEN-MINUS
];


define SYMBOL	ANY - SPACE ;

define BOUND	QUOTE | RIGHT ;


regex
[
INPUT

# insert token separator before SPACES
.o.	[..] -> TS || SYMBOL _ SPACE 

# insert token separator at end of file
.o.	[..] -> TS || SYMBOL _ .#.	

# insert token separator around single symbols
.o.	[..] -> TS ||	SYMBOL _ [ SINGLE | SPEC ]
.o.	[..] -> TS ||   [ SINGLE | SPEC ] _ SYMBOL

# insert token separator before boundaries
.o.	[..] ->	TS ||	SYMBOL _ BOUND [ QUOTE | SPACE | TS ]

# insert token separator after boundaries
.o.	[..] ->	TS ||	[ QUOTE | SPACE | TS | .#. ] QUOTE _ SYMBOL

# remove token separator in special symbols
.o.	SPEC @-> LFT ... RGT 
.o.	TS -> 0 || LFT [ANY1|TS]* _ [ANY1|TS]* RGT
.o.	[LFT|RGT] -> 0

];

echo >>> eliminate auxiliary symbols
substitute symbol ? for "<*"
substitute symbol ? for "*>"

define TOK



define BD	[ SPACE | TS | .#. ] ;



# =============================================================
echo >>> remove token boundary before/after some quotes

define Digit	[ %0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ];
define YEAR     [ Digit Digit ];

read regex
[
  TOK 
.o. [ TS -> 0 || BD QUOTE _ [ s | YEAR ] BD ]
#.o. [ TS -> 0 || ALPHA _ RQUOTE BD ]


# new 13-Jul-2006 (AS)
# keep slash bewtween digits 
.o.	TS -> 0	|| Digit _ %/ (TS) Digit
.o.	TS -> 0 || Digit %/ _ Digit

];
define TOK


# ----------------------------------------------------------------------
echo >>> remove token boundary in abbreviations

regex	[ ABBR .o. [ %. -> 0 || _ .#. ] ].2 ;
define ABBR

# compound street and place names, eg. Mozartstr. ; Mozart-Str.
define	COMP	[ %- S t r | %- P l | s t r | p l ];

define CTXT	[ COMP | BD ABBR ];

read regex
 TOK 
  .o. [ TS -> 0  || CTXT  _ %.  ]
  .o. [ [..] -> TS || CTXT %. _ %. ] ;
define TOK

# ----------------------------------------------------------------------
echo >>> remove token boundary in quoted compounds
# eg. "XYZ"-Platz

read regex [
	TOK
.o.	TS -> 0 || DQUOTE _ ANY+ (TS) DQUOTE (TS) %- ANY
.o.	TS -> 0 || DQUOTE ANY+ _ DQUOTE (TS) %- ANY
.o.	TS -> 0 || DQUOTE ANY+ DQUOTE _ %- ANY

.o.	TS -> 0 || QUOTE _ ANY+ (TS) QUOTE (TS) %- ANY
.o.	TS -> 0 || QUOTE ANY+ _ QUOTE (TS) %- ANY
.o.	TS -> 0 || QUOTE ANY+ QUOTE _ %- ANY
];

define TOK

# =============================================================
echo >>> additional token boundaries

read regex
[
  TOK 
.o. [ [..] -> TS || SYMBOL _ QUOTE s BD ]
];
define TOK


# =============================================================
echo >>> remove white space:
read regex   TOK .o.  [ [SPACE]+ @-> 0 || [ .#. | TS ] _ ] ;

# =============================================================
echo >>> replace token boundary by new line

substitute symbol "\n" for "*TS*"

# =============================================================
# basic tokenizer

echo >>> invert net
invert net
