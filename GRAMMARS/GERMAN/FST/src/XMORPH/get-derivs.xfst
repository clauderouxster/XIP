# ============================================================================
# TYPE:         (x)fst
# CONTENT:      extract (some) derived word forms from german.fst
#		and create lexc entries
#
# AUTHOR:       A. Schiller
#
# CREATED:      10-Apr-2003
#
# ============================================================================
# USAGE:        xfst -s LEX.fst -l [ThisFile]
# ============================================================================


define LEX

echo >>> identify flag diacritics
read regex LEX ;
single char sigma net
define SIG
read regex SIG .o. [ "@" ?* "@" ] ;
multi char sigma net
define ALLFLAGS

# flags to preserve:
define FSAVE	"@C.un@" 
		| "@U.spell.new@" | "@U.spell.old@" | "@U.spell.err@" ;

define FLAGS	ALLFLAGS - [ FSAVE ] ;

# ----------------------------------------------------------------------------
define SUFF	"^}" ;
define PREF	"^{" ;
define CONV	"^]" ;

define SUFF2	SUFF ?* SUFF ;	# multiple suffixation

define SEP	"\t" ;
define FIN	" ;" ;

# ----------------------------------------------------------------------------
echo >>> exclude compounds, prefixed and elided forms
read regex ~$[ "^#" | "^-" | %+Cpd | %+Elid | PREF ] .o. LEX ;
define LEX
     
# ----------------------------------------------------------------------------
# base forms
define NOM	[ %+Nom | %+NomAccDat | %+NomAccGen | %+NomAccDatGen ] ;
define BASENOUN	$[%+Sg NOM ];
define BASEADJ	$[%+Pos] & ~$[ %+Pl | %+Sg ] ;


set flag-is-epsilon on

# ----------------------------------------------------------------------------
echo >>> extract -ung derivations
# exclude adverbial prefixes : aufeinander+Pref^=stellen+Verb^}ung
# extract base forms (nominative singular)
define UNG 	[
       BASENOUN
.o.    ~$[ %+Pref ] 
.o.    $[ SUFF u n g ] 
.o. LEX
].2 {+Noun+Fem} SEP {Nf_en} ;

# ----------------------------------------------------------------------------
echo >>> extract -bar derivations
# exclude adverbial prefixes : aufeinander+Pref^=stellen+Verb^}bar
# extract base forms (uninflected positive)
define BAR 	[
       BASEADJ
.o.    ~$[ %+Pref | CONV | SUFF2 ] 
.o.    $[ SUFF b a r ] 
.o. LEX
].2 {+Adj} SEP {A_reg} ;

# ----------------------------------------------------------------------------
echo >>> extract -heit/-keit derivations
# exclude un- prefixes 
# exclude (generalized) derivations from past participles
define HEIT [
       BASENOUN
.o.    ~$[ %+Adv | %+Pref | %+PPast ] 
.o.    $[ SUFF [ h | (i g) k ] e i t ]
.o.    LEX
].2 {+Noun+Fem} SEP {Nf_en} ;

# ----------------------------------------------------------------------------
echo >>> extract -isch derivations
# may include un- prefixes 
# extract base forms (uninflected positive)
define ISCH 	[
       BASEADJ
.o.    ~$[ SUFF2 | CONV ]
.o.    $[ SUFF (e [r|s]) i s c h  %+Adj ] 
.o. LEX
].2 {+Adj} SEP {A_reg} ;

# nominalized -isch forms
define LANG	[
    BASENOUN
.o. $[ SUFF (e [r|s]) i s c h %+Noun %+Lang %+Neut ] 
.o. LEX
].2 {+Noun+Lang+Neut} SEP {N_Sgs} ;

# ----------------------------------------------------------------------------
echo >>> extract -er derivations
# exclude numeral -er !

define ADJER  [
       ~$[ SUFF2 | CONV | %+Dig  | %+Num ]
.o.    $[ SUFF e r %+Adj %+Invar ] 
.o. LEX
].2 {+Adj+Invar} SEP {Inv} ;

define NOUNER  [
       BASENOUN
.o.   ~$[ SUFF2 | CONV | %+Dig  | %+Num ]
.o.    $[ SUFF e r %+Noun %+Masc ] 
.o. LEX
].2 {+Noun+Masc} SEP [{N_0n} |  %} i n ];

define NOUNESE  [
       BASENOUN
.o.    ~$[ SUFF2 | CONV ]
.o.    $[ SUFF e s e %+Noun %+Masc ] 
.o. LEX
].2 {+Noun+Masc} SEP [{Nm_Wk} | %} i n ];

# ----------------------------------------------------------------------------
echo >>> union

read regex   [
	UNG 
|	HEIT
| 	BAR	
|	ISCH
|	LANG
|	ADJER
|	NOUNER
|	NOUNESE
] FIN  ;

substitute symbol "^_" for " "

echo >>> eliminate some flag diacritics

set quit-on-fail off
eliminate flag sup
eliminate flag zu
eliminate flag ge 
eliminate flag sep
eliminate flag frm
set quit-on-fail on

set flag-is-epsilon off

define DERIVS

read regex	[
     DERIVS 
.o.  [ FLAGS -> 0 ] 

# eliminate spelling contradictions
.o.  ~$[ "@U.spell.old@" ?* "@U.spell.new@" ]
.o.  ~$[ "@U.spell.new@" ?* "@U.spell.old@" ]

# reduce "double" flags
.o.  "@U.spell.new@" -> 0 ||  "@U.spell.new@" _
.o.  "@U.spell.old@" -> 0 ||  "@U.spell.old@" _
.o.  "@U.spell.err@" -> 0 ||  "@U.spell.err@" _
].l ;

set obey-flags off
