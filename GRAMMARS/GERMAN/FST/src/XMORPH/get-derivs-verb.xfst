# ============================================================================
# TYPE:         (x)fst
# CONTENT:      extract (some) derived word forms from german.fst
#		and create lexc entries
#		- verbal forms only (which may take prefixes)
# AUTHOR:       A. Schiller
#
# CREATED:      10-Apr-2003
# UPDATED:	19-Nov-2003
#
# ============================================================================
# USAGE:        xfst -s LEX.fst -l [ThisFile]
# ============================================================================


define LEX

echo >>> identify flag diacritics
read regex LEX ;
single char sigma net
define SIG
read regex SIG .o. [ "@" ?* "@" ] ;
multi char sigma net
define ALLFLAGS

# flags to preserve:
##	define FSAVE	"@C.un@" 
##			| "@U.spell.new@" | "@U.spell.old@" | "@U.spell.err@" ;

define FSAVE	"@C.un@" 
		| "@U.srf.new@" | "@U.srf.old@" | "@U.srf.err@" 
		| "@U.lem.new@" | "@U.lem.old@" | "@U.lem.err@" ;

define FLAGS	ALLFLAGS - [ FSAVE ] ;

# ----------------------------------------------------------------------------
define SUFF	"^}" ;
define PREF	"^{" ;
define CONV	"^]" ;

define SUFF2	SUFF ?* SUFF ;	# multiple suffixation

define SEP	"\t" ;
define FIN	" ;" ;


# ----------------------------------------------------------------------------
echo >>> exclude compounds, prefixed and elided forms
read regex ~$[ "^#" | "^-" | %+Cpd | %+Elid | PREF ] .o. LEX ;
define LEX
     
# ----------------------------------------------------------------------------
# base forms
define NOM	[ %+Nom | %+NomAccDat | %+NomAccGen | %+NomAccDatGen ] ;
define BASENOUN	$[%+Sg NOM ];
define BASEADJ	$[%+Pos] & ~$[ %+Pl | %+Sg ] ;


set flag-is-epsilon on

# ----------------------------------------------------------------------------
echo >>> extract -ung derivations
# exclude adverbial prefixes : aufeinander+Adv^=stellen+Verb^}ung
# extract base forms (nominative singular)
define UNG 	[
       BASENOUN
.o.    ~$[ [%+Pref|%+Adv] ] 
.o.    $[ SUFF u n g ] 
.o. LEX
].2 "*FLAG*"{+Noun+Fem} SEP {Nf_en} ;

# ----------------------------------------------------------------------------
echo >>> extract -bar derivations
# exclude adverbial prefixes : aufeinander+Adv^=stellen+Verb^}bar
# extract base forms (uninflected positive)
define BAR 	[
       BASEADJ
.o.    ~$[ %+Pref | %+Adv | CONV | SUFF2 ] 
.o.    $[ SUFF b a r ] 
.o. LEX
].2  "*FLAG*" {+Adj} SEP {A_reg} ;

# ----------------------------------------------------------------------------
echo >>> extract -er derivations
# exclude adverbial prefixes : aufeinander+Adv^=spielen+Verb^}erisch
# extract base forms (uninflected positive)

define ERISCH 	[
       BASEADJ
.o.    ~$[ %+Pref | %+Adv | CONV | SUFF2 ] 
.o.    $[ %+Verb SUFF e r i s c h ] 
.o. LEX
].2  "*FLAG*" {+Adj} SEP {A_reg} ;

define ER 	[
       BASENOUN
.o.    ~$[ %+Pref | %+Adv | CONV | SUFF2 ] 
.o.    $[ %+Verb SUFF e r \[e|i] ] 
.o. LEX
].2  "*FLAG*" {+Noun+Masc} SEP [ {N_0n} | %} i n ] ;

define EREI 	[
       BASENOUN
.o.    ~$[ %+Pref | %+Adv | CONV | SUFF2 ] 
.o.    $[ %+Verb SUFF e r e i ] 
.o. LEX
].2  "*FLAG*" {+Noun+Fem} SEP [ {Nf_en} ] ;

# ----------------------------------------------------------------------------
echo >>> union

read regex   [
	UNG 
| 	BAR	
|	ER | ERISCH | EREI
] FIN  ;

# substitute symbol "^_" for " "

echo >>> eliminate some flag diacritics

set quit-on-fail off
eliminate flag sup
eliminate flag zu
eliminate flag ge 
eliminate flag sep
eliminate flag frm
set quit-on-fail on

set flag-is-epsilon off

define DERIVS

read regex	[
     DERIVS 
.o.  [ FLAGS -> 0 ] 

# eliminate spelling contradictions
	.o.  ~$[ "@U.lem.old@" ?* "@U.srf.new@" ]
	.o.  ~$[ "@U.lem.new@" ?* "@U.srf.old@" ]
	.o.  ~$[ "@U.srf.old@" ?* "@U.lem.new@" ]
	.o.  ~$[ "@U.srf.new@" ?* "@U.lem.old@" ]
].l ;



define FLAGVAL  "@U.zu.off@" "@U.ge.off@";
substitute defined FLAGVAL for "*FLAG*" ;

#define FLAGVAL  "@D.un@" "@U.zu.off@" "@U.ge.off@";
#substitute defined FLAGVAL for "*FLAG2*" ;

define DERIV2	   
define OLD	"@U.lem.old@" | "@U.srf.old@" ;
define NEW	"@U.lem.new@" | "@U.srf.new@" ;
define ERR	"@U.lem.err@" | "@U.srf.err@" ;

read regex [ 
	DERIV2 
.o.	[ [..] -> "^*" || s _ s ] 
.o.	[OLD]+ @-> "[old]"
.o.	[NEW]+ @-> "[new]"
.o.	[ERR]+ @-> "[err]"
].2 ;

set obey-flags off
