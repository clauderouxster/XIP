# ============================================================================
# TYPE:		(x)fst
# CONTENT:	morphological guesser
#
# LANGUAGE:	GERMAN
# ENCODING:	UTF-8
#
# AUTHOR:	Anne Schiller
#
# CREATED:	31-Jul-2003
# UPDATED:	19-Jul-2006	
# ============================================================================
# USAGE:	xfst  -l [ThisFile]
# ============================================================================

define Upp1	[A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|Ä|Ö|Ü] ;
define Upp2	[À|Á|Å|Â|Ã|Æ|Ç|Ð|È|É|Ê|Ë|Î|Ï|Ì|Í|Ñ|Ó|Ò|Ô|Õ|Ù|Ú|Û|Ý] ;
define Upp	[ Upp1 | Upp2 ];

define Low1	[a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|ä|ö|ü|ß] ;
define Low2	[à|á|â|ã|å|æ|ç|è|é|ê|ë|í|î|ï|ì|ñ|ó|ô|ð|ò|õ|ù|ú|û|ý|ÿ] ;
define Low	[ Low1 | Low2 ] ;

define Letter	[ Upp | Low ] ;

define Dig	[%0|1|2|3|4|5|6|7|8|9] ;
define DigRom	[I|V|X|L|C|D|M|i|v|x|l|c|d|m] ;
define Sym	[%#|%$|%%|%&|%÷|%@|%~|%£|%§|%µ|%^|%×|%Ø|%Þ|%ø|%þ|%·|%¤|%_] ;
define Math	[%*|%=|%+] ; 

define Punct	[%.|%,|%;|%:|%!|%?|%-|%"|%'|%`|%||%/|%\|%¦] ;
define Bracket	[%(|%)|%{|%}|%[|%]|%«|%»|%<|%>] ;

define Space	[ %  | %_ ] ;

define Any	[ Letter | Sym | Math | Dig | Punct | Bracket ] ;

define Alpha	[Letter|Sym|Dig|Math|%'|%-] ;

define OptE	[ 0:e | 0:%' ] ;

define CV	"^]":0 ;	# conversion boundary
define DB	"^}":0 ;	# derivation boundary

# -------------------------------------------------------------------------
# Inflectional suffixes
# -------------------------------------------------------------------------
echo >>> regular adjective inflection
define AdjFlex [
  OptE 		%+Masc:0 %+Sg:0 %+Nom:0 %+Wk:0
| OptE 0:r	%+Masc:0 %+Sg:0 %+Nom:0 %+St:0
| OptE 0:m	%+Masc:0 %+Sg:0 %+Dat:0 %+St:0
| OptE 0:n	%+Masc:0 %+Sg:0 %+Dat:0 %+Wk:0
| OptE 0:n	%+Masc:0 %+Sg:0 %+AccGen:0

| OptE 0:s 	%+Neut:0 %+Sg:0 %+NomAcc:0 %+St:0
| OptE  	%+Neut:0 %+Sg:0 %+NomAcc:0 %+Wk:0
| OptE 0:m	%+Neut:0 %+Sg:0 %+Dat:0 %+St:0
| OptE 0:n	%+Neut:0 %+Sg:0 %+Dat:0 %+Wk:0
| OptE 0:n	%+Neut:0 %+Sg:0 %+Gen:0

| OptE		%+Fem:0 %+Sg:0 %+NomAcc:0
| OptE 0:r	%+Fem:0 %+Sg:0 %+DatGen:0 %+St:0
| OptE 0:n	%+Fem:0 %+Sg:0 %+DatGen:0 %+Wk:0

| OptE		%+MFN:0 %+Pl:0 %+NomAcc:0 %+St:0
| OptE 0:r	%+MFN:0 %+Pl:0 %+Gen:0 %+St:0
| OptE 0:n	%+MFN:0 %+Pl:0 %+NomAccGen:0 %+Wk:0
| OptE 0:n	%+MFN:0 %+Pl:0 %+Dat:0 
];
  
define AdjPred	%+Pred:0 ;

define AdjFlexPred	[ AdjFlex | AdjPred ];

# ----------------------------------------------------------------------
echo >>> adjective degree and inflection
define AdjReg [
  			%+Adj:0 %+Pos:0		AdjFlexPred
| 0:e 0:r		%+Adj:0 %+Comp:0	AdjFlexPred
| (0:e) 0:s 0:t		%+Adj:0 %+Sup:0		AdjFlexPred
| (0:e) 0:s 0:t 0:e 0:n	%+Adj:0 %+Sup2:0 %+Pred:0	
];

define AdjPos	[ %+Adj:0 %+Pos:0		AdjFlexPred ] ;	

define NAdjReg	[
  		%+Noun:0 %+NAdj:0	AdjFlex
| 0:e 0:r	%+Noun:0 %+NAdj:0	AdjFlex
| (0:e) 0:s 0:t	%+Noun:0 %+NAdj:0	AdjFlex	
];

define AdjInvar 	[ %+Adj:0 %+Invar:0 ] ;
 
# -------------------------------------------------------------------------
echo >>> verb inflection
define VFlexReg [
  (OptE)		%+Verb:0 %+Imp:0 %+2P:0 %+Sg:0	|
  (0:e) 0:t		%+Verb:0 %+Imp:0 %+2P:0 %+Pl:0	|
  0:e			%+Verb:0 %+IndcSubj:0 %+1P:0 %+Sg:0 %+Pres:0	|
  (0:e) 0:s 0:t		%+Verb:0 %+Indc:0 %+2P:0 %+Sg:0 %+Pres:0	|
  0:e 0:s 0:t		%+Verb:0 %+Subj:0 %+2P:0 %+Sg:0 %+Pres:0	|
  (0:e) 0:t		%+Verb:0 %+Indc:0 %+3P:0 %+Sg:0 %+Pres:0	|
  0:e			%+Verb:0 %+Subj:0 %+3P:0 %+Sg:0 %+Pres:0	|
  OptE 0:n		%+Verb:0 %+IndcSubj:0 %+1P3P:0 %+Pl:0 %+Pres:0	|
  (0:e)	0:t		%+Verb:0 %+Indc:0 %+2P:0 %+Pl:0 %+Pres:0	|
  0:e 0:t		%+Verb:0 %+Subj:0 %+2P:0 %+Pl:0 %+Pres:0	|

  (0:e) 0:t 0:e 	%+Verb:0 %+IndcSubj:0 %+1P:0 %+Sg:0 %+Past:0	|
  (0:e) 0:t 0:e 0:s 0:t	%+Verb:0 %+IndcSubj:0 %+2P:0 %+Sg:0 %+Past:0	|
  (0:e) 0:t 0:e 	%+Verb:0 %+IndcSubj:0 %+3P:0 %+Sg:0 %+Past:0	|
  (0:e) 0:t 0:e 0:n	%+Verb:0 %+IndcSubj:0 %+1P:0 %+Pl:0 %+Past:0	|
  (0:e) 0:t 0:e 0:t	%+Verb:0 %+IndcSubj:0 %+2P:0 %+Pl:0 %+Past:0	|
  (0:e) 0:t 0:e 0:n	%+Verb:0 %+IndcSubj:0 %+3P:0 %+Pl:0 %+Past:0	|

  OptE 0:n		%+Verb:0 %+Inf:0 |
  0:e 0:n 0:d		%+Verb:0 %+PPres:0
];

define VFlexRegDeriv	[
	VFlexReg
|  0:e 0:n 0:d		%+Adj:0 %+PPres:0 %+Pos:0 AdjFlexPred
];


define VFlexZu [ 
  OptE 0:n		%+Verb:0 %+Izu:0 |
  OptE 0:n 0:d		%+Verb:0 %+PPrzu:0
];

define VFlexZuDeriv [ 
  0:e 0:n		%+Verb:0 %+Izu:0 |
  0:e 0:n 0:d		%+Verb:0 %+PPrzu:0 
  0:e 0:n 0:d		%+Adj:0 %+PPrzu:0 %+Pos:0  AdjFlexPred
];

define VPPast [ 
 0:t		%+Verb:0 %+PPast:0
];

define VPPastDeriv [
	VPPast
| 0:t		%+Verb:0 %+PPast:0 %+Pos:0 AdjFlexPred
];

# ------------------------------------------------------------------------
echo >>> nouns and proper names
define NounFemReg [
 		%+Noun:0 %+Fem:0 %+Sg:0 %+NomAccDatGen:0 |
 0:e 0:n	%+Noun:0 %+Fem:0 %+Pl:0 %+NomAccDatGen:0 
];

define NounFemRegE [
 		%+Noun:0 %+Fem:0 %+Sg:0 %+NomAccDatGen:0 |
0:n		%+Noun:0 %+Fem:0 %+Pl:0  %+NomAccDatGen:0 
];

define NAdjEr [
		%+Adj:0 %+Invar:0 %+Upp:0			# Berliner
|		%+Noun:0 %+Masc:0 %+Sg:0 %+NomAccDat:0		# (ein) Berliner
| 0:s		%+Noun:0 %+Masc:0 %+Sg:0 %+Gen:0		# (des) Berliners
|		%+Noun:0 %+Masc:0 %+Pl:0 %+NomAccGen:0		# (die) Berliner
| 0:n		%+Noun:0 %+Masc:0 %+Pl:0 %+Dat:0		# (den) Berlinern

| DB [i|I] n	%+Noun:0 %+Fem:0 %+Sg:0 %+NomAccDatGen:0
| DB [i|I] n 0:{nen}	%+Noun:0 %+Fem:0 %+Pl:0 %+NomAccDatGen:0 
];

define PropTown [
		%+Prop:0 %+Town:0 %+Neut:0 %+Sg:0 %+NomAccDat:0 |
 0:s		%+Prop:0 %+Town:0 %+Neut:0 %+Sg:0 %+Gen:0
];

define PropTownEr [
       PropTown 
|      %+Prop:0 %+Town:0 %+Neut:0 DB e r NAdjEr
];

define PropTownEn [
       {en}   PropTown 
|      {en}:0 %+Prop:0 %+Town:0 %+Neut:0 DB e r NAdjEr
];


# -------------------------------------------------------------------------
# Derivational suffixes
# -------------------------------------------------------------------------
define PROPS	Upp Low+ [
       [ {bach} | {berg} | {burg} | {dorf} | {haus}
       | {heim} | {hof} | {ing} | {stadt} 
       ] PropTownEr 
|      [ {haus} | {ing} ] PropTownEn
] ;

define NOUNS	Upp Low+ [
       [ {ung} | {heit} | {keit} | {tät} | {ion} | {schaft} 
       ] NounFemReg
|      [ {graphie} | {grafie} | {logie} | {metrie} 
       | {pathie} ] NounFemRegE
];


define ADJ1	Low+ [
         [Low - e ] [ {isch} | {ig} ]
       | {lich} | {bar} | {los} | {gemäß} | {weis} e:0
       ];

define ADJS	[
       (Dig+) ADJ1	AdjReg
|      (Dig+) Upp ADJ1	NAdjReg
];

define ADVS	Low+ [
       [ {mal} | {ens} ] %+Adv:0 
];

define VERBS	Low+ [
  {ier} {en}:0 [ VFlexRegDeriv | VPPastDeriv ]
| Low+ {zu} Low+ {ier} {en}:0 VFlexZuDeriv 
];


define TRUNC	      [Any]+ [%-|%/] ;
  
# ===============================================================
echo >>> derivational guesses

define DERIV [
  PROPS
| NOUNS
| ADJS
| ADVS
| VERBS    
| TRUNC %+Pref:0 %+Cpd:0
];

# ===============================================================
echo >>> inflectional guesses


#define PropInvar [ %+Prop:0 %+MFN:0 %+Sg:0 %+NomAccDatGen:0 ] ;
#define NounInvar [ %+Noun:0 %+MFN:0 %+Sg:0 %+NomAccDatGen:0 ] ;
#define NounInvarPl [ %+Noun:0 %+MFN:0 %+Pl:0 %+NomAccDatGen:0 ] ;

define PropInvar	[ %+Prop:0 %+MFN:0 %+SgPl:0 %+NomAccDatGen:0 ] ;
define NounInvar	[ %+Noun:0 %+MFN:0 %+SgPl:0 %+NomAccDatGen:0 ] ;
define NounInvarSg	[ %+Noun:0 %+MFN:0 %+Sg:0 %+NomAccDatGen:0 ] ;
define NounInvarPl	[ %+Noun:0 %+MFN:0 %+Pl:0 %+NomAccDatGen:0 ] ;

define INFL	      (TRUNC) [
  [Upp %.]+				PropInvar	
| [Letter|%']* Upp [Letter|%']+ (%.)	PropInvar
|  Upp Low+ [ %- Upp Low+ ]* 		PropInvar
  
| Upp Low+  (%.)			NounInvar	
| Upp Low* [Low - [s|z|x|ß]] 0:s	NounInvarPl
#| Low+					[AdjReg|AdjInvar]
| Low+					AdjInvar
| Upp Low+ DB e r			NAdjEr


| [[Low]+ %. (Space)]+		%+Adv:0
| Low+				%+Adv:0

| Low+ e:0 n:0			VFlexReg
| Low+ 0:{zu} Low+ e:0 n:0		VFlexZu
| Low* 0:{ge} Low+ e:0 n:0		VPPast
| Low* 0:{ge} Low+ e:0 n:0		VPPast
] ;


define NAME [
  Upp Low+ [ %- Upp Low+ ]* %+Prop:0 
	[ %+First:0 [%+Masc|%+Fem]:0 %+Sg %+NomAccDatGen:0 
	| %+Last:0 %+Sg:0 %+NomAccDatGen:0 
	]
];


# -----------------------------------------------------------------
echo >>> special tokens
define NUM1	([Math|Punct]) Dig+ [ Math | Punct | Dig ]+ ;
define NUM2	[Dig|Letter|Math|Punct]+ & $[Dig] & $[Letter] ;

define STRING	[Letter|Dig|%_|%-|%.|%&|%?|%=|%_|%+|%%]+ ;
define EMAIL	({mailto:}) STRING "@" STRING ;
define URL	([{file} | {ftp} | {http} (s)] %: %/) %/ STRING [%/ STRING]* ;

define SPEC  [
  %< [Any|% |%	]* %>		%+Symbol:0 %+Sgml:0
| [Sym]+			%+Symbol:0
| [Math|Punct]+			%+Symbol:0 %+Math:0
| NUM1 (%%)			%+Dig:0 %+Dec:0 %+Card:0
| NUM2				%+Symbol:0
| [%`|%'] Dig Dig 		%+Expr:0 %+Date:0
| EMAIL				%+Symbol:0 %+Email:0
| URL				%+Symbol:0 %+Url:0
];

echo >>> a few foreign words
define FOREIGN  [
  {of} | {the} | {and} | {no} (t) 
| {de} (s) | {la} (s) | {le} (s)

] %+Foreign:0 ;

echo >>>> combine
read regex [ [ [DERIV|FOREIGN] .p. [INFL|SPEC] ] ];

optimize net
