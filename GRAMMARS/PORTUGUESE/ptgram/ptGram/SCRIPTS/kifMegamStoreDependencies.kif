// file that contains the functions related to dependency storing and retrival for megam entry generation

map myDependencies;

/////////////////////////////////////////////
// dependency functions
/////////////////////////////////////////////

function buildKey(node n){
	return(n.number());
}

//Your KiF rule to store your dependencies
function storeDependency(dependency d,node n) {
	string key=buildKey(n); //or whatever key you want...
	
	//print("Storing: ",key,_endl);
	
	//a node can be associated with more than one dependencies, so we keep a vector of them
	if (myDependencies.test(key)) //it is already stored in our map
		myDependencies[key].push(d); //we push it...
	else
		myDependencies[key]=[d];
}

function getDependencies(node n) {
	string key=buildKey(n);
	
	if (myDependencies.test(key)==false)
		return(null);
	else
		return(myDependencies[key]);
}

function getDependency(node n, string depName) {
	string key=buildKey(n);

	vector returnDeps;
	
	if (myDependencies.test(key)==false)
		return(null);
	else {
		vector deps=myDependencies[key];
		dependency d;
		for(d in deps){
			if(d.name()==depName){
				returnDeps.push(d);
			}
		}
		return(returnDeps);
	}
}

//Cleaning the dependency map... It should be done at the very end of your process for a given sentence...
function cleanDependencies() {
	myDependencies.clear();
} 