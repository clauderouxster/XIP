//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! L2F - Spoken Language Systems Laboratory / INESC-ID Lisboa                 !
//!                                                                            !
//! Copyright (c) 2006 INESC-ID Lisboa.  All Rights Reserved.                  !
//!                                                                            !
//! --- CONTENTS ---                                                           !
//!   Project    : Portuguese XIP grammar                                      !
//!   filename   : LGLast.xip                                                  !
//!   Date       : 2008/January                                                !
//!   Author     : CARoline Hagege, Nuno Mamede                                !
//!                                                                            !
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!                                                                            !
//!  Default Proper Name Rules (used after the geografival and proper names)   !
//!                                                                            !
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// $Id: LGLast.xip,v 1.2 2008/10/21 15:20:03 chagege Exp $



////////////////////////////////////////////////////////////////////////////////
// Proper names
////////////////////////////////////////////////////////////////////////////////


Sequence:






// Grouping parts of 
// CH - Regra que compensa a retirada do alisamento
// Os tracos de tipificacao da EN sobem para o nome da parte esquerda
// Do not use feature inheritance in order to keep track properly of embedded NE

////////////////////////////
// PEOPLE
////////////////////////////

// papa Clemente VII
1> NOUN[proper=+,maj=+,mwe=+,people=+]              @= noun[title,start_people], ?+[end_people], num[dig,rom] .

1> NOUN[proper=+,maj=+,mwe=+,people=+,individual=+] @= noun[start_people,cargo,indgroup:~], ?*[end_people], ?[end_people,cargo:~] .

// CARGO
1> noun[proper=+,maj=+,mwe=+,people=+,cargo=+]	 @= noun[start_people,cargo], prep[lemma:de], (art[def]), noun[start_org], (noun;prep;art)*, noun[end_org] .
1> NOUN[proper=+,maj=+,mwe=+,people=+,cargo=+]      @= noun[start_people,postpeople], (noun;prep;art)*, noun[end_people] .
1> NOUN[proper=+,maj=+,mwe=+,people=+,cargo=+]      @= noun[start_people,cargo], (noun;prep;art)*, noun[end_people] .
1> NOUN[proper=+,maj=+,mwe=+,people=+,individual=+] @= noun[start_people,individual], (noun;prep;art)*, noun[end_people] .
1> NOUN[proper=+,maj=+,mwe=+,people=+,member=+]     @= noun[start_people,member], (noun;prep;art)*, noun[end_people] .
1> NOUN[proper=+,maj=+,mwe=+,people=+]              @= noun[start_people,member:~,individual:~,postpeople:~], (noun;prep;art)*, noun[end_people] .



// John (Jack) Reagan
1> noun[proper=+,maj=+,mwe=+,people=+,individual=+] @= noun[maj:+,people:+,individual:+], punct[paren,left], ?+[maj:+], punct[paren,right], noun[people:+,proper:+] .

// Rainha da Suecia Isabel
1> NOUN[proper=+,maj=+,mwe=+,people=+,individual=+]              @= noun[title,mwe], ?[people,individual] .


////////////////////////////
// TELEPHONE NUMBERS
////////////////////////////
1> NOUN[proper=+,maj=+,mwe=+] @= num[start_loc,!features:!], num*[end_loc] .



////////////////////////////
// ORGANIZATIONS
////////////////////////////
1> NOUN[proper=+,maj=+,mwe=+,org=+,administration=+] @= noun[start_org,administration], (art; ?[end_org]; prep[lemma:de])*, ?[end_org]; noun[people,proper].
1> NOUN[proper=+,maj=+,mwe=+,org=+,institution=+,university=+] @= noun[start_org,university], (art; ?[end_org]; prep[lemma:de])*, ?[end_org].
1> NOUN[proper=+,maj=+,mwe=+,org=+,institution=+,school=+] @= noun[start_org,institution,school], (art; ?[end_org]; prep[lemma:de])*, ?[end_org].

// Escola <NE>Padre Antonio Vieira</NE>
1> NOUN[proper=+,maj=+,mwe=+,org=+,institution=+,school=+] @= noun[start_org,institution,school], (prep), (art), noun[proper,mwe:+] .
1> NOUN[proper=+,maj=+,mwe=+,org=+,institution=+] @= noun[start_org,institution], (art; ?[end_org]; prep[lemma:de])*, ?[end_org].
1> NOUN[proper=+,maj=+,mwe=+,org=+,company=+] @= noun[start_org,company], (art; ?[end_org]; prep[lemma:de])*, ?[end_org].
1> NOUN[proper=+,maj=+,mwe=+,org=+] @= noun[start_org], (art; ?[end_org]; prep[lemma:de])*, ?[end_org].

// Governo Socrates
1> NOUN[proper=+,maj=+,mwe=+,org=+,administration=+] @= noun[administration], ?[maj:+] .

////////////////////////////
// LOCATIONS
////////////////////////////
1> noun[proper=+,maj=+,mwe=+,city=+,admin_area=+,local=+]   @= noun[start_loc,city], (?[maj];prep[lemma:de];art)*, ?[maj, end_loc] .
1> noun[proper=+,maj=+,mwe=+,admin_area=+,country=+] @= noun[start_loc,country], (?[maj];prep[lemma:de];art)*, noun[maj, end_loc] .
1> noun[proper=+,maj=+,mwe=+,admin_area=+]           @= ?[start_loc,admin_area], (?[maj];prep[lemma:de];art)*, noun[maj, end_loc] .

////////////////////////////
// EVENTS
////////////////////////////
1> NOUN[proper=+,maj=+,mwe=+] @= noun[start_event,!features:!], (art;prep;?[end_event])+.


////////////////////////////
// NUMBERS
////////////////////////////
1> NOUN[quant=+, classific=+] @= ?[quant,classific].




////////////////////////////
// CULTURE
////////////////////////////
// to add when reformulate LGCulture.xip
1> NOUN[proper=+,maj=+,mwe=+,culture=+,inquote=+] @= ?[start_culture,inquote:+], ?*, ?[end_culture] .
1> NOUN[proper=+,maj=+,culture=+,inquote=+] @= ?[start_culture,inquote:+], ?[end_culture:~] .




////////////////////////////
// Names with initials in them
// American style...
////////////////////////////
2> noun[proper=+,people=+,individual=+,mwe=+] @= (noun[maj:+,people:+]), noun[initial], (noun[initial]), noun[maj:+,people:+] .

////////////////////////////
// Treating guessed nouns
////////////////////////////

// recognized first name preceeded by recognized combination of two lastnames (one of them can be unknown)
// Saulo Ferreira Feitosa
2> noun[proper=+,people=+,individual=+,mwe=+] @= ?[firstname:+, local:~,maj],  (prep[lemma:de]), (art[def]), noun[maj:+,lastname:+], ?[maj:+] | ?[maj:~] | .

// guessed last name preceeded by recognized first name (with optional second firstname)
2> noun[proper=+,people=+,individual=+,mwe=+] @= noun[firstname:+, local:~], (noun[firstname]), (prep[lemma:de]), (art[def]), ?[maj:+,src:guess] | ?[maj:~] | .



// guessed noun with upper case followed by lastname.
2> noun[proper=+,people=+,individual=+,mwe=+] @= noun+[maj:+,src:guess], noun[maj:+,lastname:+] .

// recognized first name followed only by a noun in upper case.
// Nelson Mandela
//2> noun[proper=+,people=+,individual=+,mwe=+] @= noun[firstname:+, local:~], ?[maj:+] | ?[maj:~] | .

// if cargo followed by de + unknown upper case letter then put all together
// presidente da camara de Rouen
2> noun[people=+,postpeople=+,mwe=+,proper=+] @= noun[postpeople:+], prep[lemma:de], noun[proper:+,maj:+,src:~lex] .

IDrules:

// Very general rules that catch proper nouns without typing them.
// feature untyped is added when the rule is too much general and no type can be infered

// Example: Lula da Silva
// restriction added to avoid to take "Veio do Porto" as a proper noun....

3> NOUN[proper=+,maj=+,mwe=+,untyped=+] -> noun[maj,start:~,first,verb:~,refl:~,org:~,local:~,people:~], prep[lemma:de], (art[lemma:o]), adj*[maj], noun*[maj], noun[maj,last].


// Example: Manuel Maria Carrilho
// Restriction to avoid to take as a firstname words that are starting the sentence with an upper case and which are not part of EN.
// e.g. Se Ferreira soubesse....
3> NOUN[proper=+,maj=+,mwe=+,untyped=+] -> noun[maj,first,refl:~], adj*[maj], noun*[maj], noun[maj,last].

4> NOUN[proper=+,maj=+,mwe=+,untyped=+] -> noun[proper,first,verb:~], prep[lemma:de], (art[lemma:o]), adj*[maj], noun*[maj], adj[maj,last].
4> NOUN[proper=+,maj=+,mwe=+,untyped] -> noun[proper,first,verb:~], adj[maj,last].

// University of Florida
5> NOUN[proper=+,maj=+,mwe=+,untyped] -> ?[maj,first], foreign*, ?[maj,last].

Sequence: 

// Complex untyped proper noun, followed by comma, followed by digit (one or two) followed by comma, is a person name.
// e.g Maisdrz Yzers, 37, enviou seu pai.
6> ? @= noun[proper:+,untyped:+,individual=+,people=+], punct[comma], num[dig,lemma:"(%d)%d"], punct[comma] .

// Complex untyped noun when the first element is acron, institution, then the whole is institution.
6> ? @= noun[proper:+,untyped:+,org=+,institution=+, lemma:"ONG %+"] .

// Complex untyped noun when the first element is "Instituto", then the whole is org, institution.
6> ? @= noun[proper:+,untyped:+,org=+,institution=+, lemma:"instituto %+"] .

// Complex untyped proper noun when the fist element is "Frente"
6> ? @= noun[proper:+,untyped:+,org=+,institution=+, lemma:"Frente %+"] .






Reshuffling:
// FLatens the proper nouns that were built in two steps
//
// Example: Tribunal Superior Eleitoral
8> NOUN{NOUN[proper]{?-#1},adj#2[proper]} = NOUN[proper=+]{#1,#2}.


// Correcting specific cases like S. Pedro do Estoril which are taken as a person name and are in fact location
// if a person name is made by "Sao" followed by firstname followed by prep (det) and local then, it is a local
8> noun#1[individual,proper]{#2[lemma:são], #3[firstname], #4[prep], #5[art], #6[location]} = noun[individual=~,location=+,admin_area=+]{#2,#3,#4,#5,#6} .

// S. Pedro de Atacama, S. Martinho do Porto etc.
8> noun#1[individual,proper]{#2[lemma:são], #3[firstname], #4[prep], #6[location]} = noun[individual=~,location=+,admin_area=+]{#2,#3,#4,#6} .



// Apaguei as regras de alisamento. Ver porque no ficheiro notes.txt
// ponto 1



// CH Nov 2007 - Problema acontece com estas regras
// Perde-se alguns tracos
// e.g O rio Ttoto - os tracos water e geographic que estao acrescentados em Toto atraves de LOLocation
// sao perdidos pois sao acrescentados no noun[location] da LHS da regra. 
// Para poder recuperar os tracos todos convinha ou discriminar todas as possibilidades (water, etc.)
// Ou entao fazer de outra forma.
// Removes NOUN nodes that only contain a singleton noun node
//
15> noun[time,date] {noun#1[first,last,time=+,date=+]}  = #1.
15> noun[date]      {noun#1[first,last,date=+]}         = #1.
15> noun[time]      {noun#1[first,last,time=+]}         = #1.
//11> noun[people]    {noun#1[first,last,people=+]}       = #1.
//2> noun[people]   {adj#1[first,last,people=+]}        = #1. // O tio avô da Carolina ???passar a noun???
//11> noun[org]       {noun#1[first,last,org=+]}          = #1.
15> noun[title]     {noun#1[first,last,title=+]}        = #1.
//11> noun[location]  {noun#1[first,last,location=+]}     = #1.
15> noun[meas]      {noun#1[first,last,meas=+]}         = #1.
//11> noun[relative]  {noun#1[first,last,relative=+]}     = #1.






// Rules for coordination of Named Entities
// They have to be at the end because of methonymy
// (e.g. ALL specific local grammars for entities have to apply before)

Sequence: 







///////////////////////////////////////////// HIGHER LEVEL NE
///////////////////////////////////////////// TO BE HAREM COMPLIANT (can be commented for other kinds of applications)
//
// 


// Presidente da Academia da Marinha
// CARGO DE INSTITUTION GIVES CARGO
18> noun[mwe=+,cargo=+,people=+,proper=+] @= noun[mwe:+,cargo:+], prep, (art[def]), noun[org] .


// EG ministro(s) dos Negocios Estrangeiros do Governo Socrates
18> noun[mwe=+,cargo=+,people=+,proper=+] @= noun[mwe:+,cargo:+], prep, (art), noun[org:+] .
18> noun[mwe=+,postgroup=+,people=+,proper=+] @= noun[mwe:+,postgroup:+], prep, (art), noun[org:+] .

// e.g Ministro(s) dos Negocios Estrangeiros de Portugal
18> noun[mwe=+,cargo=+,people=+,proper=+] @= noun[mwe:+,cargo:+], prep, (art), noun[location:+] .
18> noun[mwe=+,postgroup=+,people=+,proper=+] @= noun[mwe:+,postgroup:+], prep, (art), noun[location:+] .


// Title+Cargo (with definite article inbetween)
// e.g. Sua Excelencia o Primeiro-Ministro
19> noun[mwe=+,cargo=+,people=+,proper=+] @= ?[title], art[def,sg], ?[cargo:+];?[postpeople] .

// Title+Individual (preceeded by cargo)
// Sua Santidade o Papa Bento XVI
// Check that title contains "Sua *" in order to avoid side effects
19> noun[mwe=+,people=+,proper=+] @= ?[title,mwe,surface:"Sua %+"], art[def,sg], noun[proper,people,mwe=+] .

// any complex proper noun followed by on-line
// CHECK if not problems
19> noun[mwe=+,location=+,virtual=+,site=+,proper=+] @= noun[proper,mwe], ?[lemma:on-line] . 

// a date which is preceeded by a noun bearing feature introd_street:+ has not to be considered as date
19> noun[mwe=+,location=+,admin_area=+,street=+] @= noun[introd_street], noun[date] .


// combination of cargo+org
// e.g presidente da UE
19> noun[mwe=+,people=+,cargo=+] = ?[cargo], prep[lemma:de], art[def], ?[org].

// combination of cargo + maj word, marked previsouly
// Conselheira da Atina
19> noun[mwe=+,people=+,cargo=+] @= ?[cargo, start_people,maj], (prep[lemma:de];?[maj];art)*, ?[end_people:+,maj].

// Combination EVENT, ORGANIZED + de + date gives EVENT ORGANIZED
// a Exposicao Mundial de 2005
19> noun[mwe=+,event=+,organized=+] @= ?[noun,event,organized], prep[lemma:de], num[lemma:"19%d%d"];num[lemma:"20%d%d"] .
19> noun[mwe=+,event=+,organized=+] @= ?[noun,event,organized], num[lemma:"%d%d"] .

// conjunção + disjunção

// organization
20> ? @= noun[proper,org], ?[lemma:e];?[lemma:ou], noun[proper, toutmaj:~,org:~,org=+] . 

// people
// Maria Ferreira e Lula da Silva
20> ? @= noun[proper,people], ?[lemma:e];?[lemma:ou], noun[proper, toutmaj:~,people:~,people=+] . 



// Acronyms following a named entity
// CH changed
// eg "Universidade de Tras-os-Montos e Alto Douro (UTAD) We want to type UTAD as an organization too
25> ? @= noun[org], punct[paren,left], ?[toutmaj:+,org=+,institution=+,acron=+], punct[paren,right] .
// same rule for companies
25> ? @= noun[company], punct[paren,left], ?[toutmaj:+,org=+,company=+,acron=+], punct[paren,right] .


// If an acronym is recognized but not the complex NP on its left, then the left NP is marked as the acronym
// e.g. International Business Machines (IBM)
27> ? = noun[proper,mwe,untyped,company=+,org=+], punct[paren,left], noun[company:+,src:~guess], punct[paren,right] .

// Acronym comes first and then the organization name in parenthesis
// e.g. OMS (Organizacao Mundial da Saude)
27> ? = noun[src:guess,maj:+,org=+,administration=+], punct[paren,left], noun[institution:+];noun[administration:+], punct[paren,right] .
27> ? = noun[src:guess,maj:+,org=+,institution=+], punct[paren,left], noun[institution:+];noun[institution:+], punct[paren,right] .
27> ? = noun[src:guess,maj:+,org=+,company=+], punct[paren,left], noun[company:+], punct[paren,right] .

// CH added
// Default rule for proper nouns that have not been typed before e.g. a actual Distrital.

Tagging:
30>  adj[maj:+,lemma:~natal,noun:~] %= | ?[maj:~] |  noun[proper=+,maj=+] | ?[maj:~] | .
