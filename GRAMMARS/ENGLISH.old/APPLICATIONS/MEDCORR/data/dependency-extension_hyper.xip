DependencyRules:

// extension

| np#3{?*,#1[last]} |
if ( ^SEGMENT(#1,#2) )
   SEGMENT(#3,#2).

| np#3{ap{?*}, ?*,#2[last]} |
if ( ^SEGMENT(#1,#2) )
   SEGMENT(#1,#3).
   
| pp#3 |
if ( ^SEGMENT(#1,#2) & HEAD(#2,#3) )
   SEGMENT(#1,#3).
   
| np#3{?*,#2[last]} |
if ( ^SEGMENT(#1,#2) )
   SEGMENT(#1,#3).
   
| np#4{?*,#1[last]} |
if ( ^SEGMENT(#1,#2,#3) )
   SEGMENT(#4,#2,#3)

| np#4{ap{?*}, ?*,#3[last]} |
if ( ^SEGMENT(#1,#2,#3) )
   SEGMENT(#1,#2,#4)

| pp#4 |
if ( ^SEGMENT(#1,#2,#3) & HEAD(#3,#4) )
   SEGMENT(#1,#2,#4).

| np#4{?*,#3[last]} |
if ( ^SEGMENT(#1,#2,#3) )
   SEGMENT(#1,#2,#4)

//////////////

//disentangle various distinct kinds of claim
//SEGMENT_INFINITIVE_GOAL(disentangle,of claim)
//IV{to disentangle} NP{AP{various} AP{distinct} kinds} PP{of NP{claim}}
//HEAD(claim,various distinct kinds)
//HEAD(claim,of claim)


| np#4 |
if ( ^SEGMENT(#1,#2) & HEAD(#3,#2) & PREPD(#3,?[lemme:of]) & HEAD(#3,#4) )
   SEGMENT(#1,#4).

| np#4 |
if ( ^SEGMENT(#5,#1,#2) & HEAD(#3,#2) & PREPD(#3,?[lemme:of]) & HEAD(#3,#4) )
   SEGMENT(#5,#1,#4).


////////////////

| np#1, pp#2{?[lemme:of], np{?*,?[last]}} |
if ( ^SEGMENT(#3,#1) )
   SEGMENT(#3,#1,#2).

| np#1, pp#2{?[lemme:of], np{?*,?[last]}} |
if ( ^SEGMENT(#4,#3,#1) )
   SEGMENT(#4,#3,#1,#2).

| np#3, #4[lemme:of], ap#5, np#6 |
if ( ^SEGMENT(#1,#2,#3) )
   SEGMENT(#1,#2,#3,#4,#5,#6).

| np#3, #4[lemme:of], ap#5, np#6 |
if ( ^SEGMENT(#2,#3) )
   SEGMENT(#2,#3,#4,#5,#6).

| np#1, pp#2 |
if ( ^SEGMENT(#3,#1) & HEAD(4,#2) & PREPD(#4,?[lemme:of]) )
   SEGMENT(#3,#1,#2).

| pp#1, pp#2 |
if ( ^SEGMENT(#3,#1) & HEAD(4,#2) & PREPD(#4,?[lemme:of]) )
   SEGMENT(#3,#1,#2).

| np#1, pp#2 |
if ( ^SEGMENT(#5,#3,#1) & HEAD(4,#2) & PREPD(#4,?[lemme:of]) )
   SEGMENT(#5,#3,#1,#2).

| pp#1, pp#2 |
if ( ^SEGMENT(#5,#3,#1) & HEAD(4,#2) & PREPD(#4,?[lemme:of]) )
   SEGMENT(#5,#3,#1,#2).
