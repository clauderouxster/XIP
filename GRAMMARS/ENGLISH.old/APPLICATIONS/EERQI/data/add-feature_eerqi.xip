//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2009 Xerox Corporation.  All Rights Reserved.
//!
//! --- CONTENTS ---
//!   Project    : English XIP grammar for Pumed abstracts
//!   filename   : add-feature_eerqi.xip
//!   Date       : 2009
//!   Author     : Agnes Sandor
//!  
//!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

DependencyRules:

//Missing dependencies:

// create a dependency between a the negative word and a subject complement

if ( MOD(#1,#2[form:fnot]) & NUCL(#1,#3) )
	MOD[negative=+](#3,#2).

//IV{not primarily to generalize}

| IV{#1[lemme:not], ?*, #2[last]} |
  DEP[negative=+](#2,#1).

| NFV{#1[lemme:not], ?*, #2[last]} |
  DEP[negative=+](#2,#1).

///////////////////



| #1[mental,mentsco=+,mentscopubl=+] |
  ~.

| #1[scope,mentsco=+,mentscopubl=+] |
  ~.

| #1[publ,mentscopubl=+] |
  ~.

//TEMP(research,through a decade)
//HEAD2(decade,through a decade)

if ( TEMP(#2,#3) & HEAD2(#1,#3) )
   DEP(#2,#1).



Script:

//focus group

iftest ( MOD[pre](#1,#2[lemme:focus]) ) { #2[ksw=~,publ=~,mental=~,wmentscopubl=~,know=~,rf=~] ; }

//EMBED_COMPLTHAT(is[transparent=+],indicates)

iftest ( EMBED[complthat](#1[lemme:be],#2[ksw]) & ( $1(#1,#3[ksw,contr:~]) | $1(#3[ksw,contr:~],#1) ) & #2~:#3 ) { #1[transparent=+]; }

iftest ( EMBED[complthat](#1[lemme:be],#2) & ( $1(#1,#3[ksw,contr,mentsco]) | $1(#3[ksw,contr,mentsco],#1) ) & #2~:#3 ) { #1[transparent=+]; }

//EMBED_INFINIT(identify,is[transparent=+])

iftest ( EMBED[infinit](#1[ksw],#2[lemme:be]) ) { #2[transparent=+]; }

// pay[transparent=+] attention
//OBJ_POST(paid,attention)

iftest ( OBJ(#1[lemme:pay],#2[lemme:attention]) ) { #1[transparent=+]; }

//transparent

//MOD_POST_PASTPART(question,posed)
//ARGUMENT(posed,article)

iftest ( $1(#1[ksw,contr:~],#2[transparent]) & $2(#2[transparent],#3[ksw,contr:~]) & #1~:#3 & ~(HEAD(#1,#2) & HEAD(#1,#3)) ) { #2[ksw=+,mental=+] ; }

iftest ( $1(#1[ksw,contr:~],#2[transparent]) & $2(#3[ksw,contr:~],#2[transparent]) & #1~:#3 & ~(HEAD(#1,#2) & HEAD(#1,#3)) ) { #2[ksw=+,mental=+] ; }

iftest ( $1(#1[transparent],#2[ksw,contr:~]) & $2(#1[transparent],#3[ksw,contr:~]) & #1~:#3 & ~(HEAD(#1,#2) & HEAD(#1,#3)) ) { #1[ksw=+,mental=+] ; }

iftest ( $1(#1[transparent],#2[ksw,contr:~]) & $2(#1[ksw,contr:~],#3[transparent]) & #1~:#3 & ~(HEAD(#1,#2) & HEAD(#1,#3)) ) { #1[ksw=+,mental=+] ; }

//////////////////////////////////

iftest ( $1(#1[ksw,contr,mentsco],#2[transparent]) & $2(#2[transparent],#3[ksw,contr,mentsco]) & #1~:#3 & ~(HEAD(#1,#2) & HEAD(#1,#3)) ) { #2[ksw=+,mental=+] ; }

iftest ( $1(#1[ksw,contr,mentsco],#2[transparent]) & $2(#3[ksw,contr,mentsco],#2[transparent]) & #1~:#3 & ~(HEAD(#1,#2) & HEAD(#1,#3)) ) { #2[ksw=+,mental=+] ; }

iftest ( $1(#1[transparent],#2[ksw,contr,mentsco]) & $2(#1[transparent],#3[ksw,contr,mentsco]) & #1~:#3 & ~(HEAD(#1,#2) & HEAD(#1,#3)) ) { #1[ksw=+,mental=+] ; }

iftest ( $1(#1[transparent],#2[ksw,contr,mentsco]) & $2(#1[ksw,contr,mentsco],#3[transparent]) & #1~:#3 & ~(HEAD(#1,#2) & HEAD(#1,#3)) ) { #1[ksw=+,mental=+] ; }



//////////////////////////////////
//no_not

iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[ksw=~] ; }
iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[attitude=~] ; }
iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[surprise=~] ; }
iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[contr=~] ; }
iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[mental=~] ; }
iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[change=~] ; }
iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[wscope=~] ; }

iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[ksw=~] ; }
iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[attitude=~] ; }
iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[surprise=~] ; }
iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[contr=~] ; }
iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[mental=~] ; }
iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[change=~] ; }
iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[wscope=~] ; }

iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[ksw=~] ; }
iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[attitude=~] ; }
iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[surprise=~] ; }
iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[contr=~] ; }
iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[mental=~] ; }
iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[change=~] ; }
iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[wscope=~] ; }


iftest ( MOD[neg](#1[ksw],#2[ksw]) ) { #1[contr=+] ; }

// if "radical" is a noun, it is a term

iftest ( DETD(#1[form_ksw:fradical],#2) ) { #1[ksw=~,change=~,nonot=~] ; }


// open new avenues

iftest ( OBJ[post](#1[p_open],#2[noun:+]) & $1(#2[noun:+],#3[timefact:+]) ) { #2[scope=+]; #2[ksw=+]; }
/
// X challenge is a term

iftest ( MOD[pre](#1[form_ksw:fchallenge],#2[guess]) & ~MOD[pre](#1[form_ksw:fchallenge],#3[importance]) & #2~:#3 ) { #1[contr=~,ksw=~,nohyph=~,nounary=~,noweak=~] ; }

// first/second challenge is a term

iftest ( $1(#1[form_ksw:fchallenge],#2[ord]) & ~MOD[pre](#1[form_ksw:fchallenge],#3[importance]) & #2~:#3 ) { #1[contr=~,ksw=~,nohyph=~,nounary=~,noweak=~] ; }

iftest ( $1(#1[form_ksw:fchallenge],#2[form_ksw:ffirst]) & ~MOD[pre](#1[form_ksw:fchallenge],#3[importance]) & #2~:#3 ) { #1[contr=~,ksw=~,nohyph=~,nounary=~,noweak=~] ; }

iftest ( $1(#1[form_ksw:fchallenge,ksw:~],#2) & $2(#1,#3) ) { #1[contr=~,ksw=~,nohyph=~,nounary=~,noweak=~] ; }

iftest ( $1(#1[form_ksw:fchallenge,ksw:~],#2) & $2(#3,#1) ) { #1[contr=~,ksw=~,nohyph=~,nounary=~,noweak=~] ; }

iftest ( $1(#1,#2[form_ksw:fchallenge,ksw:~]) & $2(#2,#3) ) { #2[contr=~,ksw=~,nohyph=~,nounary=~,noweak=~] ; }

iftest ( $1(#1,#2[form_ksw:fchallenge,ksw:~]) & $2(#3,#2) ) { #2[contr=~,ksw=~,nohyph=~,nounary=~,noweak=~] ; }
\

// rejection has no features if it doesn't have a definite article. In these cases it is a term e.g. "chronic rejection"


iftest ( DETD(#1[form_ksw:frejection],#2[def]) ) { #1[contr=+,ksw=+,wscope=+,noweak=+] ; }

// in contrast

iftest ( PREPD(#1[lemme:contrast],#2[lemme:in]) ) { #1[func=~]; }

// getcontr

iftest ( $1(#1[getcontr],#2[contr,func]) ) { #1[contr=+,ksw=+]; }

iftest ( $1(#1[contr,func],#2[getcontr]) ) { #2[contr=+,ksw=+]; }

// critically evaluated

iftest ( $1(#1[lemme:evaluate],#2[lemme:critically] ) ) { #1[contr=+,ksw=+]; }

iftest ( $1(#1[lemme:critically],#2[lemme:evaluate] ) ) { #2[contr=+,ksw=+]; }

iftest ( $1(#1[lemme:evaluation],#2[lemme:critical] ) ) { #1[contr=+,ksw=+]; }

iftest ( $1(#1[lemme:critical],#2[lemme:evaluation] ) ) { #2[contr=+,ksw=+]; }

// if 2 importance words are syntactic relationship, they get the features bk and attitude

iftest ( $1(#1[importance],#2[importance]) ) { #1[attitude=+,ksw=+]; #2[attitude=+,ksw=+]; }

// if a possibility word is negated, it loses its possibility feature

iftest ( $1(#2,#3[form:fnot]) & NUCL(#2,#4[possibility]) ) { #4[possibility=~,ksw=~,mentscoposs=~]; }


// if a future word is negated, it loses its future feature

iftest ( $1(#1[future],#2[form:fnot]) ) { #1[future=~]; }


// (has not_cont been)_CONTR

iftest ( $1[leftcontr](#1,#2) ) { #1[contr=+,func=+,negative=+]; }

iftest ( $1[rightcontr](#1,#2) ) { #2[contr=+,func=+,negative=+]; }

// when while is at the benning of a sentence, it loses some features; "while studying" is to be excluded

iftest ( $1(#1[form:fwhile,start,maj],#2[vprog:~]) ) { #1[however=~,func=~,wment=~]; } 

iftest ( $1(#1[vprog:~],#2[form:fwhile,start,maj]) ) { #2[however=~,func=~,wment=~]; } 

iftest ( $1(#1[form:fwhile,start,maj],#2[vprog]) ) { #1[ksw=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 

iftest ( $1(#1[vprog],#2[form:fwhile,start,maj]) ) { #2[ksw=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 

iftest ( $1(#1[form:fwhile,contr:~],#2) & $1(#1[form:fwhile],#3) ) { #1[ksw=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 

iftest ( $1(#1[form:fwhile,contr:~],#2) & $1(#3,#1[form:fwhile]) ) { #1[ksw=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 

iftest ( $1(#1,#2[form:fwhile,contr:~]) & $1(#2[form:fwhile],#3) ) { #2[ksw=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 

iftest ( $1(#1,#2[form:fwhile,contr:~]) & $1(#3,#2[form:fwhile]) ) { #2[ksw=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 


// "factor" is a level word only when it is in a DETD or QUANNTD relationship

iftest ( DETD(#1[wdet],#2[det]) ) { #1[level=+]; }

iftest ( QUANTD(#1[wdet],#2) ) { #1[level=+]; }

// scope when in dependency with a contr word

iftest ( $1(#1[contr],#2[wnegscope]) ) { #2[ksw=+,scope=+,mentsco=+,mentscotime=+,mentscoposs=+]; }
iftest ( $1(#1[wnegscope],#2[contr]) ) { #1[ksw=+,scope=+,mentsco=+,mentscotime=+,mentscoposs=+]; }

// mark present perfect as OLD

//iftest ( NUCL(#1,#2[mental]) & NUCL(#3[form:fhave],#1) ) { #2[old=+]; }

iftest ( NUCL(#1,#2[mental]) & NUCL(#3[form:fhave],#1) ) { #1[ksw=+,old=+,timefact=+]; }

// general acceptance: general is  "old" 

iftest ( $1(#1[concept],#2[form_ksw:fgeneral]) ) { #2[old=+]; }

// in "general role" general is not a timefact

iftest ( $1(#1[scope,ksw,specweak,level,weak,nogrow,strong],#2[form_ksw:fgeneral]) ) { #2[timefact=~,ksw=~,form_ksw=~fgeneral]; }


DependencyRules:

| #1[lemme:detail,noun,rf=~,publ=~,mental=~,mentscopubl=~] |
  ~.
/
Script:

iftest ( MOD[post,subcat,infinit:~,sentence:~](#1[rf:~,lemme:~be,verb:~],#2[mentsco]) ) { #1[mentsco=+,mentscopubl=+,rf=+,ksw=+]; }

\

| NP{?*,?[lemme:present,last,deict=~]} |
  ~.

//PP{In NP{this paper}} NP{I} is always CONTRIBUTION

| pp{#1, np{#2[deict,corf=~],#3[publ]}}, np{#4[deict]} |
  ~.

| #1[ksw=~,contr=~,noweak=~] |
if ( MOD(#1[lemme:revolution],#2[lemme:industrial]) )
   ~.

| #2[deict=~] |
if ( OBJ(#1,#2[deict]) )
   ~.
 
//At this point[publ=~]
//DETD(point,this)
//PREPD(point,At)

| #1[lemme:point,publ=~,ksw=~] |
if ( DETD(#1,#2) & PREPD(#1,#3[lemme:at]) )
   ~.

//critical theory
//MOD_PRE(Theory,Critical[contr=~])

| #2[lemme:critical,attitude=~,ksw=~,nonot=~,noweak=~,wscope=~,nohyph=~,nounary=~,importance=~,contr=~,rf=~] |
if ( MOD[pre](#1[lemme:theory],#2) |  MOD[pre](#1[lemme:theorist],#2) |  MOD[pre](#1[lemme:thought],#2) |  MOD[pre](#1[lemme:method],#2) )
   ~.
/
// academic failure
//MOD(academic,failure)

| #1[scope=~,ksw=~,rf=~,noksw=+] |
if ( MOD(#1[domain],#2[contr,mental:~,scope:~] ) )
   ~.
 
| #2[contr=~,ksw=~,nounary=~,rf=~,noksw=+] |
if ( MOD(#1[domain],#2[contr,mental:~,scope:~] ) )
   ~.
 
| #1[scope=~,ksw=~,rf=~,noksw=+] |
if ( MOD(#2[contr,mental:~,scope:~],#1[domain]) )
   ~.
 
| #2[contr=~,ksw=~,nounary=~,rf=~,noksw=+] |
if ( MOD(#2[contr,mental:~,scope:~],#1[domain]) )
   ~.

| #1[ksw=~,contr=~,nounary=~,rf=~,scope=~,noksw=+] |
if ( $1(#2,#1[ksw]) & MOD(#3,#1[noksw]) & #1::#1 )
  ~.

\


// first chapter

//MOD_KSW(first[importance=~],objective)

| #1[lemme:one,importance=~,rf=~,ksw=~] |
if  ( MOD(#1,#2[notfirsttime]) )
    ~.
 
| #1[lemme:first,importance=~,rf=~,ksw=~] |
if  ( MOD(#1,#2[notfirsttime]) )
    ~.

| #1[lemme:one,importance=~,rf=~,ksw=~] |
if  ( QUANTD(#2[notfirsttime],#1) )
    ~.
 
| #1[lemme:first,importance=~,rf=~,ksw=~] |
if  ( QUANTD(#2[notfirsttime],#1) )
    ~.

// open to

| #1[mental=~,ksw=~,contr=~,nonot=~,know=~,nounary=~,noweak=~] |
if ( SUCC(#1[lemme:open],#2[lemme:to]) )
   ~.

| #1[mental=~,ksw=~,contr=~,nonot=~,know=~,nounary=~,noweak=~] |
if ( QUANTD(#1[lemme:open],#2) )
   ~.

// open publication
| #2[mental=~,ksw=~,contr=~,nonot=~,know=~,nounary=~,noweak=~] |
if ( MOD(#1[lemme:publication],#2[lemme:open]) )
   ~.

// open sharing
| #1[mental=~,ksw=~,contr=~,nonot=~,know=~,nounary=~,noweak=~] |
if ( MOD(#1[lemme:open],#2[lemme:share]) )
   ~.

// open articles
| #2[mental=~,ksw=~,contr=~,nonot=~,know=~,nounary=~,noweak=~] |
if ( $1(#1[lemme:article],#2[lemme:open]) )
   ~.

// open articles
| #2[mental=~,ksw=~,contr=~,nonot=~,know=~,nounary=~,noweak=~] |
if ( $1(#1[lemme:initiative],#2[lemme:open]) )
   ~.

// scientific community

| #1[scope=+,ksw=+] |
if ( QUALIF(#1[lemme:community],#2[lemme:scientific]) )
	~.


// term

//MOD_PRE(term_MD:+,short)


| #1[mental=~,ksw=~] |
if ( MOD[pre](#1[lemme:term],#2[lemme:short]) | MOD[pre](#1[lemme:term],#3[lemme:long]) )
   ~.

//field work
//QUALIF(work,field)

| #1[scope=~,ksw=~] |
if ( $1(#1[lemme:field],#2[lemme:work]) | $1(#2[lemme:work],#1[lemme:field]) )
   ~.

| #2[scope=~,ksw=~,publ=~] |
if ( $1(#1[lemme:field],#2[lemme:work]) | $1(#2[lemme:work],#1[lemme:field]) )
   ~.



///////////////////////////// FINAL \\\\\\\\\\\\\\\\\\\\\\\\

| #1[mental,mentsco=+,mentscopubl=+] |
  ~.

| #1[scope,mentsco=+,mentscopubl=+] |
  ~.

| #1[publ,mentscopubl=+] |
  ~.

