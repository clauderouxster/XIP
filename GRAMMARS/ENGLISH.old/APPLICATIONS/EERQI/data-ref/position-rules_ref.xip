DependencyRules:

| #1[fordep1] |
	LIXO[fordep1=+](#1).

if ( LIXO[fordep1](#1) & LIXO[fordep1](#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.

| #1[fordep2] |
	LIXO[fordep2=+](#1).

if ( LIXO[fordep2](#1) & LIXO[fordep2](#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.

| #1[fordep3] |
	LIXO[fordep3=+](#1).

if ( LIXO[fordep3](#1) & LIXO[fordep3](#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.

| #1[fordep4] |
	LIXO[fordep4=+](#1).

if ( LIXO[fordep4](#1) & LIXO[fordep4](#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.

| #1[fordep5] |
	LIXO[fordep5=+](#1).

if ( LIXO[fordep5](#1) & LIXO[fordep5](#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.

| #1[fordep6] |
	LIXO[fordep6=+](#1).

if ( LIXO[fordep6](#1) & LIXO[fordep6](#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.

// exception to fordep6: we expect the popularity of schemas in GridVine to follow *(we,follow)

//DEP_DEICTDEP_BUILD(#1we_FORDEP6:+_DEICT:+,#2follow_FORDEP6:+_RELATION:+_DEICTDEP:+)
//OBJ_DEICTDEP(#3expect_DEICTDEP:+_MENTAL:+,#4popularity_SCOPE:+)
//SUBJ_DEICTDEP_OWN(#3expect_DEICTDEP:+_MENTAL:+,#1we_FORDEP6:+_DEICT:+)


if ( ^DEP(#1[fordep6],#2[fordep6]) & OBJ(#3,#4) & SUBJ(#3,#1[fordep6]) )
	~.

| #1[fordep7] |
	LIXO[fordep7=+](#1).

if ( LIXO[fordep7](#1) & LIXO[fordep7](#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.

| #1[fordep8] |
	LIXO[fordep8=+](#1).

if ( LIXO[fordep8](#1) & LIXO[fordep8](#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.

Script:

// DEP(#1[fordep8],#2[fordep8]): noun that verb -> that takes the features of noun since it refers to it:  procedures that can be instantiated

iftest ( DEP(#1[fordep8,scope],#2[fordep8]) ) { #2[scope=+,rf=+] ; }

iftest ( DEP(#1[fordep8,article],#2[fordep8]) ) { #2[article=+,rf=+] ; }


//us to translate[mental=+]

iftest ( DEP(#1[pron,fordep3,obl],#2[verb,fordep3]) ) { #2[mental=+,rf=+] ; }


DependencyRules:

| #1[fordep90] |
	LIXO[fordep90=+](#1).

| #1[fordep91] |
	LIXO[fordep91=+](#1).

| #1[fordep92] |
	LIXO[fordep92=+](#1).

if ( LIXO[fordep91](#1) & LIXO[fordep90](#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	SUBJ(#1,#2).

if ( LIXO[fordep91](#1) & LIXO[fordep92](#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	SUBJ(#1,#2).

if ( ^LIXO(#1) )
	~.

// the ones presented in [ 10 ] .

| #1[fordep10] |
	LIXO[fordep10=+](#1).

if ( LIXO[fordep10](#1) & LIXO[fordep10](#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.

// reported previously

| #1[fordep11] |
	LIXO[fordep11=+](#1).

if ( LIXO[fordep11](#1[partpas]) & LIXO[fordep11](#2[adv]) & ~DEP(#1,#2) & ~DEP(#2,#1) & ~NUCL(#3[form:fhave],#1[fordep11,partpas])  )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.

// approaches such as

| #1[fordep12] |
	LIXO[fordep12=+](#1).

if ( LIXO[fordep12](#1[noun,pl]) & LIXO[fordep11](#2[lemme:such_as]) & ~DEP(#1,#2) & ~DEP(#2,#1)  )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.

// changed as follows 

| #1[fordep13] |
	LIXO[fordep13=+](#1).

if ( LIXO[fordep13](#1) & LIXO[fordep13](#2[lemme:follow]) & ~DEP(#1,#2) & ~DEP(#2,#1)  )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.
// // Fuzzy clustering, an explorative signal processing method [2, 3], allows - method[fordep14] allows[fordep91]

| #1[fordep14] |
	LIXO[fordep14=+](#1).

| #2[fordep91] |
	LIXO2[fordep91=+](#2).

if ( LIXO(#1) & LIXO2(#2) )
	SUBJ(#2,#1).

if ( ^LIXO(#1) )
	~.

if ( ^LIXO2(#1) )
	~.

// Generally, exploratory data analysis is performed generally - is


| #1[fordep15] |
	LIXO[fordep15=+](#1).

if ( LIXO(#1) & LIXO(#2) & ~DEP(#1,#2) & ~DEP(#2,#1) )
	DEP(#1,#2).

if ( DEP(#1[fordep15],#2[fordep15]) & NUCL(#2,#3) )
	DEP(#1,#3).

if ( ^LIXO(#1) )
	~.

// has been successfully used (been,used)

| #1[fordep16a] |
	LIXO[fordep16a=+](#1).

| #2[fordep16b] |
	LIXO[fordep16b=+](#2).

if ( LIXO[fordep16a](#1) & LIXO[fordep16b](#2) & ~DEP(#1,#2) )
	DEP(#1,#2).

if ( ^LIXO(#1) )
	~.


Script:

iftest ( $1(#1[fordep10],#2[other]) ) { #1[other=+] ; }

iftest ( $1(#1[other],#2[fordep10]) ) { #2[other=+] ; }
	
iftest ( $1(#1[fordep10],#2[otherdep]) ) { #1[other=+] ; }

iftest ( $1(#1[otherdep],#2[fordep10]) ) { #2[other=+] ; }
	
iftest ( $1(#1[fordep10],#2[deict]) ) { #1[deict=+] ; }

iftest ( $1(#1[deict],#2[fordep10]) ) { #2[deict=+] ; }
	
iftest ( $1(#1[fordep10],#2[deictdep]) ) { #1[deict=+] ; }

iftest ( $1(#1[deictdep],#2[fordep10]) ) { #2[deict=+] ; }


iftest ( $1(#1[fordep10,other],#2[vikef_feat]) ) { #2[other=+] ; }	

iftest ( $1(#1[vikef_feat],#2[fordep10,other]) ) { #1[other=+] ; }

iftest ( $1(#1[fordep10,deict],#2[vikef_feat]) ) { #2[deict=+] ; }	

iftest ( $1(#1[vikef_feat],#2[fordep10,deict]) ) { #1[deict=+] ; }

DependencyRules:

// dependency btw SUBJ and other arguments of the verb
// might be superfluous

if ( SUBJ(#1[form:fbe],#2) & $1(#1[form:fbe],#3[adv:~]) & ~PREPD(#3,#4) & #2~:#3 )
	DEP(#2,#3).

// These issues are similar DEP(issues,similar)

//SUBJ-N_BKG(are_GENERAL:+_MENTAL:+,issues_SCOPE:+)
//NUCL_COMPAR(are_GENERAL:+_MENTAL:+,similar_COMP:+)

if ( SUBJ-N(#1,#2) & NUCL(#1,#3) ) 
	DEP(#2,#3).



// that is in practical use

//MOD(is_GENERAL:+_MENTAL:+,use_RELATION:+)
//SUBJ_BKG(is_GENERAL:+_MENTAL:+,that_FORDEP8:+_SCOPE:+)

if ( MOD(#1[form:fbe],#2[relation]) & SUBJ(#1[form:fbe],#3[scope]) )
	DEP(#2,#3).

if ( MOD(#1[form:fbe],#2[relation]) & SUBJ(#1[form:fbe],#3[article]) )
	DEP(#2,#3).

//| #1[potrefitem,refitem=+,scope=+,rf=+,mentscoart=+] | 
//if ( REFNUMBER(#2) )
//	~


// approach is based (approach,based)

//NUCL(#1is_GENERAL:+,#2based_RELATION:+)
//SUBJ_BKG(#1is_GENERAL:+,#3approach_SCOPE:+)

if ( NUCL(#1,#2[partpas]) & SUBJ(#1,#3) )
	DEP(#2,#3).




| #1[adv], #2[verb] |
	DEP(#1,#2).

// can be provided (can,provided)

if ( NUCL(#1,#2) & NUCL(#2,#3) )
	DEP(#1,#3).

// [17] can be used : DEP([17],used)

if ( NUCL(#1,#2) & NUCL(#2,#3) & DEP(#1[fordep91],#3[relation]) & SUBJ(#4[fordep91],#1[fordep90]) )
	DEP(#3,#4).

// Will need to be refined 

//need,refined

| iv{#1} , ?{#2[form:finfto], #3[form:fbe], #4} |
if ( NUCL(?,#1) & NUCL(#3,#4) & PREPD(#4,#2) )
	DEP(#1,#4).

//NUCL_OTHER(will_FORDEP9:+_OTHER:+,#1need_POSSIBILITY:+)
//NUCL(#3be,#4refined_RELATION:+)
//PREPD(#4refined_RELATION:+,#2to)
//DEP(#1need_POSSIBILITY:+,#4refined_RELATION:+)

| iv{#1} , ?{#2[form:finfto], #3[form:fbe], #4} |
if ( NUCL(#5[aux],#1) & NUCL(#3,#4) & PREPD(#4,#2) )
	DEP(#5,#4).



//the approach we take

| #1[relativenoun] |
	LIXO[relativenoun=+](#1).

| #1[relativepron] |
	LIXO[relativepron=+](#1).

if ( LIXO[relativepron](#1) & LIXO[relativenoun](#2) )
	DEP(#2,#1).

if ( ^LIXO(#1) )
	~.

// Following [ 6 ] , we

| #1[start,vprog,relation] |
if ( SUBJ(#2,#3[deict]) )
	DEP(#1,#3).

// "relies on a wide range of optimizations" -> DEP(relies,optimizations); range will be marked as nohead, so anything that "range" modifies - MOD(#1,range) - will also modify the word with which "range" is in a "range of" relationship

if ( MOD(#1,#2[nohead]) & MOD(#2[nohead],#3) & PREPD(#3,#4[form:fof]) )
	DEP(#1,#3).


Script:

//method that takes as starting point SUBJ(takes[mental=+],that[scope])

iftest ( SUBJ(#1,#2[scope]) ) {#1[mental=+,rf=+,mentscoart=+] ; }





