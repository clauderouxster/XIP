//DependencyRules:

//| ?{ ?*, noun#1[refitem=+] }, ins{np{dig[#2]}}} | ~
Script:


// to our knowledge

iftest ( PREPD(#1[scope,lemme:knowledge],#2[form:finfto]) & $1(#1[scope,lemme:knowledge],#3[deict]) ) { #1[scope=~] ; #3[deict=~] ; }

//// 1990s -> general

//iftest ( DATE(#1[guess,date])  ) { #1[general=+] ; }


// a similar classification has been introduced: the OBJ of a mental/art can be supposed to be scope

iftest ( OBJ(#1[mental],#2) ) { #2[scope=+,mentscoart=+,rf=+] ; }
iftest ( OBJ(#1[article],#2) ) { #2[scope=+,mentscoart=+,rf=+] ; }

iftest ( OBJ-N(#1[mental],#2) ) { #2[scope=+,mentscoart=+,rf=+] ; }
iftest ( OBJ-N(#1[article],#2) ) { #2[scope=+,mentscoart=+,rf=+] ; }

// some general words (like "make" well have vikef_feat only when they are in dependecy with another vikef word

iftest ( $1(#1[mentalwrf],#2[scope]) ) { #1[mental=+,mentscoart=+,rf=+] ; }
iftest ( $1(#1[scope],#2[mentalwrf]) ) { #2[mental=+,mentscoart=+,rf=+] ; }

iftest ( $1(#1[mentalwrf],#2[article]) ) { #1[mental=+,mentscoart=+,rf=+] ; }
iftest ( $1(#1[article],#2[mentalwrf]) ) { #2[mental=+,mentscoart=+,rf=+] ; }

iftest ( $1(#1[mentalwrf],#2[deict]) ) { #1[mental=+,mentscoart=+,rf=+] ; }
iftest ( $1(#1[deict],#2[mentalwrf]) ) { #2[mental=+,mentscoart=+,rf=+] ; }

// in our companion abstract [ 6 ] if PREP(#1[forfeature1],in) -> #1[scope=+,other=+]

iftest ( PREPD(#1[forfeature],#2[form:fin]) ) { #1[scope=+,other=+,rf=+] ; }


///////////////
// self reference



DependencyRules:

// our prior work

if ( $1(#1,#2[old]) & $2(#1,#3[deictfromlex,form:~fthis]) ) 
	DEP[selfref=+,other=+](#1,#3).


// in our companion abstract [ 6 ] if PREP(#1[forfeature],in) -> #1[scope=+,other=+]

if ( ^$1(#1[forfeature,scope,other],#2[deictfromlex,form:~fthis]) )
	$1[selfref=+,deict=~,own=~,deictdep=~,other=+](#1,#2).


//We have previously developed a method

if ( $1(#1[tempold],#2) & $2(#2,#3[deictfromlex,form:~fthis]) )
	DEP[selfref=+,deict=~,own=~,deictdep=~,other=+](#1,#3).

//In a previous study , we used

if ( $1(#1,#2[tempold]) & $2(#3,#4[deictfromlex,form:~fthis]) & $3(#3,#1) )
	^$2[selfref=+,deict=~,own=~,deictdep=~,other=+](#3,#4).

// we describe in detail elsewhere 
//MOD_DEICTDEP(describe_DEICTDEP:+_ART:+_MENTAL:+,elsewhere_DEICTDEP:+_OTHER:+_SCOPE:+)
//SUBJ-N_DEICTDEP_OWN_DEICT(describe_DEICTDEP:+_ART:+_MENTAL:+,we_DEICTDEP:+_DEICT:+)

if ( $1(#1,#2[otherfromlex]) & ^SUBJ(#1,#3[deictfromlex,form:~fthis]) )
	SUBJ[selfref=+,deict=~,own=~,deictdep=~,other=+](#1,#3).

//In a previous study, we used heuristics[selfref=+]

if ( $1[selfref](#1,#2) & ^OBJ(#1,#3) )
	OBJ[selfref=+,deict=~,own=~,deictdep=~,other=+](#1,#3).


Script:

iftest ( $1[selfref](#1,#2[deictfromlex,form:~fthis]) ) { #2[deict=~,deictdep=~,other=+] ; }

iftest ( $1[selfref](#1,#2) ) { #1[deict=~,deictdep=~,other=+]; }


///////////////


// can be seen[comp=+] as[comp=+] the markings

//MOD(seen,markings_SCOPE:+)
//PREPD(markings_SCOPE:+,as)

iftest ( MOD(#1[lemme:see],#2) & PREPD(#2,#3[lemme:as]) ) { #1[comp=+,rf=+] ; #3[comp=+,rf=+] ; }

// we chose to develop an expression syntax[scope=+,deictdep=+]

iftest ( SUBJ(#1,#2[pron,deict]) & OBJ(#1,#3) ) { #3[scope=+,mentscoart=+,rf=+,deictdep=+] ; } 



// REST architectural style[scope=+]

//MOD(style,REST_SCOPE:+)

iftest ( MOD(#1[noun,scope:~],#2[maj,scope]) ) { #1[scope=+,mentscoart=+,rf=+] ; }


// the following[relation=~]
// MOD_RELATIONDEP_OTHER(theories_FORDEP2:+_OTHER:+_SCOPE:+,following_FORDEP2:+_RELATION:+_OTHERDEP:+)
// DETD(theories_FORDEP2:+_OTHER:+_SCOPE:+,the)

iftest ( MOD(#1,#2[lemme:follow,vprog]) & DETD(#1,#3[lemme:the]) ) { #2[vikef_feat=~] ; }

iftest ( MOD(#1,#2[lemme:following]) & DETD(#1,#3[lemme:the]) ) { #2[vikef_feat=~] ; }


// relation words that trigger a scope: the noun they are in a dependency with, becomes scope

iftest ( $1(#1[relation,trscope],#2[noun,scope:~]) ) { #2[scope=+,mentscoart=+,rf=+] ; }

iftest ( PREPD(#2[noun,scope:~],#1[relation,trscope]) ) { #2[scope=+,mentscoart=+,rf=+] ; }

////////////

iftest ( NUCL(#1[form:fdo],#2) ) { #1[mental=~,rf=~,mentscoart=~] ; }

//we take - the verb whose subject is a deict gets the feature mental

iftest ( SUBJ(#1[aux:~,verb,rf:~],#2[deict,pron]) ) { #1[mental=+,mentscoart=+,rf=+] ; }

iftest ( SUBJ-N(#1[aux:~,verb,rf:~],#2[deict,pron]) ) { #1[mental=+,mentscoart=+,rf=+] ; }

// we are concerned - the verb whose normalized object is a deict gets the feature mental

iftest ( OBJ-N(#1[aux:~,verb,rf:~],#2[deict,pron]) ) { #1[mental=+,mentscoart=+,rf=+] ; }


// finding[scope=~] differences

iftest ( OBJ(#1[lemme:find],#2) ) { #1[vikef_feat=~,scope=~,mental=~,article=~] ; }

iftest ( OBJ(#1[lemme:finding],#2) ) { #1[vikef_feat=~,scope=~,mental=~,article=~] ; }

iftest ( REFNUMBER(#1) ) { #1[scope=+,mentscoart=+,rf=+] ; }

// PRESON -> scope

iftest ( PERSON(#1) & ~DETD(#1[noun],#2[personal,gen,pron,rf]) ) { #1[scope=+,mentscoart=+,other=+] ; }

// our algorithm -> scope

iftest ( DETD(#1[noun,c_person:~],#2[personal,gen,pron,rf]) & ~PERSON(#1) ) { #1[scope=+,mentscoart=+,rf=+] ; }

iftest ( DETD(#1[vprog,c_person:~],#2[personal,gen,pron,rf]) & ~PERSON(#1) ) { #1[scope=+,mentscoart=+,rf=+] ; }

// following the pattern

iftest ( PREPD(#1[vprog],#2[relation]) ) { #1[scope=+,mentscoart=+] ; }

// mark the word in dependency with deict

iftest ( $1(#1[deict,timefact:~],#2[rf]) ) { #2[!deictdep=+] ; }

iftest ( $1(#1[rf],#2[deict,timefact:~]) ) { #1[!deictdep=+] ; }


//// propagation of deictdep

//iftest ( $1(#1[deictdep],#2[rf]) ) { #2[deictdep=+] ; }

//iftest ( $1(#1[rf],#2[deictdep]) ) { #1[deictdep=+] ; }

//iftest ( $1(#1[deictdep],#2[rf]) ) { #2[deictdep=+] ; }

//iftest ( $1(#1[rf],#2[deictdep]) ) { #1[deictdep=+] ; }



// mark the word in dependency with other

iftest ( $1(#1[other],#2[vikef_feat]) ) { #2[otherdep=+] ; }

iftest ( $1(#1[vikef_feat],#2[other]) ) { #1[otherdep=+] ; }

//iftest ( $1(#1[otherdep],#2[vikef_feat]) ) { #2[otherdep=+] ; }

//iftest ( $1(#1[vikef_feat],#2[otherdep]) ) { #1[otherdep=+] ; }



// priority to deictdep

iftest ( $1(#1[other,old:~],#2[deictdep,otherdep,old:~]) ) { #2[otherdep=~] ; }

iftest ( $1(#1[deictdep,otherdep,old:~],#2[other,old:~]) ) { #1[otherdep=~] ; }

// more sophisticated capabilities -> (sophisticated,more) & (capabilities,sophisticated)

iftest ( QUALIF(#3,#1[comp,propagated]) ) { #3[comp=+,rf=+] ; }

// make use of -> relation

iftest ( OBJ(#1[form:fmake],#2[relation]) ) { #1[relation=+,rf=+] ; }

// on top of Haystack[relation=+] PREPD_RELATIONDEP(Haystack_SCOPE:+,on top of_RELATION:+)

iftest ( PREPD(#1[vikef_feat],#2[prep,relation]) ) { #1[relation=+,rf=+] ; }

// These definitions improve upon those[other=+,rf=+] given by the first author [ 6 ] .}

iftest ( $1(#1[form:fthose],#2[vikef_feat]) ) { #1[rf=+] ; }

iftest ( $1(#1[form:fthose],#2[vikef_feat,deict]) ) { #1[rf=+,deictdep=+] ; }

iftest ( $1(#1[form:fthose],#2[vikef_feat,deictdep]) ) { #1[rf=+,deictdep=+] ; }

iftest ( $1(#1[form:fthose],#2[vikef_feat,other]) ) { #1[rf=+,otherdep=+] ; }

iftest ( $1(#1[form:fthose],#2[vikef_feat,otherdep]) ) { #1[rf=+,otherdep=+] ; }

iftest ( $1(#2[vikef_feat],#1[form:fthose]) ) { #1[rf=+] ; }

iftest ( $1(#2[vikef_feat,deict],#1[form:fthose]) ) { #1[rf=+,deictdep=+] ; }

iftest ( $1(#2[vikef_feat,deictdep],#1[form:fthose]) ) { #1[rf=+,deictdep=+] ; }

iftest ( $1(#2[vikef_feat,other],#1[form:fthose]) ) { #1[rf=+,otherdep=+] ; }

iftest ( $1(#2[vikef_feat,otherdep],#1[form:fthose]) ) { #1[rf=+,otherdep=+] ; }


DependencyRules:

| #1noun[scope=+,mentscoart=+,rf=+]{ ?[scope],?[form:fhyph], ?[scope] } | ~

| #1noun[scope=+,mentscoart=+,rf=+,other=+]{ ?[scope],?[form:fhyph], ?[scope,other] } | ~

| #1noun[scope=+,mentscoart=+,rf=+,otherdep=+]{ ?[scope],?[form:fhyph], ?[scope,otherdep] } | ~

| #1noun[scope=+,mentscoart=+,rf=+,other=+]{ ?[scope,other],?[form:fhyph], ?[scope] } | ~

| #1noun[scope=+,mentscoart=+,rf=+,otherdep=+]{ ?[scope,otherdep],?[form:fhyph], ?[scope] } | ~

Script:

// serve[relation=+] as an example[relation=+]

iftest ( $1(#1[lemme:serve],#2[lemme:example]) ) { #1[relation=+,rf=+]; #2[relation=+,rf=+]; }

iftest ( $1(#1[lemme:example],#2[lemme:serve]) ) { #1[relation=+,rf=+]; #2[relation=+,rf=+]; }


// such as TrackBack [ 18 ] such as[relation=+]

//iftest ( PREPD(#1[scope],#2[lemme:such_as]) ) { #2[comp=+,rf=+] ; }

// states of our state transition systems (states[scope=+],systems[scope])

//MOD_DEICTDEP(#2states,#1systems_DEICTDEP:+_MENTSCOART:+_SCOPE:+)
//PREPD_DEICTDEP(#1systems_DEICTDEP:+_MENTSCOART:+_SCOPE:+,#3of)

iftest ( PREPD(#1[scope],#3) & MOD(#2[noun,rf:~],#1[scope]) ) { #2[scope=+,rf=+,mentscoart=+] ; }

iftest ( PREPD(#1[scope,deict],#3) & MOD(#2[noun,rf:~],#1[scope,deict]) ) { #2[scope=+,rf=+,mentscoart=+,deictdep=+] ; }

iftest ( PREPD(#1[scope,deictdep],#3) & MOD(#2[noun,rf:~],#1[scope,deictdep]) ) { #2[scope=+,rf=+,mentscoart=+,deictdep=+] ; }

iftest ( PREPD(#1[scope,other],#3) & MOD(#2[noun,rf:~],#1[scope,other]) ) { #2[scope=+,rf=+,mentscoart=+,otherdep=+] ; }

iftest ( PREPD(#1[scope,otherdep],#3) & MOD(#2[noun,rf:~],#1[scope,otherdep]) ) { #2[scope=+,rf=+,mentscoart=+,otherdep=+] ; }

iftest ( PREPD(#1[article],#3) & MOD(#2[noun,rf:~],#1[article]) ) { #2[article=+,rf=+,mentscoart=+] ; }

iftest ( PREPD(#1[article,deict],#3) & MOD(#2[noun,rf:~],#1[article,deict]) ) { #2[article=+,rf=+,mentscoart=+,deictdep=+] ; }

iftest ( PREPD(#1[article,deictdep],#3) & MOD(#2[noun,rf:~],#1[article,deictdep]) ) { #2[article=+,rf=+,mentscoart=+,deictdep=+] ; }

iftest ( PREPD(#1[article,other],#3) & MOD(#2[noun,rf:~],#1[article,other]) ) { #2[article=+,rf=+,mentscoart=+,otherdep=+] ; }

iftest ( PREPD(#1[article,otherdep],#3) & MOD(#2[noun,rf:~],#1[article,otherdep]) ) { #2[article=+,rf=+,mentscoart=+,otherdep=+] ; }

//subject[scope=+] of research

iftest ( $1(#1[lemme:subject],#2[scope,scopefromlex]) ) { #1[scope=+,rf=+,scopefromlex=+] ; }

iftest ( $1(#1[scope,scopefromlex],#2[lemme:subject]) ) { #1[scope=+,rf=+,scopefromlex=+] ; }

// accepted standard

iftest ( MOD(#1,#2[lemme:accept,partpas]) ) { #1[timefact=+,general=+,gb=+,rf=+] ; }
iftest ( MOD(#1,#2[lemme:accepted,partpas]) ) { #1[timefact=+,general=+,gb=+,rf=+] ; }

// those of  Damasio et al.

iftest ( $1(#1[form:fthose],#2[scope]) ) { #1[scope=+,rf=+] ; }

iftest ( $1(#1[form:fthose],#2[scope,other=+]) ) { #1[scope=+,rf=+,other=+] ; }

// LSIDs[other=+] promise to uniquely and consistently identify data resources in life science , and provide a resolution protocol for the retrieval of that data and any associated metadata [ 7 ] .

iftest ( $1(#1[good],#2[scopefromlex,narrowscope:~]) & SUBJ(#3,#2) ) { #2[other=+] ; }

iftest ( $1(#1[scopefromlex,narrowscope:~],#2[good]) & SUBJ(#3,#1) ) { #1[other=+] ; }

// if there is just one SUBJ in a REFSENT, it is [other]

iftest ( SUBJ(#1,#2[scope])  &  SUBJ-N(#1,#2[scope]) ) { #2[other=+,test=+] ; }

iftest ( SUBJ(#1,#2[test,scope])  & SUBJ(#3,#4) ) { #2[other=~,test=~] ; }

iftest ( SUBJ(#1,#2[test,scope]) ) { #2[test=~] ; }

// Image registration[other=+] in functional MRI is useful 

iftest ( SUBJATTR(#1[scope],#2[good]) ) { #1[other=+] ; }

iftest ( ATTRIB(#1[scope],#2[good]) ) { #1[other=+] ; }

// One[start] important use[other=+]

iftest ( $1(#1[scope],#2[start]) & $2(#1[scope],#3[good]) ) { #1[other=+] ; }

// has become[general=+]

iftest ( NUCL(#1[form:fhave],#2[lemme:become]) ) { #2[general=+] ; }

// becomes relation if has one dependency with an [other] word ex.: We therefore have chosen Piccolo [20] as our graphical library

iftest ( $1(#1[other],#2[wother]) | $1(#1[otherdep],#2[wother]) | $1(#2[wother],#1[other]) | $1(#2[wother],#1[otherdep]) ) { #2[rf=+,relation=+,ingnoadj=+] ; }


// remake restrictions: if a word that has a restriction gets a feature, this feature is to be deleted: relationwprep, relationwscope, relationwdeict, mentalwrf

iftest ( $1(#1[relationwprep],#2) & ~PREPD(#1,#3) ) { #1[relationwprep=~] ; }

iftest ( $1(#1,#2[relationwprep]) & ~PREPD(#2,#3) ) { #2[relationwprep=~] ; }

// it[scope=+] allows us to

iftest ( SUBJ(#1[mental],#2[form:fit]) ) { #2[scope=+,rf=+] ; }

DependencyRules:

if ( ^$1(#1[scope],#2) | ^$1(#1,#2[scope]) )
	$1[scope=+](#1,#2).

if ( ^$1(#1[deict],#2) | ^$1(#1,#2[deict]) )
	$1[deict=+](#1,#2).

if ( ^$1(#1[rf],#2) | ^$1(#1,#2[rf]) )
	$1[rf=+](#1,#2).

| #1[lemme:instead_of,contr=+,comp=+,rf=+] | ~







