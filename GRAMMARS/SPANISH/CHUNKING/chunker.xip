//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
//!
//! File:	chunker.xip
//! Content:	definition of chunks
//!
//! Language:	SPANISH
//! ENCODING:	ISO-LATIN-1	
//!
//! Author:	Elena Lopez Garcia - C. Hagege
//!
//! Date: 	03-Feb-2006	:: first version
//! Update:	29-May-2008	:: changed to UTF-8
//! Update:	14-Oct-2008	:: changed to ISO-LATIN-1
//!
//!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!





Sequence:

///===============================NP CHUNKS======================================



10> NP = art;det;quant, adj, num, noun.

15> NP @= (art;det;quant;adj),num, noun. // 60 minutos # sesenta minutos # los 16 años # cada mil cigarrillos

15> NP = art, noun[lemma:otro], adj[lemma:"?+ar"]. // los otros encarcelados

20> NP @= (?[predet:+]),art;det;pron[indef:+], (adj;AP), noun, (pron[poss];?[postdet]). // Todos los dias # el gran momento # la tan esperada llegada # todos estos dias

//Pb avec los años 50. Pour l'instant 2 chunkers, on en veut un seul????

20> NP @= art, conj[coord:+], art, noun.  //La o las personas que..

25> NP = (quant),det, (adj;AP;num), noun[dig:~]. // Mi primera casa # Todas mis casas # todas mis otras casas # Mis 7 hermanos

25> NP @= (art),quant;num, adj, noun. // alguna otra parte  #los dos presuntos terroristas

25> NP @= (art),adj, num. //otros 38 millones

25> NP = adv[lemma:muy], quant[lemma:poco], noun. //muy poca informaciÃ³n

30> NP = quant, noun.  // alguna casa

30> NP[interrog=+] = pron[interrog:+, lemma:quÃ©], noun.

35> NP = quant, pron[ref:~].  // toda ella

35> NP = art, ?[lemma:que].   // el que # lo que

45> NP = art, pron[poss]. // el tuyo

45> NP = ?[conj:~,compar:+,lemma:~como], noun. // mÃ¡s vestidos 

45> NP[num=+] = adj;art,num. // Otros mil # las siete # los noventa

45> NP = adj[lemma:otro], noun.  // Otra batalla

50> NP = noun[prop:+]. // Pedro # Barcelona

50> NP = art, quant. //el todo

50> NP = quant. // ninguno # todo # alguno

50> NP = (art),pron[interrog:~]. // TÃº # Ã©ste # el uno

50> NP @= (art),noun[lemma:nÃºmero], num.

60> NP @= (art;det),(adj;ap),noun.

60> NP = pron[poss]. // Es tuyo

60> NP = art;det, adj;ap. // Lo bello # el feo # el mÃ¡s pequeÃ±o 

80> NP @= |?[np:~,ap:~;pp:~]|noun.

100> NP = det.

100> NP[num=+] @= (num, punct[comma:+]), (num, punct[comma:+]), num, conj[coord:+], num.

110> NP[num=+] = num.

115> NP[interrog=+] = pron[interrog:+].

320> NP = art.

300> NP = art, vinf.


//=========================REFLEX CHUNK======================================//
// We consider Reflex the pronoun "se" right before a verb (as opposition of "se lo dije")

10> REFLEX = pron[reflex:+].


//===============================AP CHUNKS=========================================
// We consider AP within the NP when an adverb modifies an adjective 

20> AP = adj#1, conj[coord:+], adj#2, where((#1[gender]:#2[gender])&(#1[number]:#2[number])) .
59> AP = adv+, adj .
60> AP = |NP;PP| adj.
//60> AP = avp{adv[lemma:no]}, adj.
45> AP = adj#1, pron#2[poss], where((#1[gender]:#2[gender])&(#1[number]:#2[number])). // Es amigo mÃ­o
65> AP = adj.

//100> AP = adv, VPART.
120> AP = |AP;NP[prop:~];PP| noun[prop:~,adj:+].


//==============================AVP CHUNKS=========================================

60> AVP = adv[lemma:no].
70> AVP = adv[mente:~], adv[mente:+].
70> AVP = adv[lemma:muy], adv.

//100> AVP @= adv+[conj:~, interrog:~].
100> AVP[interrog=+] @= adv+[conj:~, interrog:+].
140> AVP = AP |conj[coord:+], adv[mente]|.
190> AVP[temp=+] = fv[exp_temp:+], (adv), np[temp:+].
200> AVP = adv.




//============================VERB CHUNKS=========================



18> FV[passif=+, verbal=+] @= ?[cop:+, nonper:~], (adv), ?[pastpart:+].

20> VINF[passif=+, verbal=+] @= |prep| ?[cop:+, nonper:+], (adv), ?[pastpart:+].


20> FV[passif=+, verbal=+] @= ?[aux:+, nonper:~], verb[pastpart:+, cop:+], (adv), ?[pastpart:+].

20> VINF[passif=+, verbal=+] @= |prep| ?[aux:+, nonper:+], verb[pastpart:+, cop:+], (adv), ?[pastpart:+].

30> FV[verbal=+, aspect=+, passif=+] @= (?[aux:+]), verb[aspectprep:+], prep, ?[inf:+, cop:+], ?[pastpart:+].

30> FV[verbal=+, aspect=+] @= (?[aux:+]), verb[aspectprep:+], prep, ?[inf:+].

40> FV[verbal=+, aspect=+, passif=+ ] @= (?[aux:+]),verb[aspectinf:+], ?[inf:+, cop:+], ?[pastpart:+].

40> FV[verbal=+, aspect=+] @= (?[aux:+]),verb[aspectinf:+], ?[inf:+].

40> FV[verbal=+, aspect=+, passif] @= (?[aux:+]), verb[aspectger:+], ?[prespart:+, cop:+], ?[pastpart:+].

40> FV[verbal=+, aspect=+] @= (?[aux:+]), verb[aspectger:+], ?[prespart:+].

40> FV [verbal=+, aspect=+, passif=+] @= (?[aux:+]), verb[aspectpart:+], ?[pastpart:+, cop:+], ?[pastpart:+].

40> FV [verbal=+, aspect=+] @= (?[aux:+]), verb[aspectpart:+], ?[pastpart:+].

60> FV[verbal=+, modal=+, passif=+] @= (?[aux:+]), verb[modal:+], (prep), ?[nonper:+], ?[pastpart:+, cop:+], ?[pastpart:+].

60> FV[verbal=+, modal=+] @= (?[aux:+]), verb[modal:+], (prep), ?[nonper:+], (?[pastpart:+]).

60> FV[verbal=+, modal=+, passif=+] @= (?[aux:+]), verb[modal:+], conj[lemma:que], ?[nonper:+], ?[pastpart:+, cop:+], ?[pastpart:+].

60> FV[verbal=+, modal=+] @= (?[aux:+]), verb[modal:+], conj[lemma:que], ?[inf:+], (?[pastpart:+]).

70> FV[caus=+, verbal=+] @= (?[aux:+]), fv[lemma:hacer],?[inf:+], (?[pastpart:+]).

80> FV [verbal=+] @= ?[aux:+, nonper:~],(?[enclit:+]), ?[pastpart:+], (?[pastpart:+]).

80> FV [verbal=+]= verb[nonper:~].

90> VINF[nonper=+, verbal=+] = verb[inf:+, aux:+], verb[pastpart:+].

90> VINF [nonper=+, verbal=+]= verb[inf:+].

90> VPART [nonper=+, verbal=+]= verb[pastpart:+].

90> VGER [nonper=+, verbal=+] = verb[prespart:+].





// sample VP (imperative + clitics)

//100> vp = verb[tokenstart], ?*, pron[tokenend].





//============================PP=====================================

120> PP = prep, np[interrog:~].
120> PP[interrog=+] = prep, np[interrog:+].
120> PP = prep, sc.

180> PP = prep, avp[lemma:mÃ¡s] |pp{prep[lemma:de], ?+}|.
180> PP = prep, avp[lemma:menos] |pp{prep[lemma:de], ?+}|.
180> PP = prep, avp, np.
180> PP = prep, ap.




//===========================SUBCLAUSE CHUNKER======================================

280> SC[subord=+] @= (prep), conj[coord:~, rel:~, interrog:~],?*[fv:~],fv.
280> SC[rel=+] @= (prep),?[rel:+],?*[fv:~],fv.
280> SC[temp=+] = fv[exp_temp:+], avp[temp:+].
280> SC[temp=+] = prep[lemma:a], art, vinf.
300> SC[interrog=+] = NP[interrog:+], ?*[verbal:~], ?[verbal:+].
300> SC[interrog=+]  = PP[interrog:+], ?*[verbal:~], ?[verbal:+].
300> SC[interrog=+]  = conj[interrog:+], ?*[verbal:~], ?[verbal:+].
300> SC[interrog=+] = AVP[interrog:+], ?*[verbal:~], ?[verbal:+].
//300> SC = AVP[adv:+, lemma:donde], ?[verbal:+].
//300> SC[interrog=+]  = avp{adv[interrog:+]}, ?*[verbal:~], ?[verbal:+].

//===========================COMPAR CHUNKER====================================

//200> CC = adv[compar:+],adj, adv;conj[compar:+].




