//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Copyright (c) Xerox Corporation.  All Rights Reserved.
//!
//! File:	disamb.xip
//! Content:	disambiguation rules
//!
//! Language:	SWEDISH
//!
//! Author:	Anne Schiller
//! Created:	15-Jun-2010
//!
//! ENCODING : UTF-8	[€àâáäã]
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Tagging: 

// some word based rules

1> noun<lemma:"%ä"> = ?[noun:~].		// prefer adverb "än"
1> pron<lemma:"all"> = ?[adj:~,adv:~].		// "all" 	//prefer determiner and pronoun reading
1> noun<lemma:"finn"> = ?[noun:~].		// "exist"
1> pron<lemma:"jag"> = pron.			// "I" 	//ignore noun reading
1> conj<lemma:"men"> = ?[noun:~] |conj;?[neg]|.
1> ?<lemma:"mer"> = ?[noun:~].			// "more"	//prefer adjective and adverb rading
1> adv<lemma:"nästan"> = ?[noun:~] | num |.	// "almost" vs. "neighbour"
1> adv<lemma:"nu"> = ?[noun:~].
1> adj<lemma:"mycket"> = adj |noun| .
1> adv<lemma:"mycket"> = adv .
1> adj<lemma:"mer"> = adj |noun| .
1> adv<lemma:"mer"> = adv .
1> noun<lemma:"skall">,verb = ?[noun:~].		// prefer modal verb

// som = relative pronoun ("who") or conjunction ("as")
1> pron<lemma:"som"> = pron | adv*, verb |.
1> conj<lemma:"som"> = conj.

// there seem to be some "strange" adjectives in the lexicon.
// ending in -d : stämd, hörd
// TO BE CHECKED !!
1> adj<ppast>,adv<lemma:"?*d"> = ?[adv:~].
1> adj<ppast>,verb<act> = ?[adj:~].		// REFINE !!

// man = pron, noun
1> pron<lemma:"man"> = |det;num, adj*| noun.
1> pron<lemma:"man"> = ?[noun:~].

// så = det, adv, conj
1> det<lemma:"så"> = det | noun<lemma:"fall">;noun<lemma:"sätt"> |.
1> adv<lemma:"så"> = ?[noun:~,det:~].

1> noun[start:~,firstcap] = noun.
1> noun<lemma:"%c"> = ?[noun:~].		// single letter defined as noun - prefer other readings if available

1> verb[inf] = | conj[lemma:"att"] | verb[inf].	// "to" // infinitive marker

// expressions
1> adj<lemma:"sist"> = adj | conj%<lemma:"men">, ?[lemma:inte] |.	// "last but not least"

// categories
2> verb[aux] = verb[aux].
2> verb[modal] = verb[modal] | verb |.

2> verb = | verb[aux] | verb[supin].
2> verb = | det[pron:~] | ?[verb:~].
2> verb[inf] = |verb[modal] | verb[inf].

// preposition 
2> prep = prep | ?*, noun |.


// pronouns, deteminers
3> det = ?[det:~] | punct |.
3> det = ?[det:~] | det |.
3> det = ?[det:~] | adv*, verb[ppres:~,noun:~,adj:~]; conj |.
3> pron<start>, noun = ?[noun:~].
3> pron, noun = | ?[det:~, adj:~] | ?[noun:~].
3> pron, det = det | adv*, (adj;verb[ppres])*, noun |.

// possessives
3> poss, noun = ?[noun:~] | adj*, noun |.
3> poss, pron = ?[poss:~] |pron|.


/// REFINE
10> adj, noun = ?[noun:~] | noun |.
10> adj, adv = ?[adv:~] | noun |.
10> adj, verb = ?[adj:~] | conj[lemma:att] |.
10> verb = | pron[det:~] | verb .
