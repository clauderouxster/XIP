//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2000 - 2007 Xerox Corporation.  All Rights Reserved.
//!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

/*****************************
ICI, CALCUL DE DEPENDANCES MANQUANTES ET CORRECTIONS
******************************\


Déduction:

1> |FV{?*,#1[last]};IV{?*,#1[last]};GV{?*,#1[last]};verb#1,
    ?*[verb:~],?[verb:~,coord:~],PP{?*,?[last]{?*,#2[last]}}|
   if ( ~?(#1,#2) )
   VMOD(#1,#2)


1> |GV{prep#1,?*,#2[last]}|
   PREPOBJ(#2,#1)



// marquer les noun close
1> |NP[closed]{?*,#1[last]};PP[closed]{?*,?[last]{#1[last]}}|
   if ( #1[closed:~] & #1[closed=+] ) ~



////////////////////////////////////////////////////////////////////////////
//  DESAMBIGUISATION DES RATTACHEMENTS PP
///////////////////////////////////////////////////////////////////////////

// Si NMOD posit1 et NMOD posit2 sur un noun, alors preferer NMOD posit1
1> if ( NMOD[posit1](?[noun],#1) & ^NMOD[posit2](?[noun],#1) ) ~


// "il vous parait normal de..."
// on a 2 OBJspred : "vous" et "normal" : il faut supprimer "vous" qui devient
// VMOD du verbe du copule

1> if ( OBJ$1[spred](#1[copule], #2[pron,dat]) & (#2 < #1) & OBJ(#1,#3[pron:~]) )
  VMOD[arg=+](#1,#2), ~$1.


// tout SPRED ou OPRED est arg
1> if ( ^$1[spred](#1,#2) ) $1[arg=+,spred=+](#1,#2).
1> if ( ^$1[opred](#1,#2) ) $1[arg=+,opred=+](#1,#2).

// "il est possible de faire"
1> if ( DEEPSUBJ$1(#1,#2[inf]) & SUBJ[imperso](#1,?) & OBJ[spred](#1,#3) )
   ADJMOD[arg=+](#3,#2), ~$1.



// Si NMOD[arg] et NMOD[arg:~] on garde l'arg
1> if ( ^NMOD[arg:~](?,#1) & PREPOBJ(#1,?) & NMOD[arg](?,#1) ) ~ 

// Si NMOD[arg] et NMOD[arg:~] on garde l'arg
1> if ( ^NMOD(#1,#2[noun]) & PREPOBJ(#1,?) & NMOD(#3,#2) 
       & #3[closed]:#2[closed] & ~(#1[closed]:#2[closed])  ) ~ 

// Si NMOD[arg] et NMOD[arg:~] on garde l'arg
1> if ( ^NMOD[posit2](?,#1) & PREPOBJ(#1,?) & NMOD[posit1](?,#1) ) ~ 

// Si NMOD posit1 sur un noun sans det et VMOD posit2 sur un verb alors preferer le VMOD
#R-PREF
1> if ( VMOD$1[posit2](#3,#1) & NMOD$2[posit1](#2,#1) & (#1 > #3) & (#1 > #2) & ~DETERM(#2,?) & DETERM(#1,?) )
 ~$2,~$1,VMOD(#3,#1).

// Si ADJMOD non arg et NMOD/VMOD  arg preferer l'arg
1> if ( ^ADJMOD[arg:~](?,#1) & ( NMOD[arg](?,#1) | VMOD[arg](?,#1) ) ) ~ 


// Preference rattachement PP: si NMOD et VMOD et prep!=de ou a, alors VMOD
1> if ( VMOD(?,#1) & ^NMOD[arg:~](?,#1) & PREPOBJ(#1,?[prep,form:~fde,form:~fa]) ) ~

// Preference rattachement PP: si NMOD et VMOD alors NMOD
1> if ( ^VMOD[arg:~](#1,#2[time:~]) & NMOD(#3,#2) & (#1 < #3) & (#3 < #2)  ) ~


// Preference rattachement PP: si VMOD et ADJMOD 
1> if ( VMOD(?,#1) & ^ADJMOD[arg:~](?,#1)
       & PREPOBJ(#1,?) ) ~

// Preference rattachement PP: si NMOD et ADJMOD 
1> if ( NMOD(?,#1) & ^ADJMOD[arg:~](?,#1)
       & PREPOBJ(#1,?) ) ~


// Preference COORDITEMS
1> if ( ^COORDITEMS(#1,#2[maj:~]) &  COORDITEMS(#3,#2) & (#1 < #3) & (#3 < #2) &
     ~PREPOBJ(#2,?) & ~DETERM(#2,?) ) ~




// Correction des rattachements adjectivaux (post) en cas de pbmes d'accord
// si nmod post pas d'accord, alors effacer et chercher d'autres rattachements

#ACCORD
1> |NP{?*,#3[last]};PP{?*,?[last]{?*,#3[last]}},
   ?*[fin:~],
   AP{?*,adj#2};verb#2[partpas]|

   if ( ^NMOD(#1,#2) & (#1 < #2) & (#3 < #1)  &
        // mod de type adj ou vpap sans aux ou avec aux "etre"
       ( #2[adj] | ~AUXIL(#2,?) | ( AUXIL(#2,#4) & #4[form:fetre] ) ) 
       // absence d'accord de ce mod
       &
       ( ( 
          (   (#1[sg,pl:~] & #2[sg:~]) | (#1[pl,sg:~] & #2[pl:~]) |
              (#1[masc,fem:~] & #2[masc:~]) | (#1[fem,masc:~] & #2[fem:~])
          )
          & #2[noagr=+]   //marquer qu'il a pas d'accord
          & ~COORDITEMS(?,#1)
         ) | 
         ( COORDITEMS(#4,#1) &
           (
            ( #1[sg:~] & #2[pl:~] ) |
            ( #1[fem:~] & #2[masc:~] ) |
            ( #4[fem:~] & #2[masc:~]  )
           )
          )
        )
      &
      // accord avec le nouveau rattachement
        ( (#3[sg] & #2[sg]) || (#3[pl] & #2[pl]) )
      & ( (#3[masc] & #2[masc]) || (#3[fem] & #2[fem]) )
   )
  NMOD(#3,#2).





///////////////////////////////////////////////////////////////////////////



// MArquahe sujet passif

1> if ( AUXIL[passive](#1,?) & ^SUBJ(#1,#2) ) SUBJ[passive=+](#1,#2)

1> if ( SUBJ[passive](#1[opred],?) & ^OBJ(#1,#2) ) OBJ[spred=+](#1,#2)

// OBJ   pron[dat] + OBJ NP ==> preferer l'OBJ NP => laisser l'OBJ pron en VMOD seulement
1> if ( ^OBJ(#1,#2[pron,dat]) & VMOD(#1,#2) & OBJ(#1,?[pron:~]) ) ~

// sinon, si pas d'autres OBJ, laisser le pron dat en OBJ

1> if ( OBJ(#1,#2[pron,dat]) & ^VMOD(#1,#2) & ~OBJ(#1,?[pron:~]) ) ~


// si OBJ pron[clit,~dat] et OBJ NP, ce dernier est en fait un VMOD[opred]
1> if ( OBJ(#1,#2[pron,acc,dat:~,gen:~]) & ^OBJ(#1,#3[pron:~]) ) 
      VMOD[opred=+](#1,#3)



// Laisse-le-lui : OBJ(Laisse,le)

1> |SC{?*,FV{?*,?#1[last]}},Pron#2[acc,hyph]|
if ( #2[dat:~] | (~OBJ(#1,?) & #1[sn] ) )
OBJ(#1,#2)

// -lui , -en etc.
1> |SC{?*,FV{?*,?#1[last,asn]}},pron*[hyph],Pron#2[dat,hyph];Pron#2[gen,hyph]|
if ( ~OBJ(#1,#2) )
VMOD(#1,#2)



// il est obligé : OBJ_SPRED(est,grand)
1> |SC{?*,FV{?*,?#1[last,copule]}},(adv+),AP{?*,#2[last]}|
if ( ~obj(#1,?) & ~?(?,#2) )
OBJ[spred=+](#1,#2)

// il trouve normal (de parler...) : OBJ_OPRED(est,grand)
#FFFFFF
1> |SC{?*,FV{?*,?#1[last,opred]}},(adv+),AP{?*,#2[last]}|
if ( ~obj(#1,?) & ~?(?,#2) )
OBJ[opred=+](#1,#2)


// ...le chat qu'il décide de voir:  corriger  OBJ(decide,qu') ===> OBJ(voir,qu')
#CORR-OBJ
1> if ( ^OBJ(#1,#2[conjque]) &  VMOD(#1[desvinf],#3[inf]) & PREPOBJ(#3,#4[form:fde])  )
OBJ(#3,#2)


// BUG XIP: ne marche pas sur Guide.3.E4
// MAINTENANT, BUG corrigé
#r-PBME
1> if ( CONNECT(#1,#2) & ~OBJ[propque](?,#1) & OBJ[spred](#1,#3)
       & ADJMOD(#3,#4) & PREPOBJ(#4,#5[form:fde])
      )
  OBJ(#4,#2)




// sujet de verbe gerondif modifieur: Les arbres environnant la ville sont verts.
// ===> SUBJ(environnant, arbres)
//
1> |NP[nosubj:~, closed:+, fonc=fsubj,!noun:!, !pron:!]{?*,#1[last:+]},  
              ?*[verb:~],
              GV[argsubj:~,argsubj=+,!passive:!,!reflexive:!]{?*,#2[last:+]}|
 if (~SUBJ(#2,?) )
 SUBJ(#2,#1)


// NMOD des NUM sur les NOUN
// ex: les trois jeunes filles :   NMOD(trois,filles)
1> |NP{?*,num#1,?*,#2[last]}|
   if (~determ[num](#2,#1) )
   NMOD[num=+](#2,#1)


// VMOD de "ne pas" sur le verb inf
1> |IV{neg#1[nega,psneg],?*,?#2[last]}|
   VMOD[neg=+](#2,#1)

// ADJMOD entre ADV et ADJ
#ADJMOD-M
1> |AP{?*,adv#1,#2[last]}|
   if (~ADJMOD(#2,#1))
   ADJMOD(#2,#1)

// VMOD entre ADV et VERB
#VMOD-M1
1> |adv#1,verb#2|
   if (~?(?,#1))
   VMOD(#2,#1)


// ADVMOD entre ADV et ADV
1> |AP{?*,adv#1,adv#2}|
   if (~ADVMOD(#2,#1))
   ADVMOD(#2,#1)

// PREPMOD entre ADV et PREP : Peu avant 8h, il....
1> |adv#1,PP{prep#2[form:~fde,form:~fa]}|
   if (~?(?,#1))
   PREPMOD(#2,#1)


// COORD entre NUM
1> |num#1,coord#2,num#3|
   COORDITEMS(#1,#3)


// COORD entre IV
1> |IV{?*,#1[last]},COORD#2,(adv*),IV{?*,#3[last]}|
   if ( ~?(?,#1) |  ~?(?,#3) )
   COORD(#2,#1,#3)


// COORD entre ADJ
1> |AP{?*,adj#1,(adv;punct)*,coord#2,?*[adj:~],adj#3[last]}|
   if (~COORDITEMS(#1,#3) )
   COORD(#2,#1,#3)



// CONNECT entre conj et verb fini
1> |BG{conj#1},?*,FV[last]{?*,#2[last]}|
 if (~CONNECT(#2,#1))
 CONNECT(#2,#1)

// CONNECT entre conj et verb (partpas normalement)
1> |conj#1,?*[verb:~],verb#2|
 if (~CONNECT(#2,?))
 CONNECT(#2,#1)


/////////////////////////////////
// ICI, MARQUAGE TRAITS necessaires
/////////////////////////////////

1> if ( ^CONNECT(#1,#2) & OBJ(?,#2) & #2[pron=+,rel=+] )
  CONNECT[rel=+](#1,#2)

1> if ( ^CONNECT(#1[sn:+,fin],#2) & ~OBJ(#1,?) & ~VMOD(#1[desvinf],#3[inf]) & #2[pron=+,rel=+] )
  CONNECT[rel=+](#1,#2)



1> if ( ^CONNECT(#1[sn:+,fin],#2) & OBJ(#1,#3[verb,sn]) & ~OBJ(#3,?) & 
        #2[pron=+,rel=+] )
  CONNECT[rel=+](#1,#2)


1> |SC{?*,FV{neg,?*,?#1[last]}},(?+[queP:~]),conjque#2[pron:~]|
if ( ~CONNECT(?,#2) & #2[neg=+] )
VMOD[neg=+](#1,#2)



// CORRECTION de COREF dans le cas ou le pron relative est immediatement precede
// d'une COORD l'antecedent est le sujet d'une relative

1> |NP{?*,#1[last:+]};PP{?*,?[last]{?*,#1[last:+]}} , 
      ?*[noun:~,prep:~,pron:~], SC[rel], ?*[noun:~,prep:~,pron:~],
        NP{?*,#2[last:+]};PP{?*,?[last]{?*,#2[last:+]}},
        ?*[noun:~,prep:~,pron:~],
        COORD,
    SC[fonc:~]{ BG{?*,#3[pron:+,rel:+,last:+,terminal]};
	        BG{?*,?[last:+]{?*,#3[rel:+,last:+]}}}|
   if ( ^COREF(#2,#3) )
      COREF[rel=+](#1,#3).



// calcul d'un antecedent aux pron rels qui n'en ont pas (que)

1> |NP{?*,#1[last:+]};PP{?*,?[last]{?*,#1[last:+]}} , 
		?*[noun:~,prep:~,pron:~],
    SC{ BG{?*,#2[pron:+,rel:+,last:+,terminal]};
	        BG{?*,?[last:+]{?*,#2[rel:+,last:+]}}}|
   if ( CONNECT[rel](?,#2) & ~COREF(?,#2) )
   COREF[rel=+,posit1=+](#1,#2).



// SUBJ d'une relative
1> if ( CONNECT[rel](#1,#2[nom,rel]) & ~SUBJ(#1,?) )
        SUBJ(#1,#2)

// OBJ[spred] d'un relative "l'homme qu'il est"
1> if ( CONNECT[rel](#1[form:fetre,sn],#2[conjque,pron,rel]) & ~OBJ(#1,?) )
        OBJ[spred=+](#1,#2)

// OBJ d'une relative : le lait qu'il boit
1> if ( CONNECT[rel](#1[sn],#2[conjque,pron,rel]) & ~OBJ(#1,?) )
        OBJ(#1,#2)

// dont NMOD d'un NP qui le suit
// "l'homme dont la paleur" -> NMOD(paleur,dont) )
1> |BG{pron#1[dat,gen,rel,last]},adv*,NP{?*,#2[last]}|
  NMOD(#2,#1)


// VMOD d'une relative : le lait qu'il boit
1> if ( CONNECT[rel](#1,#2[pron]) & ~NMOD(?,#2) & ~VMOD(#1,#2) & (#2[gen] | #2[dat] | PREPOBJ(#2,?) ) )
        VMOD(#1,#2)


// OPRED OPRED
// VMOD predicat de l'objet : je la crois intelligente => VMOD[pred](crois,intelligente)
1> |SC{?*,FV{?*,#1[last]}};IV{?*,#1[last]};GV{?*,#1[last]},adv*,AP{?*,#2[last]}|
 if ( ~?(?,#2) & #1[opred,sadj] & OBJ(#1,#3) )
  VMOD[opred=+](#1,#2)


//#YAYAY1
//1> |SC{?*,FV{?*,#1[last]}};IV{?*,#1[last]};GV{?*,#1[last]},
//    adv*,(NP),adv*,PP{prep[form:fde],NP{?*,#2[last,time:~]}}|
// if ( #1[opred] & OBJ(#1,#3) & ( VMOD$1[opred:~](#1,#2) | NMOD$1(#3,#2) ) )
//  VMOD[opred=+](#1,#2), ~$1.


//#YAYAY2
//1> |SC{?*,FV{?*,#1[last]}};IV{?*,#1[last]};GV{?*,#1[last]},
//    adv*,(NP),adv*,PP{prep[form:fcomme],NP{?*,#2[last]}}|
// if ( #1[opred] & OBJ(#1,#3) & ( VMOD$1(#1,#2) | NMOD$1(#3,#2) ) )
//  VMOD[opred=+](#1,#2), ~$1.


// Marquage

// vpap n'est pas un adj si il a des dependants noun

1> if ( ?(#1[verb,partpas,adj],#2[noun]) & #1[adj=~] ) ~




///////////////////////////////////
// AJOUTS CH - juin 2009
///////////////////////////////////

Déduction:


// Necessite d'informations precises sur determination et quantification des noms (pour le temps)

| NP{det#1[quant:+,pl:+], det#2[quant:~], ?*, #3[noun]} |
	DETD(#3,#2),
	QUANTD(#3,#1).


| NP{det#1[quant:~,pl:+], ?*, #3[noun]} |
	if ( ~DETD(#3,#1) )
	DETD(#3,#1).
