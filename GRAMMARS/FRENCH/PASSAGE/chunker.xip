
/ the rules in this section define delimiters for input stream: english key word is SPLIT\
// Comented out because in EASY sentences are already defined with <E> and </E>
//DécoupeSéquence:
//|SENT|


Séquence:

//DiRègles:

/=============== AP ========================================\

//1> AP -> (adv+[last:~]),adj[verb:~].
 
//1> AP -> (adv+[last:~]),(punct+[form:fcm,first:~,last:~]),
//        coord[first:~,last:~],adj+[verb:~, last:~], adj[last:+].


1> AP = (adv*),adj[verb:~],punct[form:fcm],(adv*),adj[verb:~],coord,(adv*),adj[verb:~].
1> AP = (adv*),adj[verb:~],coord,(adv*),adj[verb:~].
1> AP = adv,coord,adv,adj[verb:~].
1> AP = (adv+),adj[verb:~].


DiRègles:
/=============== NP ========================================\

/* avec un nom (det ou pas det) *\
2> NP -> (det+[prep:~]),(coord+[first:~,last:~]),(num+),
        (punct+[first:~,form:fcm]),(punct+[first:~,form:fquotes]),
        (AP+[first:~]),
        noun[last:+,proper:~].

2> NP -> (det+[prep:~]),(coord+[first:~,last:~]),num+,
        (punct+[first:~,form:fcm]),(punct+[first:~,form:fquotes]),
        adv,(AP+[first:~]),
        noun[last:+,proper:~].

/* only adj + noun, with no det, should not follow a noun
   or should not be time:+  *\

2> NP -> |?[noun:~]| AP[first:+],
        noun[last:+,proper:~].

2> NP -> || AP[first:+],
        noun[last:+,proper:~].

2> NP -> AP[first:+],
        noun[last:+,proper:~,time:~].

/* with a det and an adj *\
2> NP -> det+[prep:~],(coord+[first:~,last:~]),(num+),
        (punct+[first:~,form:fcm]),(punct+[first:~,form:~]),
        AP[last:+].
2> NP -> det+[prep:~],(coord+[first:~,last:~]),(num+),
        (punct+[first:~,form:fcm]),(punct+[first:~,form:~]),
        adj[last:+].

/* pronouns *\
2> NP[pron:+,nom:+,clit:!] -> pron[nom:+,prep:~,rel:~,!clit:!].
2> NP[pron:+,nom:+] -> pron[def:+,prep:~,rel:~].
2> NP[pron:+,nom:+,dem:+] -> pron[dem:+,prep:~,rel:~].
2> NP[pron:+,nom:+,poss:+] -> pron[poss:+,prep:~,rel:~].
2> NP[pron:+,nom:+,quant:+] -> pron[quant:+,prep:~,rel:~].

2> NP -> (det+[prep:~]),(coord+[first:~,last:~]),num+[last:+].
2> NP -> det[prep:~].


2> NP -> (det+[prep:~]),(noun+[last:~,tit:+]),(noun+[last:~,maj:+,person:+]),
        (noun+[last:~,proper:+,person:+]),noun[last:+,proper:+,person:+].

2> NP -> (det+[prep:~]),(noun+[last:~,maj:+,person:~]),
        (noun+[last:~,proper:+,person:~]),noun[last:+,proper:+,person:~].


2> NP -> (det+[prep:~]),(noun+[last:~,tit:+]),(noun+[last:~,maj:+]),
        (noun+[last:~,proper:+]),noun[last:+,maj:+].



2> NP -> det+[prep:~],(AP+),(noun+[last:~,proper:+,person:+]),
        (noun+[last:~,maj:+,person:+]),
        noun[last:+,proper:+,person:+].

2> NP -> det+[prep:~],(AP+),(noun+[last:~,proper:+,person:~]),
        (noun+[last:~,maj:+,person:~]),
        noun[last:+,proper:+,person:~].

2> NP -> det+[prep:~],(AP+),(noun+[last:~,proper:+]),
        (noun+[last:~,maj:+]),
        noun[last:+,maj:+].




/=============== PP ========================================\

3> PP -> NP[prep:+,!closed:!,!noun:!,!pron:!].

3> PP -> prep+[pron:~],(adv+[first:~]),(coord+[first:~]),
        NP[last:+,!closed:!,!noun:!,!pron:!,!time:!].

3> PP -> prep+[pron:~], (coord+[first:~]), 
        (punct+[first:~]),NP[last:+,!closed:!,!noun:!,!pron:!,!time:!].

3> PP[noun=+] -> prep+[pron:~],AP[last:+].

3> PP[pron=+] -> prep+[pron:~],(adv+[first:~,int:~]),(coord+[first:~]),
        (punct+[first:~]),pron[last:+,clit:~,!closed:!].

4> PP[adv=+] -> prep[first],adv[last,coordadv:~].

// 3> PP[det=+] -> prep[form:fde,first],num,prep[form:fa],num,()


/--------------- VERB rules ----------------\ 

/-- Finite Verb clusters --\


4> FV[verb:+] ->
        (neg[first:+]),(adv[psneg:+,first:~]),
        (pron+[nom:~,dem:~,poss:~,rel:~]),
        (punct+[first:~]),
        (adv+[first:~]),
        verb[inf:~,partpre:~,partpas:~,last:+].


4> FV[verb:+] -> (neg[last:~]),(adv[psneg:+,first:~,last:~]),
        (pron+[nom:~,dem:~,poss:~,rel:~,last:~]),
        (np+[clit:+,first:~,last:~]),
        (punct+[first:~,last:~]),
        (adv+[first:~,last:~]),
        verb[aux:+,inf:~,partpre:~,partpas:~],(verb+[aux:+,partpas:+]).


4> FV[verb:+] -> (neg[last:~]),(adv[psneg:+,first:~,last:~]),
        (pron+[nom:~,dem:~,poss:~,rel:~,last:~]),
        (np+[clit:+,first:~,last:~]),
        (np[first:~,pron:+,quant:+]),
        (punct+[first:~,last:~]),
        (adv+[first:~,last:~]),
        verb[aux:+,inf:~,partpre:~,partpas:~], (verb+[aux:+,partpas:+]),
        verb[partpas:+,last:+].


/-- Infinite Verb clusters --\

3> IV[verb:+,inf:+] ->
        (prep[first:+]),(neg[last:~]),(adv[psneg:+,first:~]),
        (pron+[nom:~,poss:~,rel:~,hyph:~]),(punct+[first:~,last:~]),
        (adv+[first:~,last:~]),
        verb[inf:+,last:+].

4> IV[verb:+,inf:+] ->
        (prep[first:+]),(neg[last:~]),(adv[psneg:+,first:~]),
        (pron+[nom:~,poss:~,rel:~,hyph:~]),(punct+[first:~,last:~]),
        (adv+[first:~,last:~]), (np[first:~]),
        verb[inf:+,last:+].

3> IV[verb:+,inf:+] ->
        (prep[first:+,last:~]),(neg[last:~]),(adv[psneg:+,first:~,last:~]),
        (pron+[nom:~,poss:~,rel:~,hyph:~,last:~]),
        (punct+[first:~,last:~]),(np[first:~,last:~]),
        (adv+[first:~,last:~]),
        verb[aux:+,inf:+],(verb+[aux:+,partpas:+]).

3> IV[verb:+,inf:+] ->
        (prep[first:+]),(neg[last:~]),(adv[psneg:+,first:~]),
        (pron+[nom:~,poss:~,rel:~,hyph:~]),(punct+[first:~,last:~]),
        (adv+[first:~,last:~]), (np[first:~]),
        verb[aux:+,inf:+],(verb+[aux:+,partpas:+]),
        verb[partpas:+,last:+].

/-- Pres. Participle Verb clusters --\

3> GV[verb:+,partpre:+] ->
        (prep[first:+,form:fen]),(neg),(adv[psneg:+,first:~]),
        (pron+[nom:~,poss:~,rel:~]), (punct+[first:~,last:~]),
        (adv+[first:~,last:~]), verb[partpre:+,last:+].

3> GV[verb:+,partpre:+] ->
        (prep[first:+,form:fen]),(neg),(adv[psneg:+,first:~]),
        (pron+[nom:~,poss:~,rel:~]),
        (punct+[first:~,last:~]),
        (adv+[first:~,last:~]),
        verb[aux:+,partpre:+],(verb+[aux:+,partpas:+]).

3> GV[verb:+,partpre:+] ->
        (prep[first:+,form:fen]),(neg),(adv[psneg:+,first:~]),
        (pron+[nom:~,poss:~,rel:~]),
        (punct+[first:~,last:~]),
        (adv+[first:~,last:~]),
        verb[aux:+,partpre:+],(verb+[aux:+,partpas:+]),
        verb[partpas:+,last:+].


/------------ SC rules --------\


/== Sentence boundaries 1 ===\


5> BG -> conjque[first:+]   |np[pron:+,nom:+,dem:~,ton:~]| .
5> BG -> conjque[first:+]   |adv*,fv| .
5> BG -> |?[verb:+,neg:~], ?*[verb:~,compar:~]| (coord), conjque[last:+].
5> BG -> |?[start:+,neg:~,compar:~],?*[verb:~,compar:~]| conjque.

5> BG -> conj[compar:~, first:+]  |np[pron:+,nom:+,dem:~,ton:~]|. 
5> BG -> conj |adv*,fv| .
5> BG -> conj[form:fcomme] |NP*,FV| .

5> BG -> coord  |np[pron:+,nom:+,dem:~,ton:~],?[conjque:~]|. 
5> BG -> coord  |punct*[form:fcm];adv*,fv|. 

5> BG -> |?[form:~fcm]|  punct[form:fhyph]   |np[pron:+,nom:+,dem:~,ton:~]|. 
5> BG[!form=fopar] -> punct[form:fopar]   |np[pron:+,nom:+,dem:~,ton:~]|. 
5> BG -> punct[form:f2pts]   |(punct),adv*,np[pron:+,nom:+,ton:~]|. 
5> BG -> punct[form:f2pts]   |punct|. 



5> BG -> pron[rel:+]. 
5> BG -> pp[rel:+]. 
5> BG -> adv[rel:+]. 
5> BG -> adv[int:+] |?[adv:~,inf:~]|.

5> BG -> conj[sub:+,coord:~].

6> BG[!form=fopar] ->  punct[form:fopar] |*[form:~fcpar,scbegin:~],fv|.
6> BG -> punct[form:f2pts]   |?*[scbegin:~],fv|.


/== Sentence boundaries 2 ===\

/* insertions with no finite verbs *\

6> INS -> punct[form:fhyph,first:+],(bg+),
        (np+), (pp+), (adv+), (verb+[partpas:+]),(coord+), (ap+),
        (iv+), (gv+),
        (prep+),(punct+[form:~fhyph]),
         punct[form:fhyph,last:+].

6> INS -> punct[form:fopar,first:+],(bg+),
        (np+), (pp+), (adv+), (verb+[partpas:+]),(coord+), (ap+),
        (iv+),(gv+),
        (prep+),(punct+[form:~fcpar]),
         punct[form:fcpar,last:+].



/-----------------END ID-rules---------------\

PLRègles:

[punct:+,form:fcm] < [coord:+] 

2> [det:+] < [num:+]
2> [det:+] < [adj:+]
2> [det:+] < [noun:+]
2> [adj:+] < [noun:+,proper:+]
2> [coord:+] < [noun:+,proper:+]


Séquence:


7> SC = bg,?*[fin:~, scbegin:~],fv.

8> SC = bg,?*[fin:~, scbegin:~],fv.


/* hyphen: limitations: at least 2 comma between the hyphen and the fv and
   there must be a second hyphen after the fv *\

8> SC = punct[form:fhyph], ?*[fin:~,scbegin:~,form:~fcm], punct[form:fcm],
        ?*[fin:~, scbegin:~], punct[form:fcm],  ?*[fin:~, scbegin:~], fv
        |?*,punct[form:fhyph]|.

/* hyphen: limitations: no comma between the hyphen and the fv and
   there must be a second hyphen after the fv *\

8> SC = punct[form:fhyph], ?*[scbegin:~,form:~fcm], fv |?*,punct[form:fhyph]|. 


/* From the beginning of the sentence to the main FV *\
9> SC = ?[start:+],?*[fin:~,scbegin:~],fv.

/* This seems to be an imperative or subject inversion case *\
9> SC = fv[start:+].

/* hyphen: limitations: no comma between the hyphen and the fv *\
9> SC = punct[form:fhyph], ?*[fin:~, scbegin:~,form:~fcm], fv.



/* coord then no cm then the fv *\
10> SC = coord,?*[fin:~, scbegin:~, form:~fcm],fv.
10> SC = coord,?*[fin:~, scbegin:~],np,?*[fin:~, scbegin:~, form:~fcm],fv.
 
/* coord then AT LEAST one NP (subj) then AT LEAST 2 puncts/cm then FV *\
10> SC = coord,?*[fin:~, scbegin:~], np, ?*[fin:~, scbegin:~],
        punct[form:fcm], ?+[fin:~, scbegin:~], punct[form:fcm],
        ?*[fin:~, scbegin:~],fv.

10> SC = coord,?*[fin:~, scbegin:~], np, ?*[fin:~, scbegin:~],
        punct[form:fcm], ?+[fin:~, scbegin:~], coord,
        ?*[fin:~, scbegin:~],fv.

// COMME + FV
//10> SC = conj,?*[fin:~, scbegin:~, form:~fcm],fv.


/* Last chance: one comma *\
11> SC = punct[form:fcm],*[fin:~,form:~fcm],fv.




/////////////////////////////////
// RE-CHUNKING selon EASY
/////////////////////////////////


// comme

//20> SC = CONJ.



Reconstructeur:

20> conj#1,NP#2[clit:~] = PP{#1,#2}.

// retager "comme" en PREP si c'est un PP
30> PP{conj#1[form:fcomme],?*#2,#3[last]} = PP{prep#1[form=fcomme],?*#2,#3}.

// {PP de 10} {PP à vingt chats} ---> {NP de  à 20 chats}
30> PP{prep#1[form:fde],NP{num#2[first,last]}},PP{prep#3[form:fa],NP{num#4,?*#5,#6[last]}} =
           PP[prd=+,det=+]{#1,NP{#2,#3,#4,#5,#6}}.


// {PP entre 10} {PP et vingt chats} ---> {NP de  à 20 chats}
30> PP{prep#1[form:fentre],NP{num#2[first],coord#3,num#4,?*#5,#6[last]}} =
           PP[det=+]{#1,NP{#2,#3,#4,#5,#6}}.



// Dans les PP, supprimer le niveau AP
40> PP#9{?*#1,AP#2{?*#3,#4[last]},?*#5,#6[last]} = #9{#1,#3,#4,#5,#6}.
40> PP#9{?*#1,AP#2[last]{?*#3,#4[last]}} = #9{#1,#3,#4}.





























