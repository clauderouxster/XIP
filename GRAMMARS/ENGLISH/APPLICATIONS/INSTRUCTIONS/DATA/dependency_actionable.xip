DependencyRules:

| TOP#1{ ?+ } |
    SENT(#1).

//////////////// general grammar correction \\\\\\\\\\\\\\\\\\


//Check the pane on the right, find the DisableTaskMgr value and click on it.
//EMBED_COMPLTHAT(Check,find)
//, SC{FV{find} NP{the DisableTaskMgr value}}

if ( ^EMBED[complthat](#1,#2[begprop]) )
   ~.

//Once you have fully downloaded Oracle (Sun) VirtualBox, install the Oracle (Sun) VirtualBox software.
//SUBJ_PRE(install,VirtualBox)
//SUBJ-N_PRE(install,VirtualBox)
//, FV{install} 

if ( ^SUBJ(#1[begprop],?) )
   ~.

if ( ^SUBJ-N(#1[begprop],?) )
   ~.


//////////////// NOACT \\\\\\\\\\\\\\\\\\\\

//This is perfect for quickly changing poses.
//SUBJ_PRE(is,This)

| #1[vprog,noact=+] |
  ~.

| #1[vprog,noact=~] |
if ( SUBJ(?[noact:~],?[surface:you]) )
   ~.

| #1[vprog,noact=~] |
if ( SUBJ(?[noact:~],?[surface:You]) )
   ~.

| #1[vprog,noact=~] |
if ( $1(?[begprop,noact:~]) )
   ~.


//a verb that is SUBJ

//Formatting the computer means wiping it of all the data that is on it, so you will be performing a clean installation, so that you will be given the option to erase the disk.
//SUBJ_PRE_GERUND(means,Formatting)

| #2[verb,noact=+] |
if ( SUBJ(#1[begprop:~],#2) )
   ~.

// if the Subject is not "you"

| #1[verb,noact=+] |
if ( SUBJ(#1[begprop:~],#2[surface:~you]) )
   ~.

| #1[verb,noact=+] |
if ( SUBJ-N(#1[begprop:~],#2[surface:~you]) )
   ~.

| #1[noact=~,lexical:~] |
if ( SUBJ(#1,#2[surface:You]) )
   ~.

| #1[noact=~,lexical:~] |
if ( SUBJ-N(#1,#2[surface:You]) )
   ~.

| #1[noact=~,lexical:~] |
if ( SUBJ[nfinit](#1,#2) )
   ~.

//You need one that can create ISO files.
//SUBJ_PRE_RELATIV(can,that)
//NUCL_VLINK_MODAL(can,create)

| #3[noact=+] |
if ( SUBJ[relativ](#1,#2) & NUCL[vlink](#1,#3) )
   ~.


// progressive
//These can be useful for programs that refuse to close, or are causing serious problems on your computer.
//VDOMAIN_PROGRESS(causing,are)

| #1[noact=+] |
if ( VDOMAIN[progress](#1,#2) )
   ~.

//Once clicked, Setup will begin loading the files it needs to continue.
//SUBJ-N_PRE(begin,Setup)
//MOD_POST_GERUND(begin,loading)

| #3[noact=+] |
if ( SUBJ-N(#1,#2[surface:~you]) & MOD[post,gerund](#1,#3) )
   ~.

| #3[noact=~,lexical:~] |
if ( SUBJ-N(#1,#2[surface:You]) & MOD[post,gerund](#1,#3) )
   ~.

//These should be correct already as they are linked to your BIOS, but you can change them now if they are not.
//VDOMAIN_PASSIVE(linked,are)
//SUBJ_PRE(are,they)

| #3[noact=+] |
if ( SUBJ(#1,#2) & VDOMAIN[passive](#3[surface:~you],#1) )
   ~.

| #3[noact=~,lexical:~] |
if ( SUBJ(#1,#2) & VDOMAIN[passive](#3[surface:You],#1) )
   ~.


//This means you've done it right.
//EMBED_COMPLTHAT(done,means)

| #1[noact=+] |
//if ( ^EMBED[complthat](#1,#2[lemme:mean]) )
if ( ^EMBED(#1,#2[lemme:mean]) )
   ~.

/
//While it seems unusual using a disable tool to enable, this is the correct way to change your settings for enabling.
//EMBED_INFINIT(change,is)
//SUBJ_PRE(is,this)

| #3[noact=+] |
if ( SUBJ(#1,#2[lemme:this]) & EMBED(#3,#1) )
   ~.
\

//Type Dxdiag in the space labeled Search Programs and Files.
//MOD_POST_PASTPART(space,labeled)

| #2[noact=+] |
if ( MOD[post,pastpart](#1,#2[bf:~,begprop:~]) )
   ~.

// When you format a computer, you will lose all of your files and data.
//SUBJ_PRE(will,you)
//NUCL_VLINK_MODAL(will,lose)
//MOD_PRE(format,When)


| #3[noact=+] |
if ( SUBJ(#1[lemme:will],#2) & NUCL[vlink](#1,#3) )
   ~.

| #1[noact=+] |
if ( MOD[pre](#1,#2[lemme:when]) )
   ~.

//A pop-up should come up, saying that, for these changes to take effect, you must restart your computer.
//MOD_POST_INFINIT(changes,take)


| #2[noact=+] |
if ( MOD[post,infinit](#1,#2) )
   ~.


/
//Any files including documents, music, pictures, and videos that you want to save need to be copied to a backup location.
//OBJ_POST_INFINIT(want,save)

| #1[noact=+] |
if ( OBJ[post,infinit](#1,#2) )
   ~.

| #2[noact=+] |
if ( OBJ[post,infinit](#1,#2) )
   ~.

// exceptions: need

| #2[noact=~,lexical:~] |
if ( OBJ[post,infinit](#1[lemme:need],#2) )
   ~.
\
// exceptions: you will be asked/prompted, etc. to do sg
//You will be prompted to confirm your Language, Time & Currency format, and Keyboard or input method.
//OBJ_POST_INFINIT(prompted,confirm)
//SUBJ_PRE_NFINIT(confirm,You)

| #2[noact=~,lexical:~] |
if ( OBJ[post,infinit](#1,#2) & SUBJ[nfinit](#2,#3[lemme:you]) )
   ~.

//-ing verbs are noact if their subject is other than you





//////////////// NOTHEME \\\\\\\\\\\\\\\\\\\\

// if the Object is "you"

| #2[notheme=+] |
if ( OBJ(#1,#2[surface:you]) )
   ~.

| #2[notheme=+] |
if ( OBJ-N(#1,#2[surface:you]) )
   ~.

| #1[lemme:this,notheme=+] |
  ~.


//////////////// ACT, THEME, PLACE \\\\\\\\\\\\\\\\

//Check the pane on the right, find the DisableTaskMgr value and click on it.
//, SC{FV{find} NP{the DisableTaskMgr value}} 

| sc{fv{#1[noact:~]}, np{?+,#2[last,notheme:~]}} |
if ( ~ACT(#1) & ~THEME(#2) )
    ACT(#1), THEME(#2), INSTRUCTION(#1,#2).

//Insert another network SIM card into the phone, then turn it on.
//SC{FV{Insert}} NP{another network SIM card}
//MOD_POST(Insert,phone)

| sc{fv{#1[noact:~]}}, np{?+,#2[last,notheme:~]} |
if ( ~ACT(#1) & ~THEME(#2) )
    ACT(#1), THEME(#2), INSTRUCTION(#1,#2).

//Type in the desired username, you MUST know the exact username your the person uses to login/out.
//{SC{FV{Type}} PP{in NP{the AP{desired} username}}
//MOD_POST(Type,username)

| sc{fv{#1[noact:~]}}, pp{?, np{?*, #2[last,notheme:~]}} |
if ( ~ACT(#1) & ~THEME(#2) & MOD[post](#1,#2) )
    ACT(#1), THEME(#2), INSTRUCTION(#1,#2).

//Choose the Run option then find for the rectangle where you type in information.
//then FV{find} PP{for NP{the rectangle}}
//BNF_POST(find,rectangle)


| fv{#1[begprop,noact:~]}, pp{?+, np{?*, #2[last,notheme:~]}} |
if ( ~ACT(#1) & ~THEME(#2) & $1(#1,#2) ) 
    ACT(#1), THEME(#2), INSTRUCTION(#1,#2).


| sc{fv{#1[noact:~]}}, pp{?+, #2[last,notheme:~]} |
if ( ~ACT(#1) & ~THEME(#2) & MOD[post](#1,#2) )
    ACT(#1), THEME(#2), INSTRUCTION(#1,#2).


//Navigate over to the following branch:
//{SC{FV{Navigate}} over PP{to NP{the AP{following} branch}}
//RESULT_POST(Navigate,branch)

if ( ~ACT(#1) & ~THEME(#2) & RESULT(#1[noact:~],#2) )
    ACT(#1), THEME(#2), INSTRUCTION(#1,#2).

//Find the option reading Remove Task Manager and double click on it.


//Use the Three Finger Salute (CTRL-ALT-DELETE) to get past the security window.
//OBJ-N(Use,Salute)
/
if ( OBJ-N(#1,#2[pron:~]) & ~ACT(#1) & ~THEME(#2) )
   ACT(#1), THEME(#2), INSTRUCTION(#1,#2).
\


//To do this, go to Finder and type 'photo booth' in the search bar.
//, FV{go} PP{to NP{Finder}}
//MOD_POST(go,Finder)

| fv{#1[noact:~,begprop]}, pp{?+, ?{?*,#2[last,notheme:~]}} |
if (  ~ACT(#1) & ~THEME(#2) & MOD[post](#1,#2) )
   ACT(#1), THEME(#2), INSTRUCTION(#1,#2).
   

if ( OBJ[sentence:~](#1[noact:~],#2[notheme:~]) & ~ACT(#1) & ~THEME(#2) )
   ACT(#1), THEME(#2), INSTRUCTION(#1,#2).


if ( ACT(#1) & MOD[post,infinit:~](#1,#2) & PREPD(#2,?[lemme:~until]) & ~THEME(#2) )
    PLACE(#2).


if ( ACT(#1) & MOD[post,infinit:~](#1,#2) & PLACE(#2) & ^INSTRUCTION(#1,#3) )
    INSTRUCTION(#1,#3,#2).


//Insert another network SIM card into the phone, then turn it on.
//THEME(card)
//SUBJ-N(turn,SOMEONE)
//OBJ_POST(turn,it)

if ( THEME(#1) & SUBJ-N(#2[noact:~],#3[lemme:SOMEONE]) & OBJ(#2,#4[pron]) )
    ACT(#2), INSTRUCTION(#2,#1).

//Insert a SIM card from another network, then press the Power key.
//SUBJ-N_PRE(press,card)
//OBJ_POST(press,key)
//THEME(card)

if ( THEME(#1) & ^SUBJ-N(#2,#1) )
    ~.


/////////////////// COMMAND NAMES \\\\\\\\\\\\\\\\\\\\

//Double Click My Computer.
//VERB{Double_FORACT:+ Click_COMMANDBEG:+} NP{My Computer} 

| verb#1{#2[foract=~],#3[commandbeg=~]}, np#4{?[maj],?*}  |
if ( ~INSTRUCTION(#1,?) & ~INSTRUCTION(#1,?,?) )
   INSTRUCTION(#1,#4).



//Select Boot Hard Disk (Primary Master) and select Create[commandbeg] new hard disk then click next.
//Select Boot Hard Disk (Primary Master) and select Create new hard disk then click next.

| #1[foract,verb,noact:~] |
if ( ~ACT(#1) )
   ACT(#1).

| #2[commandbeg] |
if ( ACT(#1[foract]) & ~INSTRUCTION(#1,?) & ~INSTRUCTION(?,#2) & ~INSTRUCTION(?,#2,?) & ~INSTRUCTION(#1,?,?) & #1 < #2 )
   INSTRUCTION(#1,#2).
   






/////////////////// INSTRUCTIONS \\\\\\\\\\\\\\\\ 
/
if ( ^$1(#1) & DETD(#1,#2[def]) )
    $1[def=+](#1).

if ( ^$1(#1[symbol]) )
    $1[def=+](#1).
\

/////////////////// extension \\\\\\\\\\\\\\
/

| pp#3 |
if ( ^INSTRUCTION(#1,#2) & HEAD(#2,#3) )
   INSTRUCTION(#1,#3).

if ( ^INSTRUCTION(#1,#2,#3) & HEAD(#2,#4) )
   INSTRUCTION(#1,#4,#3).

| pp#4 |
if ( ^INSTRUCTION(#1,#2,#3) & HEAD(#3,#4) )
   INSTRUCTION(#1,#2,#4).

\


| #2[lastword=+] |
if ( INSTRUCTION(#1,#2) )
   ~.

| #1[firstword=+] |
if ( INSTRUCTION(#1,#2) )
   ~.

| #1[firstword=+] |
if ( INSTRUCTION(#1,#2,#3) )
   ~.

| #3[lastword=+] |
if ( INSTRUCTION(#1,#2,#3) )
   ~.


// Mark titles

if ( @_xtd.title->Test() & ^SENT(#1) )
   TITLE(#1).

| #1[firstword=~] |
if ( TITLE(#2) )
    ~.

| #1[lastword=~] |
if ( TITLE(#2) )
    ~.

