tagging: 

1> ?[mental,fromlex] = ?[mentalfromlex=+].

1> ?[scope,fromlex] = ?[scopefromlex=+].

1> ?[infdeict,fromlex] = ?[deictfromlex=+].

1> ?[deict,fromlex] = ?[deictfromlex=+].

1> ?[relation,fromlex] = ?[relationfromlex=+].

1> ?[other,fromlex] = ?[otherfromlex=+].


1> noun[contr] = noun[mental=+,rf=+,mentalfromlex=+].

1> verb[contr] = verb[mental=+,rf=+,mentalfromlex=+].

1> ?[mental] = ?[mentscoart=+].

1> ?[scope] = ?[mentscoart=+].

1> ?[art,noun,pl] = ?[mentscoart=+].

1> ?[art,verb] = ?[mentscoart=+].

// maj -> scope

1> ?[maj,start:~] = ?[!scope=+,mentscoart=+,rf=+].

1> ?[maj,start,guess] = ?[!scope=+,mentscoart=+,rf=+].

1> ?[proper] = ?[!scope=+,mentscoart=+,rf=+].

// names -> other

1> ?[firstname] = ?[!other=+] .

//1> noun[maj,start:~] = noun[potrefitem=+] | ?[form:fobrack] | .

//1> noun[maj,start:~] = noun[potrefitem=+] | noun[potrefitem] |.

//1> noun[maj,start,guess] = noun[potrefitem=+] | ?[form:fobrack] | .

//1> noun[maj,start,guess] = noun[potrefitem=+] | noun[potrefitem] |.

1> ?[deict,timefact,start:~] = | ?[det,def] | ?[deict=~,rf=~].

1> ?[deict,timefact,start] = ?[deict=~,rf=~].

// [14] upon which

1> ?[form:fwhich] = | dig, ?[form:fcbrack], prep | ?[form:fwhich,scope=+,other=+,mentscoart=+,rf=+] .

// related work

1> ?[infdeict,partpas] = ?[deict=+] | ?[scope] | .

//Figure 7

1> ?[art] = ?[art,deict=+] | dig, ~prep | .

1> dig = | ?[art,deict] | dig[deict=+] | ~prep | .

// starting point 

1> ?[form_vikef:fstarting] = ?[relation=+,rf=+] | ?[lemme:point] | .

1> ?[form_vikef:fpoint] = | ?[relation,rf,form_vikef:fstarting] | ?[relation=+,rf=+] .

// more than

1> ?[form:fmore] = ?[deict=~] | ?[form:fthan] | .

1> ?[form:fmore] = ?[deict=~] | ?[timefact] | .

// words having the feature timefact also have the feature general

1> ?[timefact,future:~] = ?[general=+,rf=+].

1> ?[incr] = ?[general=+,rf=+].


// "the approach we take": mark that "approach" and "we" are in dependency

1> noun = ?[relativenoun=+] | pron[pronpers,personal,nom], verb, ?[noun:~,pron:~] | .

1> pron[pronpers,personal,nom] = | noun[relativenoun] | pron[relativepron=+] .

// following [1], described in [1]

1> dig = | ?[form:fobrack] | dig[scope=+,mentscoart=+,other=+,rf=+] .

1> ?[relation,noun:~] = ?[relation,fordep1=+] | (prep), ?[form:fobrack], dig[scope] |.

1> dig[scope] = | ?[relation,fordep1,noun:~],  (prep), ?[form:fobrack] | dig[scope,fordep1=+] .

// using OWL

1> ?[vprog,rf] = ?[vprog,rf,fordep2=+] | (?), ?[scope] |. 

1> ?[scope] = | ?[fordep2,vprog,rf] , (?) | ?[scope,fordep2=+] . 

// us to translate

1> pron[pronpers,personal,obl] = pron[pronpers,personal,obl,fordep3=+] | ?[form:finfto], verb[bf,pres] |.


1> verb[bf,pres] = | pron[pronpers,personal,obl,fordep3], ?[form:finfto] | verb[bf,pres,fordep3=+] .

// concept-based

1> ?[nohyph] = | ?[form:fhyph] | ?[rf=~,relation=~,comp=~].

// Instead of adopting

1> prep[contr] = prep[contr,fordep4=+] | ?[relation] |.

1> ?[relation] = | prep[contr,fordep4] | ?[relation,fordep4=+] .

// take advantage

1> ?[forrelation] = ?[forrelation,relation=+,rf=+] | ?[forrelation] | .

1> ?[forrelation] = | ?[forrelation,relation,rf] | ?[forrelation,relation=+,rf=+] .

// build on

1> ?[relationwprep] = ?[relationwprep,relation=+,rf=+] | prep | .

// we encode translations using OWL (we,using)

1> ?[ingnoadj] = | pron[nom,deict], (?[aux])*, (?[auxbh])*, (?[verb:~])*, verb[vprog:~], (?[verb:~])* | ?[vprog,ingnoadj,fordep5=+] .

1> pron[nom,deict] =  pron[nom,deict,fordep5=+] | (?[aux])*, (?[auxbh])*, (?[verb:~])*, verb[vprog:~], (?[verb:~])*,  ?[vprog,ingnoadj,fordep5] | .


1> ?[ingnoadj] = | pron[det,deict], noun, (?[aux])*, (?[auxbh])*, (?[verb:~])*, verb[vprog:~], (?[verb:~])* | ?[vprog,ingnoadj,fordep5=+] .

1> pron[det,deict] =  pron[det,deict,fordep5=+] | noun, (?[aux])*, (?[auxbh])*, (?[verb:~])*, verb[vprog:~], (?[verb:~])*,  ?[vprog,ingnoadj,fordep5] | .


// the approach we take is to apply (we,apply)


1> ?[relation] = | pron[nom,deict], (?[aux])*, (?[auxbh])*, (?[verb:~])*, verb[vprog:~], (?[auxbh]), (?[verb:~])* , ?[form:finfto] | ?[bf,verb,relation,fordep6=+] .

1> pron[nom,deict] =  pron[nom,deict,fordep6=+] | (?[aux])*, (?[auxbh])*, (?[verb:~])*, verb[vprog:~], (?[auxbh]), (?[verb:~])*,  ?[form:finfto], ?[bf,verb,relation,fordep6] | .


// not (directly) relevant

1> ?[form:fnot] = ?[form:fnot,fordep7=+] | ( adv ) ,  ?[adj] |.

1> ?[adj] = | ?[form:fnot,fordep7] , ( adv ) |  ?[adj,fordep7=+] .


// more sophisticated capabilities -> (sophisticated,more) & (capabilities,sophisticated)

1> ?[adj] = | ?[form:fmore] | ?[adj,!comp=+,!propagated=+] .

// longer

1> ?[adj,compar] = ?[comp=+].

// shortest

1> ?[adj,sup] = ?[comp=+].

// in CONCORDIA[other=+] [ 10 ]
// introduced_MENTAL:+ in [ 16_OTHER:+_SCOPE:+ ] .)

1> ?[vikef_feat] = ?[other=+] | ( prep ), ?[form:fobrack] , dig | .

//networks like ... = not comparison between works but btw systems

1> ?[form:flike] = | noun[pl] | ?[comp=~,rf=~].

// "not so" and "not as" -> compar

1> ?[form:fnot] = ?[comp=+,rf=+] | ?[form:fso] | .

1> ?[form:fso] = | ?[comp,form:fnot] | ?[comp=+,rf=+].

1> ?[form:fnot] = ?[comp=+,rf=+] | ?[as] | .

1> ?[as] = | ?[comp,form:fnot] | ?[comp=+,rf=+].

// noun that verb -> that takes the features of noun since it refers to it:  procedures that can be instantiated

1> noun = noun[fordep8=+] | ?[form:fthat], verb | .

1> noun = noun[fordep8=+] | ?[form:fthat], aux | .

1> ?[form:fthat] = | noun[fordep8] | ?[form:fthat,fordep8=+] | verb | .

1> ?[form:fthat] = | noun[fordep8] | ?[form:fthat,fordep8=+] | aux  | .

// [ 17 ] can be used : REFNUM + verb -> DEP(verb,ref)

1> dig = | ?[form:fobrack] | dig[fordep90=+] | (punct, dig%[fordep90=+])*, ?[form:fcbrack], (?[comma]), aux%[fordep91=+,other=+] | .

1> dig = | ?[form:fobrack] | dig[fordep90=+] | (punct, dig%[fordep90=+])*, ?[form:fcbrack], (?[comma]), verb[verb,aux:~,fordep91=+,other=+] | .

1> dig = | ?[form:fobrack], dig[fordep90], punct | dig[fordep90=+] | ?[form:fcbrack], (?[comma]), verb[verb,aux:~,fordep91=+,other=+] | .

1> verb[aux:~] = | ?[form:fobrack], dig%[fordep90], (punct, dig%[fordep90=+])*, ?[form:fcbrack], (?[comma]) | verb[fordep91=+,other=+].

1> aux = | ?[form:fobrack], dig[fordep90], ?[form:fcbrack], (?[comma]) | aux[fordep91=+,other=+].

// smoothers[other=+,scope=+] [1][fordep9] allow[fordep9]

1> noun = noun[other=+,scope=+,rf=+,fordep92=+] | ?[form:fobrack], dig[fordep90], (punct, dig)*, ?[form:fcbrack], ?[fordep91] | .

// the ones[scope=+,mentscoart=+] we present; the one[scope=+,mentscoart=+] introduced

1> ?[form:fone] = | det[sg,def] | ?[form:fone,fordep10=+,scope=+,mentscoart=+,rf=+] | (?), ?[mental];?[art] | .

1> ?[mental] = | det[sg,def], ?[form:fone,fordep10,scope,rf], (?) | ?[mental,fordep10=+] .

1> ?[art] = | det[sg,def], ?[form:fone,fordep10,scope,rf], (?) | ?[art,fordep10=+] .

// reported previously

1> ?[partpas] = ?[fordep11=+] | (adv), adv | .

1> adv = | ?[fordep11], (adv) |  adv[fordep11=+] .

1> adv[fordep11] = adv[fordep11=~] | adv[fordep11] | .

// approaches such as

1> noun[pl] = noun[fordep12=+] | ?[lemme:such_as] |.

1> prep[general] = | noun[fordep12] | ?[fordep12=+].

// changed as follows (DEP(changed,follows)

1> verb = ?[fordep13=+] | ?[form:fas], ?[form_vikef:ffollow,pres,sg,p3] | .

1> ?[form_vikef:ffollow,pres,sg,p3] = | ?[fordep13],  ?[form:fas] | ?[fordep13=+] .

// as follows[deict=+]

1> ?[form:fas] = ?[deict=+,rf=+] | ?[form_vikef:ffollow,pres,sg,p3] | .

1> ?[form_vikef:ffollow,pres,sg,p3] = | ?[fordep13] |  ?[deict=+,rf=+] .

// Fuzzy clustering, an explorative signal processing method [2, 3], allows - method allows

1> ?[scopefromlex,noun] = | ?[start], ?*[pres:~,past:~,aux:~] | ?[fordep14=+] | ?*[pres:~,past:~,aux:~], ?[form:fobrack], dig[fordep90] | .

1> ?[scopefromlex,start,noun] = ?[fordep14=+] | ?*[pres:~,past:~,aux:~], ?[form:fobrack], dig[fordep90] | .

// Generally, exploratory data analysis is performed generally - is

1> ?[adv,start,general] = ?[fordep15=+] | ?*[pres:~,past:~,aux:~], verb[pres] | .

1> verb[pres] = | ?[fordep15], ?*[pres:~,past:~,aux:~] | verb[fordep15=+]  .

// has been successfully used (been,used)

1> ?[form:fbe] = ?[fordep16a=+] | adv, ?[partpas] | .

1> ?[partpas] = | ?[fordep16a], adv | ?[partpas,fordep16b=+] .



//////// end of fordep

// used successfully[other=+] in finding differences between ontology versions [11]
// successfully applied to vector quantization and time - series prediction [ 2 ] .)

1> ?[good] = ?[other=+] | (verb[past]), ?*[pres:~,past:~,aux:~], ?[form:fobrack] | .

// Fuzzy clustering, an explorative signal processing method - clustering[forapposition=+]

1> ?[noun] = ?[forapposition=+] | punct[comma], det, ?*[pres:~,past:~,aux:~], ?[fordep14] |.

// in our companion abstract [ 6 ] if PREP(scope,in) -> scope[other=+]

1> ?[noun] = ?[forfeature=+] | ?[form:fobrack], dig | .

// Our edge - based method , Brain Surface Extraction , BSE [ 1 ]

1> ?[scopefromlex] = ?[forfeature=+,other=+] | punct, (?[scope])+, punct,?[forfeature] |.

// the last noun in front of the refnum is very often, but not always, the description of the refnum. We mark it with scope and other, but also with nosure to test

//1> noun[rf:~] = noun[other=+,rf=+,scope=+,mentscoart=+,nosure=+] | ?[form:fobrack], dig | .

// of [1] : [other=+]

1> ?[form:fof] = ?[form:fof,!other=+,!scope=+,mentscoart=+,!rf=+] | ?[form:fobrack], dig | .

// from [1] : [other=+]

1> ?[form:ffrom] = ?[form:ffrom,!other=+,!scope=+,mentscoart=+,!rf=+] | ?[form:fobrack], dig | .

// in [1] : [other=+]

1> ?[form:fin] = ?[form:fin,!other=+,!scope=+,mentscoart=+,!rf=+] | ?[form:fobrack], dig | .

// [ 11 ] which[other=+] provides; [ 2 ] that[other=+] we use 

1> ?[form:fthat] = | dig, ?[form:fcbrack] | ?[form:fthat,other=+,scope=+,mentscoart=+,rf=+] .

1> ?[form:fwhich] = | dig, ?[form:fcbrack], (?[comma]) | ?[form:fwhich,other=+,scope=+,mentscoart=+,rf=+] .

// Figure 7 (which has been adapted 

1> dig = | ?[art] | dig[art=+,deict=+,rf=+] .

//1> ?[form:fwhich] = | ?[scope], (punct) | ?[form:fwhich,scope=+,mentscoart=+,rf=+] .

1> ?[form:fwhich] = | ?[art], dig[art,deict,rf], (punct) | ?[form:fwhich,scope=+,mentscoart=+,rf=+,deict=+] .

// Cohen 's SecondString library[scope=+,mentscoart=+,other=+] [ 14 ]

1> ? = | ?[scope] | ?[other=+,scope=+,mentscoart=+,rf=+] | ?[form:fobrack], dig | .

// there is[exist], there has been 

1> ?[form:fbe] = | ?[form:fthere], ( verb ), ( ?[form:finfto] ) | ?[form_vikef=fthereis] .

//1> ?[form:fbe] = | ?[form:fthere],  ? , ?  | ?[form_vikef=fthereis] .

// come from[relation=+]

1> ?[form_vikef:fcome] = ?[relation=+,rf=+] | ?[form:ffrom] | .

// as[general=+] revealed

1> ?[form:fas] = ?[general=+,rf=+] | ?[partpas,mental,art:~,mentalfromlex,gb] | .

// similarity[comp=~] metric

1> ?[form_vikef:fsimilarity] = ?[vikef_feat=~] | ?[noun] | .

// In [ 3 , 4 ] , we introduced

1> pron[nom,deict] = | ?[start,form:fin], ?[form:fobrack], dig, (punct[comma], dig)*, ?[form:fcbrack], (punct[comma]) | pron[deict=~,other=+,scope=+,selfref=+] .



Sequence:

2> nadj = ?, ?[form:fhyph] , ?[partpas] .

// N -[other=+] Triples notation [ 1 ] for propagation of the other feature to N

//?[form:fhyph] = | ?[scope] | ?[form:fhyph,other=+] | ?[scope,other];?[scope,otherdep] | .

// Ontology Web Language ( OWL ) [ 3 ]: any maj:+ in front of a REFNUM is other=+

2> ?[maj:+] =  ?[maj,other=+] | ?[paren,form:~fobrack,form:~fcbrack], ?[maj], ?[paren,form:~fobrack,form:~fcbrack] , ?[form:fobrack] | .

3> ?[maj,other:~] =  ?[maj,other=+] | ?[maj,other] | .

4> ?[maj,other:~] =  ?[maj,other=+] | ?[maj,other] | .

5> ?[maj,other:~] =  ?[maj,other=+] | ?[maj,other] | .






