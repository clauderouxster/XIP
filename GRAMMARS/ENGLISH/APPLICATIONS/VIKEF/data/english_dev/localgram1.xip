//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2003 Xerox Corporation.  All Rights Reserved.
//!
//! --- CONTENTS ---
//!   Project    : English XIP grammar
//!   filename   : localgram1.xip
//!   Date       : 10/02/2003
//!   Author     : Francois Trouilleux - Caroline Hagege
//!  
//!x
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Tagging:

//Franco-German
1> noun<lemme:Franco> %= nadj[country=+] | punct[form:fhyph,left,right] , nadj[country] |.

/------------ HYPHENS ---------------------------\


Sequence:


/------------Some dig nodes---------------\

/A funny test 
/1> noun[tutu=+] =  noun#1[lemme:"bank%c+"], prep, noun#2,
                             where (#1[lemme]:#2[lemme]).\

// To treat stuff like "T&N" as a unique noun

2> noun[maj:+] = noun[maj,let];meas[maj], noun[lemme="&"],  noun[maj,let];meas[maj]. 

/self-goverment : pass the features of the second noun\

2> noun[mwe:+,features:!] = noun[lemme:self] ,  punct[form:fhyph,left,right], noun[!features:!].

2> noun[mwe:+,features:!] =  noun[!features:!],  punct[form:fhyph,left,right], prep.

2> nadj[mwe:+,nadj:+,adj:+,noun:+,prepers:+] = noun[place:+],  punct[form:fhyph,left,right], verb[lemme:bear];adj[lemme:born].


4> dig = dig[ord], conj[coord], dig[ord,!features:!].


// ADJ{first - choice}, ADJ{second - hand}
5> adj[mwe=+] = num[ord] , punct[form:fhyph,left,right], ? .

//Adj Bio-vascular 
5>  adj[mwe=+,features:!] = adj[!features:!] , punct[form:fhyph,left,right] , adj[!features:!].

5> noun [mwe=+,features:!] = adj[lemme:bio] , punct[form:fhyph,left,right] , noun[!features:!].

5>  nadj[mwe=+,features:!] = nadj[!features:!] , punct[form:fhyph,left,right] , nadj[!features:!].


5> noun[mwe=+,proper=+,maj=+] = adv  , punct[form:fhyph,left,right] , noun[proper,maj].


// three-day summit -> ADJ{three - day}
// 12-year-old -> ADJ{12 - year} - old
// 12-year old -> ADJ{12 - year} old
5> adj[quant=+,meas=+,mwe=+] = num[card,rom:~];dig[ord:~] , 
                               punct[form:fhyph,left,right], 
                               meas; noun[sg]; nadj[adj=~,sg] 
                               | (punct[form:fhyph]), adj;noun;nadj |.

// O'Malley

5> noun[features:!] = noun[lemme:O], punct[quote:+,right:+,left:+], noun[lemme:"%C%c+",!features:!].

/------Some  Proper Name Nodes ------\
/-- with hyphens ... ---\


7> noun[proper=+,mwe=+,firstname:+] = noun[proper,particlename:~,firstname:+],
                    punct[form:fhyph,left,right],
                    ?[guess,maj,orghead:~,orgend:~];noun[proper,orghead:~,orgend:~,celeb:~].

7> noun[proper=+,mwe=+,celeb:+] = noun[proper,particlename:~,firstname:+],
                    punct[form:fhyph,left,right],
                    ?[guess,maj,orghead:~,orgend:~];noun[proper,orghead:~,orgend:~,celeb] .

// three tokens

8> noun[proper=+,mwe=+,org=+] = noun[proper];noun[maj,guess];?[toutmaj], 
                    punct[form:fhyph,left,right],
                    ?[maj],
                    punct[form:fhyph,left,right],
                    noun[orghead] | ?[preporg:~] | . 

8> noun[proper=+,mwe=+] = noun[proper];noun[maj,guess];?[toutmaj], 
                    punct[form:fhyph,left,right],
                    ?[maj],
                    punct[form:fhyph,left,right],
                    ?[guess];noun[proper];noun[let];?[maj].

// To treat elements like Italo-Irish 

8> nadj[mwe:+,country:+] =  noun[proper];noun[maj,guess];nadj[maj],
                         punct[form:fhyph,left,right],
                         nadj[country].

8>  nadj[mwe:+,country:+,maj:+] = nadj[maj,country], punct[form:fslash,right:+,left:+],  nadj[maj,country].

// Iran-Iraq
//8> noun[proper=+,mwe=+,country=+,place=+] = noun[proper,country:+], 
 //       punct[form:fhyph,left,right], 
 //       noun[proper,country].

// Complex firstnames

//special case: first token is a proper name, second is a japanese title like "Sato-san" 



#bizarre
8> noun[proper=+,mwe=+,person=+] =  noun[proper],  punct[form:fhyph,left,right], noun[title:+,toutmaj:~].

8>noun[proper=+,mwe=+,person=+] = noun[maj,guess],  punct[form:fhyph,left,right], noun[title:+,toutmaj:~].


//actor-director
8> noun[mwe:+,features:!] = noun[prof:+,!features:!],  punct[form:fhyph,left,right] , noun[prof:+,!features:!].

// Initials


// first token is a proper name 
8> noun[proper=+,maj=+,org:+] = noun[proper,place:~,particlename:~,prefix:~];noun[maj,guess];?[toutmaj,particlename:~], punct[form:fhyph,left,right],
                   noun[proper,orghead:+] | ?[preporg:~] | .



8> noun[proper=+,maj=+,firstname=+,initial:!] =
   noun[proper:+,place:~,particlename:~,prefix:~,toutmaj:~];noun[maj:+,guess:+,toutmaj:~];
    ?[toutmaj:+,particlename:~,toutmaj:~,!initial:+];noun[maj,initial],
   punct[form:fhyph,left,right],
   ?[guess:+,maj:+,orghead:~,toutmaj:~];
    noun[proper:+,orghead:~,toutmaj:~];noun[let:+,toutmaj:~];noun[maj,initial].




// special case: first token is a proper name, second word is known and lower-case (e.g. Tae-woo)
8> noun[proper=+,mwe=+,maj=+] = | ?[maj,det:~,firstname:~] |
                           noun[proper,particlename:~];noun[maj,guess];?[toutmaj,particlename:~], 
                           punct[form:fhyph,left,right],
                           ?[maj:~].

// first token is a common noun
8> noun[proper=+,mwe=+,maj=+] = noun[maj,proper:~];nadj[maj], 
                           punct[form:fhyph,left,right],
                           ?[guess];noun[proper];noun[let].

// CH - Jan. 2003
//8> noun[mwe=+,proper=+] = | det[def,maj:~] | noun[maj], noun[maj] | ?[maj:~] | .

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Affixes with hyphenation
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// CH 17th September
// Grouping prefixes with base forms

                   


//13> noun[mwe:+]  -> noun+[last:~],
//                    nadj+[last:~],
//                    punct+[form:fhyph,left,right,first:~,last:~],
 //                   noun[last].    

IDRules:



// 56 (899) as a digit : the last element
// can be a parenthesis,
// need to be careful with the overlap with the last rule 


13> dig[mwe=+,date=+] -> dig[first,year,day:~,dec:~],
                         punct[form:fhyph,first:~,last:~],
                         dig[first:~,rom:~,time:~,dec:~],
                         punct[form:fhyph,first:~,last:~],
                         dig[first:~,rom:~,time:~,dec:~].




// digit compounds
// Same rule as after but I need the feature time ...

13> dig[mwe=+,time=+] -> | ?[form:~fslash] | dig[last:~,time:+,rom:~,day:~,dec:~],dig*[last:~,rom:~,dec:~],
                  punct*[form:fopar],
                  punct*[form:fcpar,first:~],
                  punct*[form:fhyph,first:~],
                  dig[last,first:~,rom:~,time:~,dec:~].


// for phone numbers ??? (by Francois)

//13> dig[mwe=+] -> dig+[last:~,rom:~,day:~,dec:~],
  //                punct*[form:fopar],
  //                punct*[form:fcpar,first:~],
       //           punct*[form:fhyph,first:~],
  //                dig[last,first:~,rom:~,time:~,dec:~].
//

//##############################################################
//// VIKEF  CPO Modif

Tagging:


9> adj<lemme:"pd.",maj> %= noun[title=+] |noun[title];noun[proper,toutmaj:~] |.

Marker:
10> noun[maj,proper=+], punct[comma] , noun[firstname].

10> noun+[title], noun+[maj];noun+[proper], punct[comma] , noun[firstname=+,fstnameinvert=+] ,noun[firstname=+,fstnameinvert=+] .

10> noun+[title], noun+[maj];noun+[proper], punct[comma] , noun[firstname=+,fstnameinvert=+] .


Tagging:

11> verb<maj> %= |noun+[title], noun[proper,maj], punct[comma] | noun[firstname=+,fstnameinvert=+,proper=+] | | .

11> noun[maj] =  noun[proper=+] |  punct[comma], noun[maj,initial] | .

11> noun<lemme:"Persia"> %= | noun[proper,guess], punct[comma] |noun[firstname=+,fstnameinvert=+].

11> noun<lemme:"Henning"> = | noun[firstname:+] | noun[firstname=+].

11> prep<lemme:"per",maj> %= |noun[proper],  punct[comma:+] | noun[firstname=+].

11> noun<proper,place> =  | | noun[place=~,city=~.org=~,country=~] | punct[comma:+],  noun[firstname:+];noun[initial:+] |.


11> noun<proper,place,toutmaj:~> = |noun[firstname]|  noun[place=~] | ?[maj:~] |.

11> interj<lemme:"roger",maj> %= noun[firstname].

11> noun<lemme:"Wang"> = noun[bus=~] |punct[comma:+], noun[firstname=+] |.



//Bydgoszcz Poland Ackermann , Dorota Gorzelanczyk , Edward Jacek

11> noun<proper,place,toutmaj:~> = |noun[proper,place:~];noun[title] | noun[place=~] | noun[proper] , punct[comma:+], noun[firstname:+] | .

11> noun<proper,place,toutmaj:~> = |noun[title] , (noun[proper]) |  noun[place=~] | punct[comma:+], noun[firstname:+] | .


11> dig<toutmaj> %= | noun[proper],punct[comma] |  noun[initial=+,maj=+,toutmaj=+,changed=+] | punct | .

11> noun<lemme:Doctor,abr,toutmaj> %= | dig | noun[lemme:"DR",inpostcode=+] |noun[city:+] | .


11>  noun<lemme:"service"> = noun[orgend=~,orghead=+] | prep[preporg] | .

Sequence:

//12> noun[initial=+,maj=+,toutmaj=+] = noun[initial=+,maj=+,toutmaj=+,changed=+],  punct |noun[initial] | .

//Ruhr-Universität

12> noun[maj=+,org=+,place=+,proper=+] @= noun[proper,place], punct[form:fhyph,left,right], noun[orghead], (noun[proper,place]).