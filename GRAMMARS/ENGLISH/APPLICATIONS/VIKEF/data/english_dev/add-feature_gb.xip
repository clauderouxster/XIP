Script:

#no_not

iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[gb=~] ; }
iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[attitude=~] ; }
iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[contr=~] ; }
iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[mental=~] ; }
iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[change=~] ; }
iftest ( MOD[neg](#1[nonot],#2[contr]) ) { #1[wscope=~] ; }

iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[gb=~] ; }
iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[attitude=~] ; }
iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[contr=~] ; }
iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[mental=~] ; }
iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[change=~] ; }
iftest ( MOD(#1[nonot],#2[form:fno]) ) { #1[wscope=~] ; }

iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[gb=~] ; }
iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[attitude=~] ; }
iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[contr=~] ; }
iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[mental=~] ; }
iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[change=~] ; }
iftest ( MOD(#1[nonot],#2[form:fnot]) ) { #1[wscope=~] ; }



// open new avenues

iftest ( OBJ[post](#1[p_open],#2[noun:+]) & $1(#2[noun:+],#3[timefact:+]) ) { #2[scope=+]; #2[gb=+]; }

// X challenge is a term

iftest ( MOD[pre](#1[form_gb:fchallenge],#2[guess]) & ~MOD[pre](#1[form_gb:fchallenge],#3[importance]) & #2~:#3 ) { #1[contr=~,gb=~,nohyph=~,nounary=~,noweak=~] ; }

// first/second challenge is a term

iftest ( $1(#1[form_gb:fchallenge],#2[ord]) & ~MOD[pre](#1[form_gb:fchallenge],#3[importance]) & #2~:#3 ) { #1[contr=~,gb=~,nohyph=~,nounary=~,noweak=~] ; }

iftest ( $1(#1[form_gb:fchallenge],#2[form_gb:ffirst]) & ~MOD[pre](#1[form_gb:fchallenge],#3[importance]) & #2~:#3 ) { #1[contr=~,gb=~,nohyph=~,nounary=~,noweak=~] ; }

iftest ( $1(#1[form_gb:fchallenge,gb:~],#2) & $2(#1,#3) ) { #1[contr=~,gb=~,nohyph=~,nounary=~,noweak=~] ; }

iftest ( $1(#1[form_gb:fchallenge,gb:~],#2) & $2(#3,#1) ) { #1[contr=~,gb=~,nohyph=~,nounary=~,noweak=~] ; }

iftest ( $1(#1,#2[form_gb:fchallenge,gb:~]) & $2(#2,#3) ) { #2[contr=~,gb=~,nohyph=~,nounary=~,noweak=~] ; }

iftest ( $1(#1,#2[form_gb:fchallenge,gb:~]) & $2(#3,#2) ) { #2[contr=~,gb=~,nohyph=~,nounary=~,noweak=~] ; }




// rejection has no features if it doesn't have a definite article. In these cases it is a term e.g. "chronic rejection"


iftest ( DETD(#1[form_gb:frejection],#2[def]) ) { #1[contr=+,gb=+,wscope=+,noweak=+] ; }

// in contrast

iftest ( PREPD(#1[lemme:contrast],#2[lemme:in]) ) { #1[func=~]; }

// getcontr

iftest ( $1(#1[getcontr],#2[contr,func]) ) { #1[contr=+,gb=+]; }

iftest ( $1(#1[contr,func],#2[getcontr]) ) { #2[contr=+,gb=+]; }

// critically evaluated

iftest ( $1(#1[lemme:evaluate],#2[lemme:critically] ) ) { #1[contr=+,gb=+]; }

iftest ( $1(#1[lemme:critically],#2[lemme:evaluate] ) ) { #2[contr=+,gb=+]; }

iftest ( $1(#1[lemme:evaluation],#2[lemme:critical] ) ) { #1[contr=+,gb=+]; }

iftest ( $1(#1[lemme:critical],#2[lemme:evaluation] ) ) { #2[contr=+,gb=+]; }

// if 2 importance words are syntactic relationship, they get the features gb and attitude

iftest ( $1(#1[importance],#2[importance]) ) { #1[attitude=+,nounary=+]; #2[attitude=+,nounary=+]; }

// if a possibility word is negated, it loses its possibility feature

iftest ( $1(#2,#3[form:fnot]) & NUCL(#2,#4[possibility]) ) { #4[possibility=~,gb=~,mentscoposs=~]; }


// if a future word is negated, it loses its future feature

iftest ( $1(#1[future],#2[form:fnot]) ) { #1[future=~]; }


// (has not_cont been)_CONTR

iftest ( $1[leftcontr](#1,#2) ) { #1[contr=+,func=+,negative=+]; }

iftest ( $1[rightcontr](#1,#2) ) { #2[contr=+,func=+,negative=+]; }

// when while is at the benning of a sentence, it loses some features; "while studying" is to be excluded

iftest ( $1(#1[form:fwhile,start,maj],#2[vprog:~]) ) { #1[however=~,func=~,wment=~]; } 

iftest ( $1(#1[vprog:~],#2[form:fwhile,start,maj]) ) { #2[however=~,func=~,wment=~]; } 

iftest ( $1(#1[form:fwhile,start,maj],#2[vprog]) ) { #1[gb=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 

iftest ( $1(#1[vprog],#2[form:fwhile,start,maj]) ) { #2[gb=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 

iftest ( $1(#1[form:fwhile,contr:~],#2) & $1(#1[form:fwhile],#3) ) { #1[gb=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 

iftest ( $1(#1[form:fwhile,contr:~],#2) & $1(#3,#1[form:fwhile]) ) { #1[gb=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 

iftest ( $1(#1,#2[form:fwhile,contr:~]) & $1(#2[form:fwhile],#3) ) { #2[gb=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 

iftest ( $1(#1,#2[form:fwhile,contr:~]) & $1(#3,#2[form:fwhile]) ) { #2[gb=~,contr=~,however=~,func=~,wment=~,mentcont=~]; } 


// "factor" is a level word only when it is in a DETD or QUANNTD relationship

iftest ( DETD(#1[wdet],#2[det]) ) { #1[level=+]; }

iftest ( QUANTD(#1[wdet],#2) ) { #1[level=+]; }

// scope when in dependency with a contr word

iftest ( $1(#1[contr],#2[wnegscope]) ) { #2[gb=+,scope=+,mentsco=+,mentscotime=+,mentscoposs=+]; }
iftest ( $1(#1[wnegscope],#2[contr]) ) { #1[gb=+,scope=+,mentsco=+,mentscotime=+,mentscoposs=+]; }

// mark present perfect as OLD

//iftest ( NUCL(#1,#2[mental]) & NUCL(#3[form:fhave],#1) ) { #2[old=+]; }

iftest ( NUCL(#1,#2[mental]) & NUCL(#3[form:fhave],#1) ) { #1[gb=+,old=+,timefact=+]; }

// general acceptance: general is  "old" 

iftest ( $1(#1[concept],#2[form_gb:fgeneral]) ) { #2[old=+]; }

// in "general role" general is not a timefact

iftest ( $1(#1[scope,gb,specweak,level,weak,nogrow,strong],#2[form_gb:fgeneral]) ) { #2[timefact=~,gb=~,form_gb=~fgeneral]; }