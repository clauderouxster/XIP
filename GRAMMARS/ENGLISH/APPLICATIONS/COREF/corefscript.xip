Variables:


int _sentNb;

string outputFilename = "out.xml";


int fake_arg=0;

xml xmlnode;


////////////////////////////////////////////////////////////////////////////

Initial:

_sentNb = 0;




Script:
 
_sentNb = _sentNb + 1;

//////////////////////////////////////////////////////////////////////////


if ( @_current(/DocLst/DistDoc/ArchiveDoc/Article/HandL/Title/Headline/Para)->test() |
 @_current(/DocLst/DistDoc/ArchiveDoc/Article/HandL/LeadPara/Para)->test() |
 @_current(/DocLst/DistDoc/ArchiveDoc/Article/TailParas/Para)->test()
 ) {
 |Top#1| {
   // coref_process_sentence(#1);
   // if ($1(#2,#3)) {
     // print( "!" + $1 + "(" + #2[Surface] + "," + #3[Surface] + ")\n" );
   // }
 }

}


|Top#1| {
   coref_process_sentence(#1);
   // if ($1(#2,#3)) {
     // print( "!" + $1 + "(" + #2[Surface] + "," + #3[Surface] + ")\n" );
   // }
}

if ( @_current(/DocLst/DistDoc/ArchiveDoc/Article/Copyright)->test() ) {
   _print("##########################New Article\n");
   coref_final(0);
}


///////////////////////////////////////////////////////////////////////////
//   FINAL
//
// store the NPs that could be co-referents with future anaphoric elements


final:

coref_final(1) ;

@db(/DOCUMENT)->setattribute(file,outputFilename) ;

@db()->save(outputFilename,"UTF-8");

@db()->clean();









