//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2006 Xerox Corporation.  All Rights Reserved.
//!
//! --- CONTENTS ---
//!   Project    : english grammar for political risk detection
//!   filename   : dependency-source_pr.xip
//!   Date       : October 2006
//!   Author     : Aude Rebotier, Ágnes Sándor
//!  
//!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

DependencyRules:

// certains verbes sont des verbes de paroles quand ils ont une complétive en that

|#1[saythat, say=+]|
if (^CORE-DRIVE(#1[saythat],#2) & OBJ[sentence](#1,#2))
	CORE-DRIVE(#1,#2)


// les événements dont la source n'est pas exprimée par un emboîtement (ex. according to)
if (PREPD(#1,#2[say]) & (MOD(#3,#1)|(~MOD(?,#1) & MAIN(#3))) & POSSIBLE(#3) & ~POSSIBLE(?,#3))
	POSSIBLE[src=+](#1,#3)

if (PREPD(#1,#2[say]) & (MOD(#3,#1)|(~MOD(?,#1) & MAIN(#3))) & FACTUAL(#3) & ~FACTUAL(?,#3))
	FACTUAL[src=+](#1,#3)

if (PREPD(#1,#2[say]) & (MOD(#3,#1)|(~MOD(?,#1) & MAIN(#3))) & COUNTER-FACTUAL(#3) & ~COUNTER-FACTUAL(?,#3))
	COUNTER-FACTUAL[src=+](#1,#3)


// les événements non emboîtés sans source exprimée
if( FACTUAL(#1) & ~CORE-DRIVE(?,#1) & ~CORE-ANNEX(?,#1) & ~FACTUAL(?,#1))
	FACTUAL(##noun[lemme=0],#1).

if( POSSIBLE(#1) & ~CORE-DRIVE(?,#1) & ~CORE-ANNEX(?,#1) & ~POSSIBLE(?,#1))
	POSSIBLE(##noun[lemme=0],#1).

if( COUNTER-FACTUAL(#1) & ~CORE-DRIVE(?,#1) & ~CORE-ANNEX(?,#1) & ~COUNTER-FACTUAL(?,#1))
	COUNTER-FACTUAL(##noun[lemme=0],#1).

//les événements directement régis par un verbe de parole factuel
// quand l'énonciateur est connu
if ( FACTUAL(#1) & CORE-DRIVE(#2[say],#1) & FACTUAL(#2) & COORDINATE[actor](#2,#3))
	FACTUAL[src=+](#3,#1).

if ( POSSIBLE(#1) & CORE-DRIVE(#2[say],#1) & FACTUAL(#2) & COORDINATE[actor](#2,#3))
	POSSIBLE[src=+](#3,#1).

if ( COUNTER-FACTUAL(#1) & CORE-DRIVE(#2[say],#1) & FACTUAL(?,#2) & COORDINATE[actor](#2,#3))
	COUNTER-FACTUAL[src=+](#3,#1).

// quand l'énonciateur n'est pas connu
if ( FACTUAL(#1) & CORE-DRIVE(#2[say],#1) & FACTUAL(#2) & ~COORDINATE[actor](#2,?) & ~FACTUAL(?,#1))
	FACTUAL[src=+](##noun[lemme=SOURCE],#1).

if ( POSSIBLE(#1) & CORE-DRIVE(#2[say],#1) & FACTUAL(#2) & ~COORDINATE[actor](#2,?) & ~POSSIBLE(?,#1))
	POSSIBLE[src=+](##noun[lemme=SOURCE],#1).

if ( COUNTER-FACTUAL(#1) & CORE-DRIVE(#2[say],#1) & FACTUAL(#2) & ~COORDINATE[actor](#2,?) & ~COUNTER-FACTUAL(?,#1))
	COUNTER-FACTUAL[src=+](##noun[lemme=SOURCE],#1).

// les événements emboîtés dans un événement qui a une source exprimée
// les règles sont en double pour qu'elles puissent s'appliquer à un événement dont le driver est modifié par la même règle
if (FACTUAL(#1) & (CORE-DRIVE(#2[say:~],#1)|CORE-ANNEX(#2,#1)) & $1[src](#3,#2) & ~FACTUAL(?,#1))
	FACTUAL[src=+](#3,#1)
if (FACTUAL(#1) & (CORE-DRIVE(#2[say:~],#1)|CORE-ANNEX(#2,#1)) & $1[src](#3,#2) & ~FACTUAL(?,#1))
	FACTUAL(#3,#1)


if (POSSIBLE(#1) & (CORE-DRIVE(#[say:~]2,#1)|CORE-ANNEX(#2,#1)) & $1[src](#3,#2) & ~POSSIBLE(?,#1))
	POSSIBLE[src=+](#3,#1)
if (POSSIBLE(#1) & (CORE-DRIVE(#2[say:~],#1)|CORE-ANNEX(#2,#1)) & $1[src](#3,#2) & ~POSSIBLE(?,#1))
	POSSIBLE[src=+](#3,#1)

if (COUNTER-FACTUAL(#1) & (CORE-DRIVE(#2[say:~],#1)|CORE-ANNEX(#2,#1)) & $1[src](#3,#2) & ~COUNTER-FACTUAL(?,#1))
	COUNTER-FACTUAL[src=+](#3,#1)

if (FACTUAL(#1) & (CORE-DRIVE(#2[say:~],#1)|CORE-ANNEX(#2,#1)) & $1[src](#3,#2) & ~FACTUAL(?,#1))
	FACTUAL[src=+](#3,#1)
if (POSSIBLE(#1) & (CORE-DRIVE(#2[say:~],#1)|CORE-ANNEX(#2,#1)) & $1[src](#3,#2) & ~POSSIBLE(?,#1))
	POSSIBLE[src=+](#3,#1)

// les événements emboîtés dans un événement qui n'a pas de source exprimée
if ( FACTUAL(#3) & (CORE-DRIVE(#1[say:~],#3)|(CORE-DRIVE(#1[say],#3) & ~FACTUAL(#1))) & ~$1[src](?,#1) & ~FACTUAL(?,#3) )
	FACTUAL(##noun[lemme=0],#3).

if ( POSSIBLE(#3) & (CORE-DRIVE(#1[say:~],#3)|(CORE-DRIVE(#1[say],#3) & ~FACTUAL(#1))) & ~$1[src](?,#1) & ~POSSIBLE(?,#3))
	POSSIBLE(##noun[lemme=0],#3).

if ( COUNTER-FACTUAL(#3) & (CORE-DRIVE(#1[say:~],#3)|(CORE-DRIVE(#1[say],#3) & ~FACTUAL(#1))) & ~$1[src](?,#1) & ~COUNTER-FACTUAL(?,#3))
	COUNTER-FACTUAL(##noun[lemme=0],#3).

if ( FACTUAL(#3) & CORE-ANNEX(#1,#3) & ~$1[src](?,#1) )
	FACTUAL(##noun[lemme=0],#3).

if ( POSSIBLE(#3) & CORE-ANNEX(#1,#3) & ~$1[src](?,#1) )
	POSSIBLE(##noun[lemme=0],#3).

if ( COUNTER-FACTUAL(#3) & CORE-ANNEX(#1,#3) & ~$1[src](?,#1) )
	COUNTER-FACTUAL(##noun[lemme=0],#3).

// on efface les dépendances à un argument
// (Les règles s'appliquent difficilement à plusieurs événements dans la même phrase si on les efface au fur et à mesure)

if (^POSSIBLE(#1) & POSSIBLE(#2,#1))
	~
if (^FACTUAL(#1) & FACTUAL(#2,#1))
	~
if (^COUNTER-FACTUAL(#1) & COUNTER-FACTUAL(#2,#1))
	~








// ancienne version
/
if ( FACTUAL(#1) & CORE-DRIVE(#2[say],#1) )
	FACTUAL[1=+](#2,#1).


if ( CORE-DRIVE(#1,#3) & $1[1](#2,#1) & FACTUAL(#3) )
	FACTUAL[1=+](#2,#1,#3).

if ( FACTUAL(#4) & $1[1](#2,#1,#3) & CORE-DRIVE(#3,#4) )
	FACTUAL[1=+](#2,#1,#3,#4).


if ( POSSIBLE(#1) & CORE-DRIVE(#2[say],#1) )
	POSSIBLE[1=+](#2,#1).


if ( CORE-DRIVE(#1,#3) & $1[1](#2,#1) & POSSIBLE(#3) )
	POSSIBLE[1=+](#2,#1,#3).


if ( POSSIBLE(#4) & $1[1](#2,#1,#3) & CORE-DRIVE(#3,#4) )
	POSSIBLE[1=+](#2,#1,#3,#4).
\
