//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2003 Xerox Corporation.  All Rights Reserved.
//!
//! --- CONTENTS ---
//!   Project    : English XIP grammar
//!   filename   : localgram1.xip
//!   Date       : 10/02/2003
//!   Author     : Francois Trouilleux - Caroline Hagege
//!  
//!x
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Tagging:


// "as soon as possible"


//Franco-German
1> noun<lemme:Franco> %= nadj[country=+] | punct[form:fhyph,left,right] , nadj[country] |.




/------------ HYPHENS ---------------------------\


Sequence:

//Kurt-Schumacher-Strasse

2>  noun[mwe=+,city=+,proper=+,place=+] = noun[city], punct[form:fhyph,left,right],noun[city].

2>  noun[mwe=+,address=+,proper=+,place=+]  = noun[maj], punct[form:fhyph], noun[maj], punct[form:fhyph], noun [lemme:"Strasse"].

// Master-Feeder Fund Limited

2> noun = ?[noun:+,lemme:"master"], punct[form:fhyph,left:+,right:+], ?[noun:+,lemme:"feeder"], noun[lemme:"Fund"], noun[lemme:"Limited"].

//2> adv = conj[lemme:"as_soon_as"], adj[lemme:"possible"] |~noun|.


2> noun[place:+,mwe:+] = dig[lemme:81], noun[lemme:"Theater"].
 
/------------Some dig nodes---------------\

/A funny test 
/1> noun[tutu=+] =  noun#1[lemme:"bank%c+"], prep, noun#2,
                             where (#1[lemme]:#2[lemme]).\

// To treat stuff like "T&N" as a unique noun

2> noun[maj:+] = noun[maj,let];meas[maj], noun[lemme:"&"],  noun[maj,let];meas[maj]. 

/self-goverment : pass the features of the second noun\

2> noun[mwe:+,features:!] = noun[lemme:self] ,  punct[form:fhyph,left,right], noun[!features:!].

2> noun[mwe:+,features:!] =  noun[!features:!,country:~,city:~],  punct[form:fhyph,left,right], prep | ?[left:~,right:~]| .

2> nadj[mwe:+,nadj:+,adj:+,noun:+,prepers:+] = noun[place:+],  punct[form:fhyph,left,right], verb[lemme:bear];adj[lemme:born].

// XT added coord:+
4> dig[coord:+] = dig[ord], conj[coord], dig[ord,!features:!].



// ADJ{first - choice}, ADJ{second - hand}
5> adj[mwe=+] = num[ord] , punct[form:fhyph,left,right], ? .

//Adj Bio-vascular 
5>  adj[mwe=+,features:!] = adj[!features:!] , punct[form:fhyph,left,right] , adj[!features:!].

5> noun [mwe=+,features:!] = adj[lemme:bio] , punct[form:fhyph,left,right] , noun[!features:!].

5>  nadj[mwe=+,features:!] = nadj[!features:!] , punct[form:fhyph,left,right] , nadj[!features:!].


// three-day summit -> ADJ{three - day}
// 12-year-old -> ADJ{12 - year} - old
// 12-year old -> ADJ{12 - year} old
// Removed by XT
// treated in localdates instead
//5> adj[quant=+,meas=+,mwe=+] = num[card,rom:~];dig[ord:~] , 
//                               punct[form:fhyph,left,right], 
//                               meas; noun[sg]; nadj[adj=~,sg] 
//                               | (punct[form:fhyph]), adj;noun;nadj |.

// O'Malley

5> noun[features:!] = noun[lemme:O], punct[quote:+,right:+,left:+], noun[lemme:"%C%c+",!features:!].

/------Some  Proper Name Nodes ------\
/-- with hyphens ... ---\


5> noun[proper:+,mwe:+,maj:+] @= adv[lemme:"al."];noun[lemme:"al",particlename], punct[form:fhyph,left,right], noun[maj].

// XT added constraints about dates (day, month, treated separately)
9> noun[proper:+,mwe:+,maj:+] @= noun[maj,day:~,month:~], punct[form:fhyph,left,right], noun[maj,day:~,month:~] .


// three tokens

8> noun[proper=+,mwe=+] = noun[proper];noun[maj,guess];?[toutmaj], 
                    punct[form:fhyph,left,right],
                    ?[maj],
                    punct[form:fhyph,left,right],
                    ?[guess];noun[proper];noun[let];?[maj].

// To treat elements like Italo-Irish 

8> nadj[mwe:+,country:+] =  noun[proper];noun[maj,guess];nadj[maj],
                         punct[form:fhyph,left,right],
                         nadj[country].

// Iran-Iraq
//8> noun[proper=+,mwe=+,country=+,place=+] = noun[proper,country:+], 
 //       punct[form:fhyph,left,right], 
 //       noun[proper,country].

// Complex firstnames

//special case: first token is a proper name, second is a japanese title like "Sato-san" 

8> noun[proper=+,mwe=+,person:+] =  noun[proper,toutmaj:~];noun[maj,guess,toutmaj:~],  punct[form:fhyph,left,right], noun[title]. 

8> noun[proper=+,mwe=+,firstname:+,maj=+] = noun[proper,particlename:~,firstname:+],
                    punct[form:fhyph,left,right],
                    ?[guess,maj];noun[proper].
//actor-director
8> noun[mwe:+,features:!] = noun[prof:+,!features:!],  punct[form:fhyph,left,right] , noun[prof:+,!features:!].


// first token is a proper name 
// XT added constraints about dates (day, month, treated separately)
8> noun[proper=+,mwe=+,maj=+] = 
	noun[proper,day:~,month:~,place:~,particlename:~,prefix:~];noun[maj,guess,day:~,month:~];?[toutmaj,day:~,month:~,particlename:~], 
        punct[form:fhyph,left,right],
        ?[guess,maj,day:~,month:~];noun[proper,place:~,day:~,month:~];noun[let].




// special case: first token is a proper name, second word is known and lower-case (e.g. Tae-woo)
8> noun[proper=+,mwe=+,maj=+] = | ?[maj,det:~,firstname:~] |
                           noun[proper,particlename:~];noun[maj,guess];?[toutmaj,particlename:~], 
                           punct[form:fhyph,left,right],
                           ?[maj:~].

// first token is a common noun
8> noun[proper=+,mwe=+,maj=+] = noun[maj,proper:~];nadj[maj], 
                           punct[form:fhyph,left,right],
                           ?[guess];noun[proper];noun[let].

// CH - Jan. 2003
//8> noun[mwe=+,proper=+] = | det[def,maj:~] | noun[maj], noun[maj] | ?[maj:~] | .

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Affixes with hyphenation
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// CH 17th September
// Grouping prefixes with base forms
15> nadj[features:!] = ?[prefix:+], punct[form:fhyph,left:+,right:+], nadj[!features:!].

15> adj[features:!] = ?[prefix:+], punct[form:fhyph,left:+,right:+], adj[!features:!].

15> noun[features:!] = ?[prefix:+], punct[form:fhyph,left:+,right:+], noun[!features:!].

15> verb[features:!] = ?[prefix:+], punct[form:fhyph,left:+,right:+], verb[!features:!].


15> dig[mwe:+] =  dig, punct[form:fhyph,first:~,last:~], dig ,  punct[form:fhyph,first:~,last:~] , dig[year:~,shortyear:~].



//Saint-Laurent-sur-mer

16> noun[mwe:+,place:+,org:+]  =  noun[last:~],
                            punct[form:fhyph,left,right,first:~,last:~],
                            nadj[last:~,lemme:"sur"],
                            punct[form:fhyph,left,right,first:~,last:~],
                            noun[lemme:"Mer"].
                   


//13> noun[mwe:+]  -> noun+[last:~],
//                    nadj+[last:~],
//                    punct+[form:fhyph,left,right,first:~,last:~],
 //                   noun[last].    

IDRules:



// 56 (899) as a digit : the last element
// can be a parenthesis,
// need to be careful with the overlap with the last rule 

// Commented by XT (treated in localdates)
//13> dig[mwe=+,date=+] -> dig[first,year,day:~,dec:~],
//                         punct[form:fhyph,first:~,last:~],
//                         dig[first:~,rom:~,time:~,dec:~],
//                         punct[form:fhyph,first:~,last:~],
//                         dig[first:~,rom:~,time:~,dec:~].


// Commented by XT (treated in localdates)
//13> dig[mwe=+,date=+] -> dig[first,dec:~,day],
//                         punct[form:fslash,first:~,last:~],
//                         dig[day],
//                         dig[year,last].

// digit compounds
// Same rule as after but I need the feature time ...

// XT commented because takes 6:30 - 7 p.m .
// and anyway the next one was already commented
//13> dig[mwe=+,time=+] -> | ?[form:~fslash] | dig[last:~,time:+,rom:~,day:~,dec:~],dig*[last:~,rom:~,dec:~],
//                  punct*[form:fopar],
//                  punct*[form:fcpar,first:~],
//                  punct*[form:fhyph,first:~],
//                  dig[last,first:~,rom:~,time:~,dec:~].


// for phone numbers ??? (by Francois)

//13> dig[mwe=+] -> dig+[last:~,rom:~,day:~,dec:~],
  //                punct*[form:fopar],
  //                punct*[form:fcpar,first:~],
       //           punct*[form:fhyph,first:~],
  //                dig[last,first:~,rom:~,time:~,dec:~].
//


Sequence:

// Was previously in localgram2.xip
// Has to be before localdates


// CH
// AS MANY AS | digit | is a quantifier
15> quant[mwe:+] = ?[lemme:as], ?[lemme:many], ?[lemme:as] | ?[card:+] | .
 

// CH
// A COUPLE OF as quantifier
15> quant[mwe:+] = ?[lemme:a], ?[lemme:couple], ?[lemme:of] .
