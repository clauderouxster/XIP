DependencyRules:


/
| IV#3{#1[lemme:to], #2} |
if ( ~TOINF(#3) )
  TOINF(#3).


if ( VMODAL(#1) & ~MODBASE(#1) )
   MODBASE(#1).

if ( PRESENT(#1[p3,sg,lemme:~be]) & ~PRES3SING(#1) )
   PRES3SING(#1).

if ( PRESENT(#1[p3:~,bf,lemme:~be]) & ~PRESN3SING(#1) )
   PRESN3SING(#1).

if ( $1[passive](#1) & PRESENT(#1) & ~PRESPASSIVE(#1) )
   PRESPASSIVE(#1).

if ( $1[passive](#1) & PAST(#1) & ~PASTPASSIVE(#1) )
   PASTPASSIVE(#1).

if ( ~$1[passive](#1) & PAST(#1) & ~PASTTENSE(#1) )
   PASTTENSE(#1).

\

if ( VTENSE[t_pres](#1) & $1[a_simple](#1) & ~SEGMENTVERB[present,simple](#1) )
   SEGMENTVERB[present=+,simple=+](#1).

if ( VTENSE[t_past](#1) & $1[a_simple](#1) & ~SEGMENTVERB[elspast,simple](#1) )
   SEGMENTVERB[elspast=+,simple=+](#1).

if ( VTENSE[t_fut](#1) & $1[a_simple](#1) & ~SEGMENTVERB[future,simple](#1) )
<   SEGMENTVERB[future=+,simple=+](#1).

if ( VTENSE[t_pres](#1) & $1[a_progress](#1) & ~SEGMENTVERB[present,elsprogress](#1) )
   SEGMENTVERB[present=+,elsprogress=+](#1).

if ( VTENSE[t_past](#1) & $1[a_progress](#1) & ~SEGMENTVERB[elspast,elsprogress](#1) )
   SEGMENTVERB[elspast=+,elsprogress=+](#1).

if ( VTENSE[t_fut](#1) & $1[a_progress](#1) & ~SEGMENTVERB[future,elsprogress](#1) )
   SEGMENTVERB[future=+,elsprogress=+](#1).

if ( VTENSE[t_pres](#1) & $1[a_perfect](#1) & ~SEGMENTVERB[present,elsperfect](#1) )
   SEGMENTVERB[present=+,elsperfect=+](#1).

if ( VTENSE[t_past](#1) & $1[a_perfect](#1) & ~SEGMENTVERB[elspast,elsperfect](#1) )
   SEGMENTVERB[elspast=+,elsperfect=+](#1).

if ( VTENSE[t_fut](#1) & $1[a_perfect](#1) & ~SEGMENTVERB[future,elsperfect](#1) )
   SEGMENTVERB[future=+,elsperfect=+](#1).

if ( ^SEGMENTVERB(#1) & MAIN[passive](#1) & ~SEGMENTVERB[passive](#1) )
   SEGMENTVERB[passive=+](#1).

if ( ^SEGMENTVERB(#1) & MAIN[modal](#1) & ~SEGMENTVERB[modal](#1) )
   SEGMENTVERB[modal=+](#1).

//GV{using_METHOD:+_1:+} but no verb

| gv{?*,#1[vprog,last]} |
if ( ~SEGMENTVERB(#1) )
   SEGMENTVERB[elsprogress=+](#1).

| iv{?*,#1[last]} |
if ( ~SEGMENTVERB(#1) )
   SEGMENTVERB[infinitive=+](#1).

// passive: NUCL_VLINK_PASSIVE(are,placed)

if ( ^SEGMENTVERB(#1) & NUCL[passive](#2,#1) )
   SEGMENTVERB[passive=+](#1).

| fv{#1[pres]} |
if ( ~SEGMENTVERB(#1) & NUCL[subjcompl](#1,?) )
   SEGMENTVERB[present=+](#1).


////////////////////

| #1[fact,fact=+,0=+] |
  ~.

| #1[elsgoal,elsgoal=+,0=+] |
  ~.

| #1[hypothesis,hypothesis=+,0=+] |
  ~.

| #1[implication,implication=+,0=+] |
  ~.

| #1[method,method=+,0=+] |
  ~.

| #1[problem,problem=+,0=+] |
  ~.

| #1[result,result=+,0=+] |
  ~.

| #1[texttrans,texttrans=+,0=+] |
  ~.

| #1[transfact,transfact=+,0=+] |
  ~.

| #1[transfact,transfact=+,0=+] |
  ~.

| #1[transgoal,transgoal=+,0=+] |
  ~.

| #1[transhyp,transhyp=+,0=+] |
  ~.

| #1[transimp,transimp=+,0=+] |
  ~.

| #1[transproblem,transproblem=+,0=+] |
  ~.

| #1[transresult,transresult=+,0=+] |
  ~.

///////////////////

| #1[fact1,fact=+,1=+] |
  ~.

| #1[fact2,fact=+,2=+] |
  ~.

| #1[fact3,fact=+,3=+] |
  ~.

| #1[elsgoal1,elsgoal=+,1=+] |
  ~.

| #1[elsgoal2,elsgoal=+,2=+] |
  ~.

| #1[elsgoal3,elsgoal=+,3=+] |
  ~.

| #1[hypothesis1,hypothesis=+,1=+] |
  ~.

| #1[hypothesis2,hypothesis=+,2=+] |
  ~.

| #1[hypothesis3,hypothesis=+,3=+] |
  ~.

| #1[implication1,implication=+,1=+] |
  ~.

| #1[implication2,implication=+,2=+] |
  ~.

| #1[implication3,implication=+,3=+] |
  ~.

| #1[method1,method=+,1=+] |
  ~.

| #1[method2,method=+,2=+] |
  ~.

| #1[method3,method=+,3=+] |
  ~.

| #1[problem1,problem=+,1=+] |
  ~.

| #1[problem2,problem=+,2=+] |
  ~.

| #1[problem3,problem=+,3=+] |
  ~.

| #1[result1,result=+,1=+] |
  ~.

| #1[result2,result=+,2=+] |
  ~.

| #1[result3,result=+,3=+] |
  ~.

| #1[texttrans1,texttrans=+,1=+] |
  ~.

| #1[texttrans2,texttrans=+,2=+] |
  ~.

| #1[texttrans3,texttrans=+,3=+] |
  ~.

| #1[transfact1,transfact=+,1=+] |
  ~.

| #1[transfact2,transfact=+,2=+] |
  ~.

| #1[transfact3,transfact=+,3=+] |
  ~.

| #1[transfact1,transfact=+,1=+] |
  ~.

| #1[transfact2,transfact=+,2=+] |
  ~.

| #1[transfact3,transfact=+,3=+] |
  ~.

| #1[transgoal1,transgoal=+,1=+] |
  ~.

| #1[transgoal2,transgoal=+,2=+] |
  ~.

| #1[transgoal3,transgoal=+,3=+] |
  ~.

| #1[transhyp1,transhyp=+,1=+] |
  ~.

| #1[transhyp2,transhyp=+,2=+] |
  ~.

| #1[transhyp3,transhyp=+,3=+] |
  ~.

| #1[transimp1,transimp=+,1=+] |
  ~.

| #1[transimp2,transimp=+,2=+] |
  ~.

| #1[transimp3,transimp=+,3=+] |
  ~.

| #1[transproblem1,transproblem=+,1=+] |
  ~.

| #1[transproblem2,transproblem=+,2=+] |
  ~.

| #1[transproblem3,transproblem=+,3=+] |
  ~.

| #1[transresult1,transresult=+,1=+] |
  ~.

| #1[transresult2,transresult=+,2=+] |
  ~.

| #1[transresult3,transresult=+,3=+] |
  ~.


/
| TOP#1{ ?+ } |
if ( ^SEGMENTVERB(#2) )
   SEGMENTVERB(#1,#2).
\
/
///////////////////////////////////
//Inheritance of segment types
// inheriting SEGMENTVERBs are the following SEGMENTVERBs in the sentence


if ( SEGMENTVERB(#1) & ^SEGMENTVERB(#2) & #1 < #2  )
   SEGMENTVERB[inherit-type=+](#2).


if ( ^SEGMENTVERB[inherit-type:~](#1) )
   SEGMENTVERB[propagate-type=+](#1).

\
//////////////////////////////////////


if ( ^SEGMENTVERB(#1) & ( SUBJ-N[pre](#1,#2) | EXPERIENCER(#1,#2) ) )
   SEGMENT(#2,#1).

if ( ^SEGMENT(#1,#2) & ~OBJ-N(#2,#3) & MOD[subcat](#2,#4) )
   SEGMENT(#1,#2,#4).

if ( ^SEGMENT(#2,#1) & ( OBJ-N(#1,#3) | NUCL[subjcompl](#1,#3) ) )
   SEGMENT(#2,#1,#3)

if ( ^SEGMENTVERB(#1) & ( OBJ-N(#1,#3) | MOD[subcat](#1,#3) | NUCL[subjcompl](#1,#3) ) & ~SEGMENT(#2,#1,#3) )
   SEGMENT(#1,#3).


//last
if ( ^SEGMENTVERB(#1) )
   SEGMENT(#1).

   





