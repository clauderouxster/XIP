
<project name="buildFstXmlNtmXip" default="usage" basedir=".">
    
    <property name="env" environment="env" value="env"/>
    <property name="common.dir" location="${basedir}/common" />
    <import file="${common.dir}/taskExt.xml" />
    <import file="${common.dir}/platformProperties.xml" />
    <import file="${common.dir}/taskSync.xml" />
    
    <property name="fst.dir"	location="${basedir}/fst/dev" />
    <property name="xml.dir"	location="${basedir}/xml/dev" />
    <property name="ntm.dir"	location="${basedir}/ntm/dev" />
    <property name="xip.dir"	location="${basedir}/xip/dev" />
    <property name="grammars.dir" location="${basedir}/xip/dev/GRAMMARS" />
    
    <property name="win32Host" value="chevreuse" />
    <property name="win64Host" value="mont-dore" />
    <property name="linux32Host" value="choranche" />
    <property name="linux64Host" value="chichet" />     <!-- or sirac -->
    <property name="macOsHost" value="etretat" />
    
    <!-- <property name="hostList" value="${win32Host} ${win64Host} ${linux32Host} ${linux64Host}" /> -->
    <property name="hostList" value=" ${win64Host}  ${linux64Host}" />
    
    <target name="usage" >
        <echo message="ant build:   	clean and compile fst,ntm,xml,xip on the current platform" />
        <echo message="ant debug:   	clean and compile in debug mode fst,ntm,xml,xip on the current platform" />
        <echo message="ant clean:   	clean fst,ntm,xml,xip on the current platform" />
        <echo message="ant cleanAll:   	clean fst,ntm,xml,xip on all platforms" />
        <echo message="" />
        <echo message="ant start:   	must be run on each platform (${hostList}) where compilation will be launch before using ant all" />
        <echo message="ant all:   	clean and compile fst,ntm,xml,xip on all the platforms (${hostList}) + ant install (xip/dev)" />
    </target>

    <target name="build" depends="clean, compile" description=" clean, compile,  only for this platform" />
    
    <target name="compile" depends="init" description="" >
        <delete file="${compileRecFile}" />
        <record name="${compileRecFile}" loglevel="${log.level}" action="start"/>
        <ant antfile="${fst.dir}/build.xml" dir="${fst.dir}" target="compile" inheritAll="false" />
        <ant antfile="${ntm.dir}/build.xml" dir="${ntm.dir}" target="compile" inheritAll="false" />
        <ant antfile="${xip.dir}/build.xml" dir="${xip.dir}" target="default" inheritAll="false" />
        <record name="${compileRecFile}" action="stop"/>
    </target>
    
    <target name="clean" depends="init" description="">
        <delete file="${cleanRecFile}" />
        <record name="${cleanRecFile}" loglevel="${log.level}" action="start"/>
        <ant antfile="${fst.dir}/build.xml" dir="${fst.dir}" target="clean" inheritAll="false" />
        <ant antfile="${ntm.dir}/build.xml" dir="${ntm.dir}" target="clean" inheritAll="false" />
        <ant antfile="${xip.dir}/build.xml" dir="${xip.dir}" target="clean" inheritAll="false" />
        <ant antfile="${xip.dir}/java/build.xml" dir="${xip.dir}/java" target="clean" inheritAll="false" />
        <ant antfile="${xip.dir}/xipui/build.xml" dir="${xip.dir}/xipui" target="clean" inheritAll="false" />
        <record name="${cleanRecFile}" action="stop"/>
    </target>
    
    <target name="cleanAll" depends="cleanLock" description="">
        <ant antfile="${fst.dir}/build.xml" dir="${fst.dir}" target="cleanAll" inheritAll="false" />
        <ant antfile="${xml.dir}/build.xml" dir="${xml.dir}" target="cleanAll" inheritAll="false" />
        <ant antfile="${ntm.dir}/build.xml" dir="${ntm.dir}" target="cleanAll" inheritAll="false" />
        <ant antfile="${xip.dir}/build.xml" dir="${xip.dir}" target="cleanAll" inheritAll="false" />
        <ant antfile="${xip.dir}/java/build.xml" dir="${xip.dir}/java" target="cleanAll" inheritAll="false" />
        <ant antfile="${xip.dir}/xipui/build.xml" dir="${xip.dir}/xipui" target="clean" inheritAll="false" />
    </target>
    
    <target name="debug" depends="" description="">
        <ant antfile="${fst.dir}/build.xml" dir="${fst.dir}" target="compile.debug" inheritAll="false" />
        <ant antfile="${xml.dir}/build.xml" dir="${xml.dir}" target="compile.debug" inheritAll="false" />
        <ant antfile="${ntm.dir}/build.xml" dir="${ntm.dir}" target="compile.debug" inheritAll="false" />
        <ant antfile="${xip.dir}/build.xml" dir="${xip.dir}" target="compile.debug" inheritAll="false" />
    </target>
    
    <target name="all"  depends="cleanAll" 
            description="clean compile for all the platforms: ${hostList}">
        <delete dir="logs" />
        <mkdir dir="logs" />
        <property name="error.file" location="logs/error"/>
        <parallel> 
            <antcall target="linux64Build" />
            <antcall target="win64Build" /> 
            <!--
            <antcall target="linux32Build" />
            <antcall target="macOsBuild" />
            <antcall target="win32Build" />
            -->
        </parallel>
        <antcall target="check" >
            <param name="hostName" value="${linux32Host}"/>
        </antcall>
        <antcall target="check" >
            <param name="hostName" value="${linux64Host}"/>
        </antcall>
        <!--
        <antcall target="check" >
            <param name="hostName" value="${macOsHost}"/>
        </antcall>
        <antcall target="check" >
            <param name="hostName" value="${win32Host}"/>
        </antcall>
        <antcall target="check" >
            <param name="hostName" value="${win64Host}"/>
        </antcall>
        -->
         <echo message="err: ${err} "/>
	 <if>
            <available file="${error.file}"/>
            <then>
		<echo message="error must stop    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" />
		<fail/>
            </then>
	    <else>
		<echo message="no error xxxxxxxxxxxxxxxxxxxxxxxxxxxx" />
	    </else>
        </if>
        <ant antfile="${xip.dir}/build.xml" dir="${xip.dir}" target="install" inheritAll="false" />
    </target>
    
    <target name="check" >
        <if>
            <available file="logs/server.error.${hostName}"/>
            <then>
                <echo message="Error on: ${hostName}" />
            </then>
            <else>
                <echo message="No error on: ${hostName}" />
            </else>
        </if>
    </target>
    
    <target name="linux32Build" description="">
        <antcall target="rmtBuild">
            <param name="rmt.hostName" value="${linux32Host}"/>
            <param name="rmt.dir" value="/opt/ParSem_db/users/${user.name}/parSem"/>
        </antcall>
    </target>
    
    <target name="linux64Build" description="">
        <antcall target="rmtBuild">
            <param name="rmt.dir" value="/opt/ParSem_db/users/${user.name}/parSem"/>
            <param name="rmt.hostName" value="${linux64Host}"/>
        </antcall>
    </target>
    
    <target name="macOsBuild" description="">
        <antcall target="rmtBuild">
            <param name="rmt.dir" value="/Volumes/PARSEM/users/${user.name}/parSem"/>
            <param name="rmt.hostName" value="${macOsHost}"/>
        </antcall>
    </target>
    
    <target name="win32Build" description="">
        <antcall target="rmtBuild">
            <param name="rmt.dir" value="z:\users\${user.name}\parSem"/>
            <param name="rmt.hostName" value="${win32Host}"/>
        </antcall>
    </target>
    
    <target name="win64Build" description="">
        <antcall target="rmtBuild">
            <param name="rmt.dir" value="z:\users\${user.name}\parSem"/>
            <param name="rmt.hostName" value="${win64Host}"/>
        </antcall>
    </target>
    
    <target name="rmtBuild" depends="init" description="">
        <property name="file.client.error" location="logs/client.error" />
        <delete file="${file.client.error}"/>
        <trycatch reference="exception_ref1">
            <try>
                <remoteant machine="${rmt.hostName}" port="${ant.port}" persistant="false" failonerror="true" >
                    <runant dir="${rmt.dir}" antfile="build.xml" target="remoteBuild"  >
                        <property name="hostName" value="${rmt.hostName}"/>
                    </runant>
                </remoteant>
            </try>
            <catch>
                <property name="exception1" refid="exception_ref1" />
                <if>
                    <contains string="${exception1}" substring="java.io.EOFException" />
                    <then>
                        <echo message="Done on ${rmt.hostName}" file="${file.client.error}"/>
                        <echo message="Done on ${rmt.hostName}" />
                    </then>
                    <else>
                        <echo message="Error on ${rmt.hostName}: ${exception1}" file="${file.client.error}"/>
                        <echo message="Error on ${rmt.hostName}: ${exception1}" file="${file.error}"/>
                        <fail message="Error on ${rmt.hostName}: ${exception1}" />
                    </else>
                </if>
            </catch>
            <finally>
            </finally>
        </trycatch>
    </target>
    
    <target name="remoteBuild1" >
        <echo message="sleeping---- on ${hostName}"/>
        <property name="file.server.error" location="logs/server.error.${hostName}" />
        <sleep seconds="5"/>
        <touch file="${file.server.error}"/>
        <fail message="fff"/> <!-- no effect ??? -->
        <echo message="end---- on ${hostName}"/>
    </target>
    
    <target name="remoteBuild" depends="" description=" clean, compile,  only for this platform" >
        <property name="file.server.done" location="logs/server.done.${hostName}" />
        <property name="file.server.error" location="logs/server.error.${hostName}" />
        <delete file="${file.server.done}" />
        <delete file="${file.server.error}" />
        <trycatch reference="exception_ref2">
            <try>
                <echo message="start clean and compile on ${hostName}"/>
                <antcall target="clean"/>
                <antcall target="compile"/>
            </try>
            <catch>
                <property name="exception2" refid="exception_ref2" />
                <echo message="Error on: ${hostName} ${exception2}" file="${file.server.error}"/>
                <fail message="Error on: ${hostName} ${exception2}" />
            </catch>
            <finally>
                <echo message="clean and compile done on: ${hostName} " file="${file.server.done}" />
                <echo message="clean and compile done on: ${hostName} "/>
            </finally>
        </trycatch>
    </target>
    
    <target name="start" depends="init" description="start ant server on current host">
        <antserver port="${ant.port}" />
    </target>
    
    <target name="stop" depends="init" description="stop ant server on current host">
        <remoteant machine="localhost" port="${ant.port}">
            <shutdown/>
        </remoteant>
    </target>
    
    <target name="init" depends="platformSetting" >
        <mkdir dir="logs" />
        <property name="ant.port" value="18000" />
        <!-- Values= {error|warn|info|verbose|debug}  -->
        <property name="log.level" value="info" />
        <property name="compileRecFile" location="logs/${hostname}.compile.log" />
        <property name="cleanRecFile" location="logs/${hostname}.clean.log" />
    </target>
    
    <!--   
    <target name="buildAll" depends="cleanAll" description="">
        <delete file="" />
        <parallel> 
            <antcall target="build.choranche" />
            <antcall target="build.albaron" />
            <antcall target="build.etretat" />
        </parallel>
    </target>
    
    <target name="build.choranche">
        <property name="dir.choranche" location="/opt/ParSem_db/users/${user.name}/parSem" />
        <delete file="res.clean.choranche" />
        <delete file="res.compile.choranche" />
        <sshsession host="albaron" username="${user.name}" keyfile="${user.home}/.ssh/id_rsa">
            <sequential>
                <ant antfile="build.xml" dir="${dir.choranche}" target="clean" output="res.clean.choranche" />
                <ant antfile="build.xml" dir="${dir.choranche}" target="compile" output="res.compile.choranche" />
            </sequential>
        </sshsession>
    </target>
    
    <target name="build.albaron">
        <property name="dir.albaron" location="/opt/ParSem_db/users/${user.name}/parSem" />
        <delete file="res.clean.albaron" />
        <delete file="res.compile.albaron" />
        <sshsession host="albaron" username="${user.name}" keyfile="${user.home}/.ssh/id_rsa">
            <sequential>
                <ant antfile="build.xml" dir="${dir.albaron}" target="clean" output="res.clean.albaron" />
                <ant antfile="build.xml" dir="${dir.albaron}" target="compile" output="res.compile.albaron" />
            </sequential>
        </sshsession>
    </target>
    
    <target name="build.etretat">
        <property name="dir.etretat" location="/Volumes/PARSEM/users/${user.name}/parSem" />
        <delete file="res.clean.etretat" />
        <delete file="res.compile.etretat" />
        <sshsession host="etretat" username="${user.name}" keyfile="${user.home}/.ssh/id_rsa" trust="yes">
            <sequential>
                <exec executable="mount" />
                <ant antfile="build.xml" dir="${dir.etretat}" target="clean" output="res.clean.etretat" />
                <ant antfile="build.xml" dir="${dir.etretat}" target="compile" output="res.compile.etretat" />
            </sequential>
        </sshsession>
    </target>
    
    <target name="build1">
        <sshsession host="albaron" username="${user.name}" keyfile="${user.home}/.ssh/id_rsa">
            <sequential>
                <exec executable="mount" />
            </sequential>
        </sshsession>
    </target>
   
    <target name="rmtBuildAlbaron">
        <antcall target="rmtCmd">
            <param name="rmtHostName" value="albaron"/>
            <param name="rmtCmd" value="cd /opt/ParSem_db/users/${user.name}/parSem; ant build"/>
        </antcall>
    </target>
    
    <target name="rmtCmd">
        <sshexec host="${rmtHostName}" username="${user.name}" keyfile="${user.home}/.ssh/id_rsa"
                 command="${rmtCmd}" >
        </sshexec>
    </target> 
    -->
    
    
</project>
