#clear
#load ./lex_nouv.fst
define Basic0 ;

# NEED TO REMOVE THE ELEMENTS LIKE "-123+CARD" SO 
# THAT  THE NEW HYPHENATION RULES MAY APPLY WITHIN NTM
# --> - 150 avant JC Ne marche plus --> par regles 
# CB august 2003
regex [ %- ?* [ %+CARD | %+ORD ] ] .o. Basic0 ;
define numhyph

## Some additions as well

regex [ Basic0 - numhyph | 
{Avenue}:{Ave.} %+Prop:0 %+LocPost:0 %+Sg:0 %+Abbr:0 %+NOUN:0 |
{Sun.}:{Sun.} %+Noun:0 %+Sg:0 %+NOUN:0 |
{Mon.}:{Mon.} %+Noun:0 %+Sg:0 %+NOUN:0 |
{Tue.}:{Tue.} %+Noun:0 %+Sg:0 %+NOUN:0 |
{Wed.}:{Wed.} %+Noun:0 %+Sg:0 %+NOUN:0 |
{Thur.}:{Thur.} %+Noun:0 %+Sg:0 %+NOUN:0 |
{Fri.}:{Fri.} %+Noun:0 %+Sg:0 %+NOUN:0 |
{Sat.}:{Sat.} %+Noun:0 %+Sg:0 %+NOUN:0 |
{Proceedings}:{Proc.}  %+Noun:0 %+Pl:0 %+Abbr:0  %+NOUN:0 |
{et al.}:{et. al.} %+Noun:0 %+Sg:0%+Abbr:0 %+NOUN:0 |
{et al.}:{et al.}  %+Noun:0 %+Sg:0%+Abbr:0 %+NOUN:0 |
{Mgr.}:{Mgr.} %+Title:0 %+Abbr:0 %+TIT:0 |
{Street}:{Str.} %+Noun:0 %+Pl:0 %+Abbr:0  %+NOUN:0 ] ;
define Basic ;

### Additions of abbrev month

echo >>> SIGMA DEFINITIONS

define Num [ %0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ] ;

define UP [ B|C|D|F|G|H|J|K|L|M|N|P|Q|R|S|T|V|W|X|Y|Z|Ç|Ð|Ñ|A|E|I|O|U|
            Ä|Ö|Ü|À|Á|Å|Â|Ã|Æ|È|É|Ê|Ë|Î|Ï|Ì|Í|Ó|Ò|Ô|Õ|Ù|Ú|Û|Ý  ];

define Low [ b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z|ß|ç|ñ|a|e|i|o|u|
             ä|ö|ü|à|á|â|ã|å|æ|è|é|ê|ë|í|î|ï|ì|ó|ô|ð|ò|õ|ù|ú|û|ý|ÿ ];

define WS [ " " | "\t" | "\n" | "\r" ] ;

define SP [ WS+ ] ;

define PUNC [
  %!    |  %"    |  %'    |  %(    |  %)    |  %*    |  %+    |
  %,    |  %-    |  %.    |  %/    |  %:    |  %;    |  %<    |  %=    |
  %>    |  %?    |  %@    |  %[    |  %\    |  %]    |  %^    |  %_    |
  %`    |  %|    |  %~    |  %¡    |  %«    |  %»    |  %¿    |  %#    |
  EOT   ] ;

define QUOTE [ %` %` | %` | %' %' | %' | %" | %« | %» ] ;

define SYMBOL [ Num|UP|Low|WS|PUNC ] ;

define PRINT [ SYMBOL - WS ] ;

###################################
echo >>> ITEMS TO BE MODIFIED


echo >>> quotes

define NewQuote [
[ QUOTE %+Punct:0 %+Quote:0 %+Right:0          %+PUNCT:0     LC [WS|BOT]  RC PRINT    ] |
[ QUOTE %+Punct:0 %+Quote:0 %+Left:0           %+PUNCT:0     LC PRINT     RC [WS|EOT] ] |
[ QUOTE %+Punct:0 %+Quote:0 %+Right:0 %+Left:0 %+PUNCT:0     LC PRINT     RC PRINT    ] |
[ QUOTE %+Punct:0 %+Quote:0                    %+PUNCT:0     LC [WS|BOT]  RC [WS|EOT] ]   ];

define ModifiedLow [ QUOTE ] ;


echo >>> hyphen

define NewHyphen [
[ %- %+Punct:0 %+Hyphen:0 %+Right:0 %+PUNCT:0              LC [WS|BOT]  RC PRINT    ] |
[ %- %+Punct:0 %+Hyphen:0 %+Left:0  %+PUNCT:0              LC PRINT     RC [WS|EOT] ] |
[ %- %+Punct:0 %+Hyphen:0 %+Right:0 %+Left:0 %+PUNCT:0     LC PRINT     RC PRINT    ] |
[ %- %+Punct:0 %+Hyphen:0 %+PUNCT:0                        LC [WS|BOT]  RC [WS|EOT] ] |
[ %/ %+Punct:0 %+Spec:0   %+Right:0 %+PUNCT:0              LC [WS|BOT]  RC PRINT    ] |
[ %/ %+Punct:0 %+Spec:0   %+Left:0  %+PUNCT:0              LC PRINT     RC [WS|EOT] ] |
[ %/ %+Punct:0 %+Spec:0   %+Right:0 %+Left:0 %+PUNCT:0     LC PRINT     RC PRINT    ] |
[ %/ %+Punct:0 %+Spec:0   %+PUNCT:0                        LC [WS|BOT]  RC [WS|EOT] ]   ];

define ModifiedLow [ QUOTE | %- | %/] ;


echo >>> genitive

define NewGenitive [
[ %' s:0 %+Part:0 %+Gen:0 %+POSS:0    LC [ s | s e | c e | x | S | S E | C E | X ].r ]  |
[ %' s   %+Part:0 %+Gen:0 %+POSS:0 ] ] ;

define ModifiedUp [ ?+ %+Part %+Gen %+POSS ] ;

echo >>> sentence punctuation

define NewSent [
[ [ %. | %: ] %+Punct:0 %+Sent:0 %+SENT:0   RC [ [WS|EOT] | QUOTE [WS|EOT|UP] ] ] |
[  %. %. %.    %+Punct:0 %+Sent:0 %+SENT:0   RC [ (QUOTE) WS+ (QUOTE) UP    ] ] |
[ [ %? | %! ]  %+Punct:0 %+Sent:0 %+SENT:0 ] ] ;

echo >>> compound sentence boudaries


define CompSent2 [%.|%?|%!|%:]  0:"\n"  %+Punct:0 %+Sent:0 %+SENT:0 ;


define CompSent4 [{...}]    0:"\n"  %+Punct:0 %+Sent:0 %+SENT:0 ;

define NewSent [ NewSent | CompSent2 | CompSent4 ] ;

define ModifiedUp [ ModifiedUp | [ [ %. %. %. | %. | %! | %? | %: ] %+Punct %+Sent %+SENT ]   ] ;



echo >>> single letters 

define Letters [ $%+Let .o. Basic ] ;

define NewLetter [ Letters.l      %+Let:0 %+NOUN:0        RC [ [WS|EOT] | [PUNC - %.] ] ] ;

define ModifiedUp [ ModifiedUp | $%+Let ] ;



echo >>> initials

define Initials [ $%+Init .o. Basic ] ;

define NewInitial [ Initials.l      %+Init:0 %+NOUN:0        RC [ WS | [PUNC - %.] ] ] ;

define ModifiedUp [ ModifiedUp | $%+Init ] ;


echo >>> words ending with a dot

define EndsWithDot [ Basic .o. [ ? ?+ %.] ].l ;

define AlwaysWithDot [
{Adm.}  |
{Cdr.}  |
{Cmdr.}  |
{Col.}  |
{Comdr.}  |
{Capt.}  |
{Dr.}  |
{Drs.}  |
{Dir.}  |
{Esq.}  |
{Fr.}  |
{Gen.}  |
{Gov.}  |
{Hon.}  |
{Ins.}  |
{Lt.}  |
{Ms.}  |
{Mgr.} |
{Mlle.}  |
{Mdm.}  |
{MME.}  |
{MM.}  |
{Maj.}  |
{Mr.}  |
{Mrs.}  |
{Messrs.}  |
{Mme.}  |
{Mmes.}  |
{Pvt.}  |
{P.M.}  |
{Proc.} |
{Prof.}  |
{Pres.}  |
{Ret.}  |
{Rev.}  |
{Revd.}  |
{Rep.}  |
{Reps.}  |
{Sgt.}  |
{Sr.}  | #CB: I think it may loose dot, so do "Jr." 
{Jr.} | 
{Sra.}  |
{Srta.}  |
{St.}  |
{et. al.} |
{et al.} |
{Bd.} | #CB for thingfinder purposes 
{Corp.} |
{Ste.}  |
{Supt.}  |
{Secy.}  | 
{O.J.} | 
{Sen.}  | 
{Sens.}  |
{lt.}  |
{e.g.} |
{i.e.} |
{cf.}  |
{U.S.} | #CB: it was commented but i add it...
{Mt.} |
{Pt.} |
{Bros.} |
{Dept.} |
{Ave.} |
{Str.} |
#--------------------- months (pb with Jan, which is also a first name)
{Jan.}| {Feb.}| {Mar.}| {Apr.}| {Jun.}| {Jul.}|{ Aug.}|{ Sep.}|{ Sept.}| {Oct.}| {Nov.}| {Dec.} |
{Sun.} | {Mon.} | {Tue.} |{Wed.}|{Thur.} |{Fri.} | {Sat.} 
]  ; 

# select abbreviations that may lose final dot if at end of sentence 
# they need a special look ahead:  etc.

# the begining of a sentence is basically characterized by a word starting 
# with an upper-case letter. In some cases, it would be useful to have a more fine grain definition
# e.g. "U.S." is often followed by an upper-case word; in this version the dot is always attached 
# to the token "U.S." (statistically sound choice). However, one could define a set of words which 
# frequently start a sentence (e.g. The, As, They) and use that as a right context.

define MayLoseDot  [  Basic .o. [EndsWithDot  - AlwaysWithDot]  ] ;

echo >>> abbreviations: dot marks end of sentence

# for those words, the reading without the final dot needs to be added in the lexicon

# The set of forms in the lexicon with the final dot removed
# (e.g. contains "U.S.A")

define DotReadingWithoutDot [ MayLoseDot .o. [ ?+ %.:0 ] ];


# The set of forms without dot which belong to Basic Lexicon in the first place
# (e.g. "in", the shorter former of "in.+Meas" is also a preposition)
# Existing readings are prefered (i.e. if "in+Meas" do not exist in the lexicon,
# this reading won't be available) 

define InBasicReadingWithoutDot [ Basic .o. DotReadingWithoutDot.l ] ;


# The set of forms without dot which does not yet exist in the lexicon

define NotBasicReadingWithoutDot [ 
   DotReadingWithoutDot .o. [ ?+ - InBasicReadingWithoutDot.l ]    ];

define ReadingWithoutDot [ NotBasicReadingWithoutDot | InBasicReadingWithoutDot ] ;

define NewReadingWithoutDot [ ReadingWithoutDot RC [ [%. QUOTE* SP QUOTE* UP]       |
                                                     [ WS | [PUNC - %.] ]            ]   ] ;



echo >>> abbreviations: dot is part of the abbrevation


# special case for abbreviations that must be followed by numerical expressions: art. 112

define DotIfNum  [  MayLoseDot .o. [[p p | a r t | f i g | p a r | v o l] %.]   ];

define MayLoseDot [ MayLoseDot .o. [?* - DotIfNum.l] ] ;

define NewDotIfNum [ DotIfNum    RC [ SP Num                   | 
                                      SP* [PUNC - [%.|QUOTE]]  ]  ];

define NewMayLoseDot [  MayLoseDot        RC [ QUOTE* SP QUOTE* [Low | Num] | 
                                               SP* [PUNC - [%.|QUOTE]]      |
                                               QUOTE [Low | Num]            ]  ];


define ModifiedLow [ ModifiedLow | MayLoseDot.l | DotIfNum.l | InBasicReadingWithoutDot.l ] ;




###################################
echo >>> make changes 

define NewBasic [?* - ModifiedUp ] .o. Basic .o. [?* - ModifiedLow] ;

##################################
## full new lexicon 

regex [ 
  NewBasic              |
  NewQuote              |
  NewHyphen             |
  NewGenitive           |
  NewSent               | 
  NewLetter             |
  NewInitial            |
  NewReadingWithoutDot  |
  NewDotIfNum           |
  NewMayLoseDot       ] ;

#define first

#echo >>>>> last
# 
#save ./nvlex+context.fst

 