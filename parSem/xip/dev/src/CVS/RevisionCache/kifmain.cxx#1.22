/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 *
 * Copyright (C) 2010 - 2011 Xerox Corporation, XRCE-Grenoble, All Rights Reserved.
 * This file can only be used with the KiF library, 
 * it should not and cannot be used otherwise.
 */
/* --- CONTENTS ---
   Project    : KiF
   Version    : 1.00
   filename   : kifmain.cxx
   Date       : 09/09/2010
   Purpose    : Implementation of the KiF language
   Programmer : Claude ROUX
   Reviewer   : 
*/

#include "kifinit.h"
#include <stdio.h>

extern "C" {
	bool kifsys_KifInitialisationModule(KifCode* kifcode,string version);
	bool kifsqlite_KifInitialisationModule(KifCode* kifcode,string version);
	bool kifsocket_KifInitialisationModule(KifCode* kifcode,string version);
	bool Init_kifsys(KifCode* kifcode,string version);
	bool Init_kifsqlite(KifCode* kifcode,string version);
	bool Init_kifsocket(KifCode* kifcode,string version);
	bool kifsocket_Terminate(KifCode* kifcode,string version);
}

Exported string KifExecute(int ikif,string name,vector<string>& parameters,ostringstream* os,bool debugkif);
void displaystatistics();
string Whoami_kif();
Exported bool KifRecordLibraries(string name,KifExternalModule);
Exported bool KifRecordTerminateModule(string name,KifExternalModule module);

int main(int argc, char *argv[]) {
	vector<string> kifarguments;
	KifCode kifcode(10000);

	KifRecordLibraries("Init_kifsys",Init_kifsys);
	KifRecordLibraries("Init_kifsqlite",Init_kifsqlite);
	KifRecordLibraries("Init_kifsocket",Init_kifsocket);

	KifRecordTerminateModule("kifsocket_Terminate",kifsocket_Terminate);

	string wh=Whoami_kif();
	
	if (argc<=1) {
		cerr<<"V1.11 "<<STR(wh)<<Endl;
		cout<<"Missing KiF file"<<endl;
		exit(-1);
	}

	bool piped=false;
	char line[256];
	bool debugkif=false;
	bool comp=false;
	//argv[1] is the file name
	string name=argv[1];
	string code="";
	for (int i=1;i<argc;i++) {
		string args=argv[i];
		if (args=="-h") {
			cout<<STR(wh)<<Endl;
			cout<<"-compile: generate the compiled version"<<endl;
			cout<<"-debug: debugging mode"<<endl;
			cout<<"-pipe: _args[0] from piped string"<<endl;
			cout<<"-s \"source code\" with piped data"<<endl;
			cout<<"-S \"source code\" without piped data"<<endl;
			cout<<"\tPredeclared variables:"<<endl;
			cout<<"\t\t_args: argument vector"<<endl;
			cout<<"\t\t_paths: _paths[0] is the current directory"<<endl;
			cout<<"\t\ti,j,k: int"<<endl;
			cout<<"\t\tf,g,h: float"<<endl;
			cout<<"\t\ts,u,v: string"<<endl;
			cout<<"\t\tm: map"<<endl;
			cout<<"\t\tv: vector"<<endl;
			exit(-1);
		}
		if (args=="-compile") {
			comp=true;
			continue;
		}
		if (args=="-debug") {
			debugkif=true;
			continue;
		}
		if (args=="-s") {
			code=argv[++i];
			continue;
		}
		if (args=="-S") {
			code=argv[++i];
			piped=true;
			continue;
		}
		
		if (args=="-pipe") {
			piped=true;
			while (!cin.eof()) {
				cin>>line;
				if (line[0]!=0)
					kifarguments.push_back(line);
				line[0]=0;
			}
			continue;
		}
		if (i!=1)
			kifarguments.push_back(args);
	}

	
	if (debugkif==OUI)
		kifcode.Setdebug(true);

	kifcode.compile=comp;
	kifsys_KifInitialisationModule(&kifcode,KIFVERSION);
	kifsqlite_KifInitialisationModule(&kifcode,KIFVERSION);
	kifsocket_KifInitialisationModule(&kifcode,KIFVERSION);

	if (code=="") {
		kifcode.SetArguments(kifarguments);
		name=argv[1];
		ifstream* fkif=new ifstream(STR(name),ios::in|ios::binary);
		try {
			kifcode.Setbaseline(1);
			kifcode.Loadfile(fkif,name,0);
		}
		catch(KifRaiseError* m) {
			cerr<<STR(m->message)<<" at "<<m->left<<endl;
			delete m;
			exit(-1);
		}	
	}	
	else {
#ifndef WIN32
		if (!piped) {
			while (!cin.eof()) {
				cin>>line;
				if (line[0]!=0)
					kifarguments.push_back(line);
				line[0]=0;
			}
		}
#endif
		kifcode.SetArguments(kifarguments);
		kifcode.Push(kifcode.kstart);
		kifcode.Evaluate(kifcode.kstart,code,true);
		kifcode.Pop();
		if (kifcode.error==true) {
			cerr<<"Error: "<<STR(kifcode.errorptr->String())<<endl;
			exit(-1);
		}
	}

	kifcode.Run();
	if (kifcode.error==true)
		cerr<<STR(kifcode.errorptr->String())<<endl;
	displaystatistics();
}
