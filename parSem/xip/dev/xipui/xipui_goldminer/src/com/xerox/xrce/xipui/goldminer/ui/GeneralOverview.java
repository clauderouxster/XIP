/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * GeneralOverview.java
 *
 * Created on March 13, 2007, 10:03 AM
 */
package com.xerox.xrce.xipui.goldminer.ui;

import com.xerox.xrce.xipui.goldminer.ui.table.*;
import com.xerox.xrce.xipui.modules.*;
import com.xerox.xrce.xipui.goldminer.*;
import com.xerox.xrce.xipui.ui.UIConstants;
import com.xerox.xrce.xipui.ui.XIPUIUtilities;
import com.xerox.xrce.xipui.util.TableSorter;
import java.awt.BorderLayout;
import java.awt.Cursor;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;

/**
 *
 * @author  vgrassau
 */
public class GeneralOverview extends PanelModule {

    /** Creates new form GeneralOverview
     * @param context 
     */
    public GeneralOverview(ModuleContext context) {
        super(context);
        initComponents();
        this.corpusLab.setIcon(XIPUIUtilities.getIcon(UIConstants.CORPUS));
        this.documentsLabel.setIcon(XIPUIUtilities.getIcon(UIConstants.TEXT));
        this.elementsLabel.setIcon(XIPUIUtilities.getIcon(UIConstants.RELATION_TYPE));
        this.sentencesLabel.setIcon(XIPUIUtilities.getIcon(UIConstants.EDIT));
        this.conceptLabel.setIcon(XIPUIUtilities.getIcon(UIConstants.CONCEPT));
        this.mostConcept.setIcon(XIPUIUtilities.getIcon(UIConstants.DIALOG));
        SpinnerNumberModel model = new SpinnerNumberModel(20, 5, 1000, 5);
        this.conceptLimit.setModel(model);
    }

    public void init() {
        GoldminerEngine engine = (GoldminerEngine) getProperty("goldminerEngine");
        Overview overview = engine.getOverview();
        corpus.setText(String.valueOf(overview.getCountCorpora()));
        sentences.setText(String.valueOf(overview.getCountSentences()));
        documents.setText(String.valueOf(overview.getCountDocuments()));
        concepts.setText(String.valueOf(overview.getCountConcept()));
        elements.setText(String.valueOf(overview.getCountFunction()));
        InitElementTask task2 = new InitElementTask(overview);
        scrollElements.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        task2.execute();
        InitConceptTask task1 = new InitConceptTask(overview);
        scroll.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        task1.execute();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        corpusLab = new javax.swing.JLabel();
        corpus = new javax.swing.JLabel();
        documentsLabel = new javax.swing.JLabel();
        documents = new javax.swing.JLabel();
        aboutDocument = new javax.swing.JLabel();
        aboutConcept = new javax.swing.JLabel();
        conceptLabel = new javax.swing.JLabel();
        concepts = new javax.swing.JLabel();
        sentencesLabel = new javax.swing.JLabel();
        sentences = new javax.swing.JLabel();
        scroll = new javax.swing.JScrollPane();
        aboutElements = new javax.swing.JLabel();
        elementsLabel = new javax.swing.JLabel();
        elements = new javax.swing.JLabel();
        scrollElements = new javax.swing.JScrollPane();
        mostConcept = new javax.swing.JLabel();
        conceptLimit = new javax.swing.JSpinner();

        setLayout(new java.awt.GridBagLayout());

        setBackground(new java.awt.Color(255, 255, 255));
        corpusLab.setFont(new java.awt.Font("Arial", 0, 11));
        corpusLab.setText("Corpus");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 13, 0, 13);
        add(corpusLab, gridBagConstraints);

        corpus.setFont(new java.awt.Font("Arial", 0, 11));
        corpus.setForeground(new java.awt.Color(255, 51, 0));
        corpus.setText("jLabel2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 12);
        add(corpus, gridBagConstraints);

        documentsLabel.setFont(new java.awt.Font("Arial", 0, 11));
        documentsLabel.setText("Documents");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 0, 12);
        add(documentsLabel, gridBagConstraints);

        documents.setFont(new java.awt.Font("Arial", 0, 11));
        documents.setForeground(new java.awt.Color(255, 51, 0));
        documents.setText("jLabel4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 12);
        add(documents, gridBagConstraints);

        aboutDocument.setBackground(new java.awt.Color(153, 255, 153));
        aboutDocument.setFont(new java.awt.Font("Arial", 0, 11));
        aboutDocument.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutDocument.setText("About documents");
        aboutDocument.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        aboutDocument.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(aboutDocument, gridBagConstraints);

        aboutConcept.setBackground(new java.awt.Color(153, 255, 153));
        aboutConcept.setFont(new java.awt.Font("Arial", 0, 11));
        aboutConcept.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutConcept.setText("About concepts");
        aboutConcept.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        aboutConcept.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(aboutConcept, gridBagConstraints);

        conceptLabel.setFont(new java.awt.Font("Arial", 0, 11));
        conceptLabel.setText("Concepts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 6, 12);
        add(conceptLabel, gridBagConstraints);

        concepts.setFont(new java.awt.Font("Arial", 0, 11));
        concepts.setForeground(new java.awt.Color(255, 51, 0));
        concepts.setText("jLabel8");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 12);
        add(concepts, gridBagConstraints);

        sentencesLabel.setText("Sentences");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 0, 12);
        add(sentencesLabel, gridBagConstraints);

        sentences.setForeground(new java.awt.Color(255, 51, 0));
        sentences.setText("jLabel10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 12);
        add(sentences, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(scroll, gridBagConstraints);

        aboutElements.setBackground(new java.awt.Color(153, 255, 153));
        aboutElements.setFont(new java.awt.Font("Arial", 0, 11));
        aboutElements.setText("About Elements");
        aboutElements.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        aboutElements.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(aboutElements, gridBagConstraints);

        elementsLabel.setFont(new java.awt.Font("Arial", 0, 11));
        elementsLabel.setText("Types/Relations");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 6, 12);
        add(elementsLabel, gridBagConstraints);

        elements.setFont(new java.awt.Font("Arial", 0, 11));
        elements.setForeground(new java.awt.Color(255, 51, 0));
        elements.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 12);
        add(elements, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(scrollElements, gridBagConstraints);

        mostConcept.setFont(new java.awt.Font("Arial", 0, 11));
        mostConcept.setText("The most frequent concepts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 6, 12);
        add(mostConcept, gridBagConstraints);

        conceptLimit.setFont(new java.awt.Font("Arial", 0, 11));
        conceptLimit.setToolTipText("The most frequent concepts");
        conceptLimit.setMaximumSize(new java.awt.Dimension(70, 20));
        conceptLimit.setMinimumSize(new java.awt.Dimension(70, 20));
        conceptLimit.setPreferredSize(new java.awt.Dimension(70, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 12);
        add(conceptLimit, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aboutConcept;
    private javax.swing.JLabel aboutDocument;
    private javax.swing.JLabel aboutElements;
    private javax.swing.JLabel conceptLabel;
    private javax.swing.JSpinner conceptLimit;
    private javax.swing.JLabel concepts;
    private javax.swing.JLabel corpus;
    private javax.swing.JLabel corpusLab;
    private javax.swing.JLabel documents;
    private javax.swing.JLabel documentsLabel;
    private javax.swing.JLabel elements;
    private javax.swing.JLabel elementsLabel;
    private javax.swing.JLabel mostConcept;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JScrollPane scrollElements;
    private javax.swing.JLabel sentences;
    private javax.swing.JLabel sentencesLabel;
    // End of variables declaration//GEN-END:variables

    public void close() {
    }

    /**
     *The ElementTable model for BasicElements
     */
    private class ElementTableModel extends AbstractTableModel {

        private String[] columnNames = {"label", "occurence"};
        private Object[][] data;

        public ElementTableModel(Map<Integer, Integer> data_) {
            super();
            data = new Object[data_.size()][2];

            Set<Integer> set = data_.keySet();
            int i = 0;
            GoldminerEngine engine = (GoldminerEngine) getProperty("goldminerEngine");
            for (Iterator<Integer> it = set.iterator(); it.hasNext(); i++) {
                Integer id = it.next();
                data[i][0] = engine.getBasicElement(id).getLabel();
                data[i][1] = data_.get(id);
            }
        }

        /**
         *@return le nombre de colonnes.
         */
        public int getColumnCount() {
            return columnNames.length;
        }

        /**
         *@return le nombre de lignes
         */
        public int getRowCount() {
            return data.length;
        }

        /**
         *@return le nom de la colonne numero i
         */
        public String getColumnName(int col) {
            return columnNames[col];
        }

        /**
         *Renvoie l'objet contenue dans la cellule a la ligne row et a la colonne col
         */
        public Object getValueAt(int row, int col) {
            return data[row][col];
        }

        /*
         * JTable uses this method to determine the default renderer/
         * editor for each cell.  If we didn't implement this method,
         * then the last column would contain text ("true"/"false"),
         * rather than a check box.
         */
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return false;
        }

        public void setValueAt(Object value, int row, int col) {
            data[row][col] = value;
            fireTableCellUpdated(row, col);
        }
    }

    private class InitConceptTask extends SwingWorker<Void, TableModel> {

        private Overview overview;

        public InitConceptTask(Overview overview) {
            this.overview = overview;
        }

        protected Void doInBackground() {
            Integer limit = (Integer) conceptLimit.getValue();
            Map<String, Integer> mapConcept = overview.getMostReferedConcepts(limit.intValue());
            TableModel model = new ConceptTableModel(mapConcept);
            publish(model);
            return null;
        }

        protected void done() {
            scroll.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

        protected void process(java.util.List<TableModel> list) {
            TableModel model = list.get(0);
            TableSorter sorter = new TableSorter(model);
            JTable table = new JTable();
            table.setModel(sorter);
            table.setCellSelectionEnabled(true);
            sorter.setTableHeader(table.getTableHeader());
            JPanel panel = new JPanel();
            panel.setLayout(new BorderLayout());
            panel.add(table.getTableHeader(), BorderLayout.PAGE_START);
            panel.add(table, BorderLayout.CENTER);
            scroll.setViewportView(panel);
        }
    }

    /**
     * This class permit to get all the BaiscElement in the database and print their labels and occuencies
     */
    private class InitElementTask extends SwingWorker<Void, TableModel> {

        private Overview overview;

        public InitElementTask(Overview overview) {
            this.overview = overview;
        }

        protected void done() {
            scrollElements.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

        protected Void doInBackground() {
            Map<Integer, Integer> mapElement = overview.getOccurencyForBasicElement();
            TableModel model1 = new ElementTableModel(mapElement);
            publish(model1);
            return null;
        }

        protected void process(java.util.List<TableModel> list) {
            TableModel model = list.get(0);
            TableSorter sorter = new TableSorter(model);
            JPanel panel = new JPanel();
            panel.setLayout(new BorderLayout());
            JTable table = new JTable();
            table.setModel(sorter);
            sorter.setTableHeader(table.getTableHeader());
            panel.add(table.getTableHeader(), BorderLayout.PAGE_START);
            panel.add(table, BorderLayout.CENTER);
            scrollElements.setViewportView(panel);
        }
    }
}//end of class

