/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * SetupConnection.java
 *
 * Created on October 24, 2006, 10:48 AM
 */
package com.xerox.xrce.xipui.goldminer.ui;

import com.xerox.xrce.xipui.goldminer.GoldminerEngine;
import com.xerox.xrce.xipui.modules.ModuleContext;
import com.xerox.xrce.xipui.modules.PanelModule;
import java.awt.Color;

/**
 *
 * @author  vgrassau
 */
public class SetupConnection extends PanelModule {

    private boolean connectionChanged = false;
    private GoldminerEngine engine;
    private String oldHost;
    private String oldPort;
    private String oldUser;
    private String oldDataBase;
    private String oldPassword;

    /** Creates new form SetupConnection
     * @param context 
     */
    public SetupConnection(ModuleContext context) {
        super(context);
        initComponents();
        engine = (GoldminerEngine) getProperty("goldminerEngine");
        oldHost = engine.getHost();
        oldPort = engine.getPort();
        oldUser = engine.getUser();
        oldDataBase = engine.getDatabase();
        oldPassword = engine.getPassword();
        textHost.setText(oldHost);
        textPort.setText(oldPort);
        textDatabase.setText(oldDataBase);
        textUser.setText(oldUser);
        textPassword.setText(oldPassword);
        setStatus();
    }

    private void reinit() {
        textHost.setText(oldHost);
        textPort.setText(oldPort);
        textDatabase.setText(oldDataBase);
        textUser.setText(oldUser);
        textPassword.setText(oldPassword);
        setHost();
        setPort();
        setUser();
        setPassword();
        setDatabase();
        setStatus();
        this.connectionChanged = false;
    }

    public boolean connectionChanged() {
        return connectionChanged;
    }

    public boolean setStatus() {
        StringBuilder msg = new StringBuilder();
        msg.append("<html><body>");
        boolean success = engine.checkConnection();
        if (success) {
            statusConnection.setForeground(Color.GREEN);
            msg.append("<p>Goldminer is connected to :");
            msg.append("<u><font color=\"blue\">");
            msg.append(textHost.getText() + ":" + textPort.getText() + "/" + textDatabase.getText());
            msg.append("</font></u>");
        } else {
            msg.append("<p>Goldminer is not connected to :");
            msg.append("<u><font color=\"red\">");
            msg.append(textHost.getText() + ":" + textPort.getText() + "/" + textDatabase.getText());
            msg.append("</font></u>");
            msg.append("<p>check parameters</p>");
            statusConnection.setForeground(Color.RED);
        }
        msg.append("</body></html>");
        statusConnection.setText(msg.toString());
        return success;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labHost = new javax.swing.JLabel();
        labPort = new javax.swing.JLabel();
        labDatabase = new javax.swing.JLabel();
        labUser = new javax.swing.JLabel();
        labPassword = new javax.swing.JLabel();
        textHost = new javax.swing.JTextField();
        textPort = new javax.swing.JTextField();
        textDatabase = new javax.swing.JTextField();
        textUser = new javax.swing.JTextField();
        textPassword = new javax.swing.JPasswordField();
        labPanel = new javax.swing.JLabel();
        statusConnection = new javax.swing.JLabel();
        restorDefault = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        labHost.setBackground(new java.awt.Color(153, 255, 153));
        labHost.setFont(new java.awt.Font("Arial", 0, 11));
        labHost.setText("Host :");
        labHost.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labHost.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(labHost, gridBagConstraints);

        labPort.setBackground(new java.awt.Color(153, 255, 153));
        labPort.setFont(new java.awt.Font("Arial", 0, 11));
        labPort.setText("Port : ");
        labPort.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labPort.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(labPort, gridBagConstraints);

        labDatabase.setBackground(new java.awt.Color(153, 255, 153));
        labDatabase.setFont(new java.awt.Font("Arial", 0, 11));
        labDatabase.setText("Database : ");
        labDatabase.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labDatabase.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(labDatabase, gridBagConstraints);

        labUser.setBackground(new java.awt.Color(153, 255, 153));
        labUser.setFont(new java.awt.Font("Arial", 0, 11));
        labUser.setText("User : ");
        labUser.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labUser.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(labUser, gridBagConstraints);

        labPassword.setBackground(new java.awt.Color(153, 255, 153));
        labPassword.setFont(new java.awt.Font("Arial", 0, 11));
        labPassword.setText("Password : ");
        labPassword.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labPassword.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(labPassword, gridBagConstraints);

        textHost.setFont(new java.awt.Font("Arial", 0, 11));
        textHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textHostActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(textHost, gridBagConstraints);

        textPort.setFont(new java.awt.Font("Arial", 0, 11));
        textPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPortActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(textPort, gridBagConstraints);

        textDatabase.setFont(new java.awt.Font("Arial", 0, 11));
        textDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textDatabaseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(textDatabase, gridBagConstraints);

        textUser.setFont(new java.awt.Font("Arial", 0, 11));
        textUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textUserActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(textUser, gridBagConstraints);

        textPassword.setFont(new java.awt.Font("Arial", 0, 11));
        textPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPasswordActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(textPassword, gridBagConstraints);

        labPanel.setFont(new java.awt.Font("Arial", 0, 11));
        labPanel.setText("Connection parameters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(labPanel, gridBagConstraints);

        statusConnection.setFont(new java.awt.Font("Arial", 0, 11));
        statusConnection.setForeground(new java.awt.Color(0, 153, 51));
        statusConnection.setText("status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(statusConnection, gridBagConstraints);

        restorDefault.setFont(new java.awt.Font("Arial", 0, 11));
        restorDefault.setText("Default");
        restorDefault.setToolTipText("Restore to default");
        restorDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restorDefaultActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 2);
        add(restorDefault, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void restorDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restorDefaultActionPerformed
        reinit();
    }//GEN-LAST:event_restorDefaultActionPerformed

    private void textPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPasswordActionPerformed
        setPassword();
        apply();
    }//GEN-LAST:event_textPasswordActionPerformed

    private void textUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textUserActionPerformed
        setUser();
        apply();
    }//GEN-LAST:event_textUserActionPerformed

    private void textDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textDatabaseActionPerformed
        setDatabase();
        apply();
    }//GEN-LAST:event_textDatabaseActionPerformed

    private void textPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPortActionPerformed
        setPort();
        apply();
    }//GEN-LAST:event_textPortActionPerformed

    private void textHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textHostActionPerformed
        setHost();
        apply();
    }//GEN-LAST:event_textHostActionPerformed

    private void setHost() {
        String host_ = this.textHost.getText();
        engine.setHost(host_);
        connectionChanged = true;

    }

    private void setPort() {
        String port_ = this.textPort.getText();
        try {
            Integer.parseInt(port_);
            engine.setPort(port_);
            connectionChanged = true;
        } catch (NumberFormatException e) {
            warning("The port must be a number");
            textPort.setText(engine.getPort());
        }
    }

    private void setDatabase() {
        String data_ = this.textDatabase.getText();
        engine.setDatabase(data_);
        connectionChanged = true;
    }

    private void setUser() {
        String user_ = this.textUser.getText();
        engine.setUser(user_);
        connectionChanged = true;
    }

    private void setPassword() {
        String password_ = new String(this.textPassword.getPassword());
        engine.setPassword(password_);
        connectionChanged = true;
    }

    private void apply() {
        if (!setStatus()) {
            warning("Connection failed !!");
        //reinit();
        }
    }

    public void close() {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labDatabase;
    private javax.swing.JLabel labHost;
    private javax.swing.JLabel labPanel;
    private javax.swing.JLabel labPassword;
    private javax.swing.JLabel labPort;
    private javax.swing.JLabel labUser;
    private javax.swing.JButton restorDefault;
    private javax.swing.JLabel statusConnection;
    private javax.swing.JTextField textDatabase;
    private javax.swing.JTextField textHost;
    private javax.swing.JPasswordField textPassword;
    private javax.swing.JTextField textPort;
    private javax.swing.JTextField textUser;
    // End of variables declaration//GEN-END:variables
}
