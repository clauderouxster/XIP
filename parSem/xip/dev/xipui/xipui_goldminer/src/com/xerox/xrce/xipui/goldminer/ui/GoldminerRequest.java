/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 *
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 *
 * GoldminerRequest.java
 *
 * Created on September 5, 2006, 9:39 AM
 */
package com.xerox.xrce.xipui.goldminer.ui;

import com.xerox.xrce.xipui.goldminer.GoldminerEngine;
import com.xerox.xrce.xipui.modules.ModuleContext;
import com.xerox.xrce.xipui.modules.PanelModule;
import com.xerox.xrce.xipui.ui.UIConstants;
import com.xerox.xrce.xipui.ui.XIPUIUtilities;
import javax.swing.*;
import java.awt.*;

/**
 *
 * @author  vgrassau
 */
public class GoldminerRequest extends PanelModule {

    private GoldminerEngine engine;
    private GoldminerResultViewer result;
    private Action sendAction;
    private Action setupAction;
    private Action reloadAction;
    private JLabel dataLabel;

    /** Creates new form GoldminerRequest
     *@param context the context to use for this module
     */
    public GoldminerRequest(ModuleContext context) {
        super(context);
        setProperty("goldminerRequest", this);
        engine = (GoldminerEngine) getProperty("goldminerEngine");
        result = new GoldminerResultViewer(getModuleContext());
        initComponents();
        dataLabel = new JLabel();
        dataLabel.setIcon(XIPUIUtilities.getIcon(UIConstants.DATA));
        sendAction = new GoldminerSearchAction(getModuleContext(), result);
        setupAction = new GoldminerSetupAction(getModuleContext());
        reloadAction = new AbstractAction("Reload", XIPUIUtilities.getIcon(UIConstants.REFRESH)) {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    engine.load();
                    reLoad();
                } catch (Exception e) {
                }
            }
        };
        //set the tool bar
        toolbar.add(XIPUIUtilities.createJButton("Search", sendAction, false));
        toolbar.add(XIPUIUtilities.createJButton("Setup", setupAction, false));
        //toolbar.add(XIPUIUtilities.createJButton("Reload",reloadAction,false));
        toolbar.addSeparator();
        setDataLabel(engine.isConnected());
        //toolbar.add(dataLabel);
        printTheQueryNode();
        result.loadTree();
        //on place le panneau result
        putTheResultPanelAndTools();
        setMenuBar();
        StatusTask task = new StatusTask();
        task.execute();
    }

    /**
     * 
     * @param connected
     */
    private void setDataLabel(boolean connected) {
        dataLabel.setText(engine.getDatabase());
        dataLabel.setToolTipText("<html><body><p><u><font color=\"blue\">" + engine.getHost() + ":" + engine.getPort() + "/" + engine.getDatabase() + "</font></u></p></body></html>");
        if (connected) {
            dataLabel.setForeground(Color.GREEN);
        } else {
            dataLabel.setForeground(Color.RED);
        }
    }

    /**
     * 
     */
    private void setMenuBar() {
        boolean stop = false;
        JMenuBar menu = (JMenuBar) getProperty(MENUBAR);
        for (int i = 0; i < menu.getMenuCount() && !stop; i++) {
            JMenu subMenu = menu.getMenu(i);
            if (subMenu.getText().equals("DB")) {
                subMenu.add(setupAction);
                subMenu.add(sendAction);
                stop = true;
            }
        }
    }

    /**
     *
     */
    private void putTheResultPanelAndTools() {
        JTabbedPane optionTabbed = (JTabbedPane) getProperty(OPTION_TABBED);
        optionTabbed.setVisible(true);
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        if (result != null) {
            panel.add(result, BorderLayout.CENTER);
        } else {
            warning("Error, could not put the result panel for goldminer");
        }
        panel.add(this.toolbar, BorderLayout.PAGE_END);
        XIPUIUtilities.addComponentOnTab(optionTabbed, panel, XIPUIUtilities.getIcon(UIConstants.GOLDMINER), "Result", "Result");
    }

    /**
     * 
     */
    private void printTheQueryNode() {
        int size = engine.getSizeOfQueries();
        for (int i = 0; i < size; i++) {
            panelElement.add(new GoldminerQuery(getModuleContext(), i));
            repaint();
        }
    }

    /**
     * 
     */
    public void reLoad() {
        this.panelElement.removeAll();
        this.result.refresh();
        setDataLabel(engine.isConnected());
        printTheQueryNode();
        this.panelElement.repaint();
        revalidate();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
// <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        toolbar = new javax.swing.JToolBar();
        panelElement = new javax.swing.JPanel();
        
        toolbar.setFloatable(false);
        toolbar.setRollover(true);
        toolbar.setFont(new java.awt.Font("Arial", 0, 11));
        
        setLayout(new java.awt.BorderLayout());
        
        panelElement.setLayout(new javax.swing.BoxLayout(panelElement, javax.swing.BoxLayout.X_AXIS));
        
        add(panelElement, java.awt.BorderLayout.CENTER);
        
    }// </editor-fold>//GEN-END:initComponents

    public void close() {
        //nothing
    }
// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelElement;
    private javax.swing.JToolBar toolbar;
// End of variables declaration//GEN-END:variables

    private class StatusTask extends SwingWorker<Void, Boolean> {

        protected Void doInBackground() {
            while (true) {
                try {
                    //every 2 minutes
                    Thread.sleep(120000);
                    publish(engine.isConnected());
                } catch (Exception e) {
                    //no PB
                }
            }
        }

        protected void process(java.util.List<Boolean> connected) {
            boolean success = false;
            try {
                success = connected.get(0);
            } catch (Exception e) {
                DEBUG_LOG.error("ERROR", e);
            }
            setDataLabel(success);
        }
    }
}

