/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * GoldminerElement.java
 *
 * Created on September 5, 2006, 9:46 AM
 */
package com.xerox.xrce.xipui.goldminer.ui;

import com.xerox.xrce.xipui.Project;
import com.xerox.xrce.xipui.XipUtilities;
import com.xerox.xrce.xipui.goldminer.GoldminerEngine;
import com.xerox.xrce.xipui.modules.ModuleContext;
import com.xerox.xrce.xipui.modules.PanelModule;
import com.xerox.xrce.xipui.ui.UIConstants;
import com.xerox.xrce.xipui.ui.XIPUIUtilities;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.*;
import javax.swing.*;
import java.awt.*;

/**
 *
 * @author  vgrassau
 */
public class GoldminerQuery extends PanelModule {

    /** */
    private ActionListener typeAction;
    /** the goldminer engine to send request */
    private GoldminerEngine engine;
    /** index of the query */
    private int index = -1;
    /** color for valid query */
    private final Color queryOK = new Color(128, 255, 128, 128);
    /** color for unvalid query */
    private final Color queryKO = new Color(255, 0, 0, 128);

    /** Creates new form GoldminerElement
     *@param context the module context to use
     *@param indexQuery the index of a QueryNode
     */
    public GoldminerQuery(ModuleContext context, int indexQuery) {
        super(context);
        engine = (GoldminerEngine) getProperty("goldminerEngine");
        index = indexQuery;
        initComponents();
        typeList.setRenderer(new BasicElementRenderer(engine));
        //set the typeAction :
        typeAction = new ActionListener() {

            public void actionPerformed(ActionEvent evt) {
                selectTypeElement();
            }
        };
        String lemma = engine.getLemma(index);
        if (lemma != null) {
            lemmeValue.setText(lemma);
        }
        updateTypeList();
        StringBuilder builder = new StringBuilder();
        builder.append("<html><body><p>Research a <b>word</b> : <br>Enter a lemma or a surface form and press <b><u>Enter</u></b></p></body></html>");
        StringBuilder builder2 = new StringBuilder();
        builder2.append("<html><body><p>Research a <b>type</b> : <br>Choose an available type (exept the type Any) in the list</p></body></html>");
        lemmeValue.setToolTipText(builder.toString());
        typeList.setToolTipText(builder2.toString());
    }

    private void updateTypeList() {
        typeList.removeActionListener(typeAction);
        typeList.removeAllItems();
        Iterator ite = engine.getListOfTypeElement(index).iterator();
        while (ite.hasNext()) {
            typeList.addItem(ite.next());
        }
        typeList.addActionListener(typeAction);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form .
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        lemmeValue = new javax.swing.JTextField();
        typeList = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setToolTipText("");
        lemmeValue.setFont(new java.awt.Font("Arial", 0, 11));
        lemmeValue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lemmeValueFocusGained(evt);
            }
        });
        lemmeValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lemmeValueKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel1.add(lemmeValue, gridBagConstraints);

        typeList.setFont(new java.awt.Font("Arial", 0, 11));
        typeList.setMinimumSize(new java.awt.Dimension(80, 18));
        typeList.setPreferredSize(new java.awt.Dimension(80, 22));
        typeList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                typeListFocusGained(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel1.add(typeList, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(jPanel1, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    private void lemmeValueKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lemmeValueKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!lemmaIsEmpty()) {
                setSuggestion();
                setInWait();

                SearchTask search = new SearchTask(lemmeValue.getText());
                search.execute();
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_DELETE || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            if (lemmaIsEmpty()) {
                setInWait();
                SearchTask search = new SearchTask(null);
                search.execute();
            }
        }
        repaint();
    }//GEN-LAST:event_lemmeValueKeyReleased

    private void setInWait() {
        jPanel1.setBorder(BorderFactory.createTitledBorder("wait..."));
        jPanel1.setBackground(new Color(254, 251, 137, 128));
        repaint();
    }

    /**
     *Checks if the lemma is empty it means a suite of whitespace
     *of an empty string.
     *@return true if empty
     */
    private boolean lemmaIsEmpty() {
        String lemma = lemmeValue.getText();
        //remove the whitespace characters : \s
        lemma = lemma.replaceAll("\\s", "");
        return lemma.equals("");
    }

    private void selectTypeElement() {
        try {
            Integer idType = (Integer) typeList.getSelectedItem();
            if (this.lemmaIsEmpty()) {
                this.setInWait();
                this.lemmeValue.setEnabled(false);
            }
            SearchFunction search = new SearchFunction(idType);
            search.execute();

        } catch (Exception e) {
            DEBUG_LOG.error("ERROR", e);
        }
    }

    private void typeListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_typeListFocusGained
    }//GEN-LAST:event_typeListFocusGained

    private void lemmeValueFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lemmeValueFocusGained
    }//GEN-LAST:event_lemmeValueFocusGained

    private void setSuggestion() {
        String lemma = lemmeValue.getText();
        Project project = getProject();
        Collection<String> s = new Vector();
        try {
            s = XipUtilities.toLemma(project.getXip(), project.getGhandler(), lemma);
        } catch (Exception e) {
            log.error(e);
        }
        if (!s.isEmpty() && s.size() > 1) {
            String lem = (String) JOptionPane.showInputDialog(this, "Choose a lemma below ", lemma, JOptionPane.INFORMATION_MESSAGE, XIPUIUtilities.getIcon(UIConstants.CONCEPT), s.toArray(), lemma);
            if (lem != null && lem.length() > 0) {
                lemmeValue.setText(lem);
            }
        } else if (s.size() == 1) {
            lemmeValue.setText(((Vector<String>) s).get(0));
        }
    }

    public void close() {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField lemmeValue;
    private javax.swing.JComboBox typeList;
    // End of variables declaration//GEN-END:variables

    private class SearchFunction extends SwingWorker<Boolean, Void> {

        private int idType = GoldminerEngine.ANY_TYPE;

        public SearchFunction(int idType) {
            this.idType = idType;
        }

        protected Boolean doInBackground() {
            boolean success = false;
            // System.out.println("index : " + index + " type : " + idType);
            success = engine.setSelectedTypeElementForQueryNode(index, idType);
            return success;
        }

        protected void done() {
            if (idType != GoldminerEngine.ANY_TYPE) {
                if (lemmaIsEmpty()) {
                    jPanel1.setBackground(queryOK);
                    jPanel1.setBorder(BorderFactory.createTitledBorder("ready"));

                }
            } else {
                if (lemmaIsEmpty()) {
                    jPanel1.setBackground(new java.awt.Color(204, 255, 255));
                    jPanel1.setBorder(null);

                    lemmeValue.setEnabled(true);
                }
            }
            repaint();
        }
    }

    private class SearchTask extends SwingWorker<Boolean, Boolean> {

        private String lemma = null;

        public SearchTask(String lemma_) {
            this.lemma = lemma_;
            if (lemma != null) {
                //this.lemma = lemma.replaceAll("\\\\s","");
                this.lemma = lemma.trim();
            }
        }

        protected Boolean doInBackground() {
            boolean success = false;
            publish(true);
            try {
                if (lemma != null) {
                    success = engine.setLemmaForQueryNode(index, lemma);
                } else {
                    success = engine.removeLemmaForQueryNode(index);
                }
            } catch (Exception e) {
                log.error(e);
                success = false;
            }
            //publish(false);
            return success;
        }

        protected void done() {
            boolean success = false;
            try {
                success = get();
            } catch (Exception e) {
                log.error(e);
                success = false;
            }
            if (lemma != null) {
                if (success) {
                    jPanel1.setBackground(queryOK);
                    jPanel1.setBorder(BorderFactory.createTitledBorder("ready"));
                    repaint();
                } else {
                    //   warning("Error with lemma : " + lemma);
//                    JDialog dialog = new JDialog();
//                    dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
//                    dialog.setAlwaysOnTop(true);
//                    dialog.setLocationRelativeTo(jPanel1);
//                    dialog.setSize(300,200);
//                    dialog.setContentPane(suggestionPanel);
//                    dialog.setVisible(true);
                    jPanel1.setBackground(queryKO);
                    jPanel1.setBorder(BorderFactory.createTitledBorder(lemma + " not found"));
                    repaint();
                }
            } else {
                if (success) {
                    jPanel1.setBackground(new java.awt.Color(204, 255, 255));
                    jPanel1.setBorder(null);
                    repaint();
                }
            }
            updateTypeList();
            repaint();
        }

        protected void process(java.util.List<Boolean> list) {
            boolean wait = false;
            try {
                wait = list.get(0);
            } catch (Exception e) {
                log.warn(e);
                wait = false;
            }
            //this code had been commented because for some unknown reason
            //jPanel1 didn't repaint after and stay in wait as the new color and new border was set !!!
            if (wait) {
//                jPanel1.setBorder(BorderFactory.createTitledBorder("wait..."));
//                jPanel1.setBackground(new Color(254,251,137,128));
//                repaint();
            } else {
//                jPanel1.setBackground(new java.awt.Color(204, 255, 255));
//                jPanel1.setBorder(null);
//                repaint();
            }
            list.clear();
        }
    }
}//end of main class

