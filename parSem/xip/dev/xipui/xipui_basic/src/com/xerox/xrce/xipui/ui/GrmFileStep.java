/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * GrmFileStep.java
 *
 * Created on January 18, 2006, 9:48 AM
 */
package com.xerox.xrce.xipui.ui;

import com.xerox.xrce.xipui.FileFilterXip;
import com.xerox.xrce.xipui.Grm;
import com.xerox.xrce.xipui.ProjectContext;
import com.xerox.xrce.xipui.ProjectFactory;
import com.xerox.xrce.xipui.VarEnv;
import com.xerox.xrce.xipui.Xip;
import com.xerox.xrce.xipui.modules.ModuleContext;
import com.xerox.xrce.xipui.util.PathCellEditor;
import com.xerox.xrce.xipui.util.PropertiesTableModel;
import com.xerox.xrce.xipui.util.PropertyCellRenderer;
import javax.swing.*;
import java.util.*;
import java.io.*;

/**
 *
 * @author  vgrassau
 */
public class GrmFileStep extends AbstractStep {

    private Grm grm;

    /**
     * Creates new form GrmFileStep
     * @param properties
     * @param managerProperties 
     */
    public GrmFileStep(ModuleContext properties, Hashtable managerProperties) {
        super(properties);
        setManagerProperties(managerProperties);
        initComponents();
        setDescription("Grm File");
        browse.setIcon(XIPUIUtilities.getIcon(UIConstants.OPEN));
        browse.setText("");
        this.couldFinish = true;
    }

    public void close() {
        removeAll();
        this.isClosed = true;
    }

    public boolean isValide() {
        try {
            if (getGrmFile() == null || !checkStep()) {
                return false;
            } else {
                managerProperties.put(ProjectFactory.GRM, getGrmFile());

                return true;
            }
        } catch (Exception e) {
            warning("Problem with grm, check it again");
            return false;
        }
    }

    public Grm getGrmFile() {
        return this.grm;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        browseDialog = new javax.swing.JDialog();
        browseChooser = new javax.swing.JFileChooser();
        labelGrm = new javax.swing.JLabel();
        grmName = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();
        scroll = new javax.swing.JScrollPane();
        variableTable = new javax.swing.JTable();

        browseDialog.getContentPane().add(browseChooser, java.awt.BorderLayout.CENTER);

        setLayout(new java.awt.GridBagLayout());

        setBackground(new java.awt.Color(255, 255, 255));
        labelGrm.setBackground(new java.awt.Color(153, 255, 153));
        labelGrm.setFont(new java.awt.Font("Arial", 0, 11));
        labelGrm.setText("Grm file");
        labelGrm.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 0)));
        labelGrm.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(labelGrm, gridBagConstraints);

        grmName.setFont(new java.awt.Font("Arial", 0, 11));
        grmName.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 6, 4, 4);
        add(grmName, gridBagConstraints);

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(browse, gridBagConstraints);

        infoLabel.setBackground(new java.awt.Color(153, 255, 153));
        infoLabel.setFont(new java.awt.Font("Arial", 0, 11));
        infoLabel.setText("Other");
        infoLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 0)));
        infoLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(infoLabel, gridBagConstraints);

        scroll.setViewportView(variableTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(scroll, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    public void initStepManager() {
        //we initialize the variables table
        ProjectContext pc = (ProjectContext) managerProperties.get(ProjectFactory.project_context);
        setProperty(ProjectFactory.project_context, pc);
        int nbVariables = pc.getVariables().size();
        Object[][] data3 = new Object[nbVariables][2];
        boolean[][] editable3 = new boolean[nbVariables][2];
        String[] columnNames = {"name", "value"};
        Iterator ite3 = pc.getVariables().iterator();
        int i = 0;
        while (ite3.hasNext()) {
            VarEnv var = (VarEnv) ite3.next();
            data3[i][0] = var.getName();
            editable3[i][0] = false;
            data3[i][1] = var.getValue();
            editable3[i][1] = true;
            i = i + 1;
        }
        variableTable.setModel(new PropertiesTableModel(data3, editable3));
        variableTable.setDefaultEditor(java.lang.String.class, new PathCellEditor(getModuleContext()));
        variableTable.setDefaultRenderer(java.lang.String.class, new PropertyCellRenderer());
        variableTable.repaint();
        repaint();

    }

    // the main event in this step
    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        //create filter to view only files with grm extension
        FileFilterXip filter = new FileFilterXip();
        filter.addExtension("grm");
        //the defaut grm directory
        browseChooser.setCurrentDirectory(new File((String) getProperty(grm_directory)));
        browseChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        browseChooser.setFileFilter(filter);
        //ouverture de la fenetre de selection de fichier
        int returnVal = browseChooser.showOpenDialog(browseDialog);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File grmFile = browseChooser.getSelectedFile();
            // update the grm_directory in module context
            setProperty(grm_directory, grmFile.getParent());
            //get the project context
            ProjectContext context = (ProjectContext) managerProperties.get(ProjectFactory.project_context);
            // permet de vider l'envirronement si on change de fichier grm
            grm = new Grm((Xip) getProperty(xip_parser), context);
            try {
                grm.setGrmFile(grmFile);
            } catch (Exception e) {
                severe("ERROR", e);
            }
            grmName.setText(grm.getName());
        //read the grm file
        //grm.read();
        }
        browseChooser.removeChoosableFileFilter(filter);
        // we load a checking on the grm file
        //sometimes we have unknwon variable or undeclared varible in a grm file
        //we need to create these for the project.
        checkStep();

    }//GEN-LAST:event_browseActionPerformed

    public boolean checkStep() {
        Collection<String> badVariables = null;
        boolean success = false;
        if (grm != null) {
            try {
                badVariables = grm.resolve();
            } catch (Exception e) {
                severe("ERROR", e);
                badVariables = new Vector();
            }
        }
        if (badVariables == null) {
            success = true;
        } else {
            success = false;
            for (Iterator<String> it = badVariables.iterator(); it.hasNext();) {
                String varName = it.next();
                warning("You have an undefined variable in your file : " + varName);
                setProperty(ProjectFactory.project_context, managerProperties.get(ProjectFactory.project_context));
                UIVariable uiVar = new UIVariable(getModuleContext(), varName);
                uiVar.setValue(grm.getGrmFile().getParent());
                uiVar.setVisible(true);
                initStepManager();
            }
        }
        return success;
    }

    /**
     *Charge la politique du mode de l'utilisateur
     *@param mode mode utilisateur a charger.
     */
    public void loadModePolicy(short mode) {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JFileChooser browseChooser;
    private javax.swing.JDialog browseDialog;
    private javax.swing.JTextField grmName;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel labelGrm;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable variableTable;
    // End of variables declaration//GEN-END:variables
}
