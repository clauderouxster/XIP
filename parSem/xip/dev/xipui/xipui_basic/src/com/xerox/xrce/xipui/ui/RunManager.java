/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 ****************************************************************************************
 * Copyright (c) 2005 Xerox Corporation                                                 *
 * Xerox Research Centre Europe - Grenoble                                              *
 * All Rights Reserved                                                                  *
 * Copyright protection claimed includes all forms and matters of copyrightable         *
 * material and information now allowed by statutory or judicial law or                 *
 * hereinafter granted, including without limitation, material generated from           *
 * the software programs which are displayed on the screen such as icons,               *
 * screen display looks, etc. All rights reserved. No part of this document             *
 * may be reproduced, stored in a retrieval system, or transmitted, in any              *
 * form or by any means, electronic, mechanical, photocopied, recorded, or              *
 * otherwise, without prior written consent from XEROX corporation.                     *
 ****************************************************************************************
 */
package com.xerox.xrce.xipui.ui;

import com.xerox.xrce.xipui.CorpusElement;
import com.xerox.xrce.xipui.CorpusSet;
import com.xerox.xrce.xipui.Project;
import com.xerox.xrce.xipui.RunContext;
import com.xerox.xrce.xipui.modules.ModuleContext;
import com.xerox.xrce.xipui.modules.PanelModule;
import com.xerox.xrce.xipui.ui.editor.DefaultEditor;
import com.xerox.xrce.xipui.ui.editor.InputEditor;
import java.util.*;
import javax.swing.*;
import java.awt.*;

/**
 * Cette classe permet de parser des CopusElement et d'afficher les resultats.
 *
 * @author  Vianney Grassaud
 */
public class RunManager extends PanelModule {

    public static final String ACTION_CLOSE = "ACTION_CLOSE";
    /** titre de l'objet */
    public static final String TITLE = "Results";
    /** table des actions du run */
    private Hashtable<Object, Action> actions;
    /** Compteur pour le nombre de "parse" lance  */
    private int cpt = 0;
    /** manage the xip display options */
    //private OptionXipRun options;
    private boolean enabledInput;
    /** Vector of AbstractResult */
    private Vector vectorOfResults;

    /**
     *Constructeur
     * @param context 
     */
    public RunManager(ModuleContext context) {
        super(context);

        this.setName(TITLE);
        this.vectorOfResults = new Vector();
        actions = new Hashtable();
        initComponents();

        initTableOfAction();
        showToolbar();
        setEnabledInput(true);

        log.info("Run manager is loaded correctly");
        this.setEnabled(false);
    }

    private void showToolbar() {
        //methode importante permettant d'instancier la barre d'outils pour lancer
        //des executions
        initToolBar();
        JMenuBar mb = (JMenuBar) getProperty(MENUBAR);
        mb.add(toolBar);
        mb.revalidate();
        mb.repaint();

    }

    public void addAction(Action action) {
        Object name = action.getValue(Action.NAME);
        action.setEnabled(isEnabled());
        actions.put(name, action);
        addButton(action);

    }

    public void setEnabled(boolean b) {
        super.setEnabled(b);
        Iterator ite = actions.keySet().iterator();
        while (ite.hasNext()) {
            Object key = ite.next();
            Action act = actions.get(key);
            act.setEnabled(b);
        }
    }

    public void close() {
        removeAll();
        this.isClosed = true;
    }

    /**
     *Permet de selectionner un resultat dans le resultManager
     *@param name nom du resultat a selectionner
     */
    public void setSelectedResult(String name) {
        int index = this.resultManager.indexOfTab(name);
        if (index != -1) {
            this.resultManager.setSelectedIndex(index);

        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
// <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        toolBar = new javax.swing.JToolBar();
        inputRadio = new javax.swing.JRadioButton();
        resultManager = new javax.swing.JTabbedPane();
        
        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.setAlignmentY(0.5F);
        toolBar.setAutoscrolls(true);
        toolBar.setBorderPainted(false);
        toolBar.setMaximumSize(new java.awt.Dimension(300, 23));
        toolBar.setName("Run Manager\n");
        toolBar.setPreferredSize(new java.awt.Dimension(222, 23));
        inputRadio.setFont(new java.awt.Font("Arial", 0, 11));
        inputRadio.setText("Input");
        inputRadio.setToolTipText("Parse only input");
        inputRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        inputRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
        inputRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputRadioActionPerformed(evt);
            }
        });
        
        toolBar.add(inputRadio);
        
        
        setLayout(new java.awt.BorderLayout());
        
        setBackground(new java.awt.Color(255, 255, 255));
        resultManager.setBackground(new java.awt.Color(255, 255, 255));
        resultManager.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        resultManager.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        resultManager.setFont(new java.awt.Font("Arial", 0, 11));
        add(resultManager, java.awt.BorderLayout.CENTER);
        
    }// </editor-fold>//GEN-END:initComponents

    private void inputRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputRadioActionPerformed
        setFromInput(this.inputRadio.isSelected());
    }//GEN-LAST:event_inputRadioActionPerformed

    /***
     *Initialise la barre d'outil pour le Run, on n'affiche pas les actions qui sont disabled
     *
     *
     */
    private void initToolBar() {
        //toolBar.addSeparator();
        if (isEnabledInput()) {
            toolBar.add(inputRadio);
        }
        inputRadio.setSelectedIcon(XIPUIUtilities.getIcon(UIConstants.INPUT));
        inputRadio.setIcon(XIPUIUtilities.getIcon(UIConstants.CORPUS_OPEN));
        inputRadio.setText("parse from");
        toolBar.addSeparator();
        toolBar.repaint();
    }

    public boolean isEnabledInput() {
        return this.enabledInput;
    }

    private void addButton(Action action) {
        if (action != null) {
            toolBar.add(XIPUIUtilities.createJButton("", action, false));
        }
        toolBar.repaint();
    }

    public JTabbedPane getResultManagerComponent() {
        return this.resultManager;
    }

    /***
     *Ferme et enleve un panneau resultant d'un execution.
     *
     */
    private void closeResult() {
        int index = resultManager.getSelectedIndex();
        if (index != -1) {
            Result res = (Result) resultManager.getComponentAt(index);
            removeResult(res);

        }

    }

    /**
     *Constructs the vector of DebugElement used to be parse.
     *The Vector can be created from the input or a list of CorpusElement choosen
     *from the CorpusSource.
     *@return a Vector of CorpusElement
     * @throws java.lang.Exception 
     */
    public Vector makeListOfCorpusElementToParse() throws Exception {
        Vector listeToParse = new Vector();
        //if we want to parse from the input
        if (this.inputRadio.isSelected()) {
            DefaultEditor editor = (DefaultEditor) getProperty(module_input);
            editor.save();

            // on recupere le texte selectionne.
            String fromInput = editor.getSelected();
            if (fromInput == null || fromInput.equals("")) {
                // on recupere la derniere phrase de l'input :
                fromInput = editor.getRowAtCaret();
                if (fromInput == null || fromInput.equals("")) {
                    listeToParse = new Vector();
                }
            }
            if (fromInput != null) {
                listeToParse.add(CorpusElement.createTempCorpusElement(fromInput)); //creation d'un corpusElement temporaire

            }

        } else {
            Project project = getProject();
            Collection listOfNames = project.getAllCorpusSetName();

            for (Iterator<String> it = listOfNames.iterator(); it.hasNext();) {
                CorpusSet cs = project.getCorpusSet(it.next());
                Vector ceOfcs = cs.getAllCorpusElement();
                for (int i = 0; i < ceOfcs.size(); i++) {
                    CorpusElement ce = (CorpusElement) ceOfcs.get(i);
                    if (ce.isToParse()) {
                        listeToParse.add(ce);
                    }
                }

            }
        }
        return listeToParse;
    }

    public void setFromInput(boolean b) {
        this.inputRadio.setSelected(b);
        if (b) {
            this.inputRadio.setText("Input");
            this.inputRadio.setToolTipText("Parse from input");
        } else {
            this.inputRadio.setText("Corpus");
            this.inputRadio.setToolTipText("Parse from file(s)");
        }

    }

    public void prepareForRunning() throws Exception {

        RunContext runContext = getProject().getRunContext();
        // we create the vector of corpusElement to parse
        Vector listeToParse = makeListOfCorpusElementToParse();
        //if we are in a single mode ,we need to clear the resultManager
        if (runContext.isSingleMode()) {
            clearResultManager();
        }
        //two parameters for a result the id and the list of CorpusElements
        runContext.setProperty(RunContext.CORPUS, listeToParse);
        cpt = cpt + 1;
        runContext.setProperty(RunContext.ID_RESULT, cpt);
    }

    private void initTableOfAction() {
        AbstractAction close = new AbstractAction("close", XIPUIUtilities.getIcon(UIConstants.CLOSE)) {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeResult();
            }
        };
        close.putValue(javax.swing.Action.SHORT_DESCRIPTION, "Close");
        setProperty("CLOSE_RESULT", close);
    }

    /**
     *
     * @param name
     * @return 
     */
    public javax.swing.Action getAction(String name) {
        return actions.get(name);
    }

    /**
     *
     * @param name
     * @param enabled 
     */
    public void setEnabledAction(String name, boolean enabled) {
        javax.swing.Action action = this.actions.get(name);
        if (action != null) {
            action.setEnabled(enabled);
        }
        toolBar.repaint();
    }

    /**
     *
     * @param b 
     */
    public void setEnabledInput(boolean b) {
        this.enabledInput = b;
        if (!enabledInput) {
            info("Run Manager module without input, remove the Input module");
            JTabbedPane tab = (JTabbedPane) getProperty(OUTPUT_TABBED);
            tab.remove((InputEditor) getProperty(module_input));
            this.inputRadio.setEnabled(false);
            this.inputRadio.setSelected(false);
        }
        setFromInput(b);
    }

    /**
     *
     * @param result 
     */
    public void addResult(Result result) {
        vectorOfResults.add(result);
        resultManager.addTab(result.getResultName(), result.getIcon(), (Component) result, result.getResultName());
        resultManager.setSelectedComponent((Component) result);
    }

    public void removeResult(Result result) {
        resultManager.remove((Component) result);
        vectorOfResults.remove(result);
        result.closeModule();
    }

    public void clearResultManager() {
        for (int i = 0; i < vectorOfResults.size(); i++) {
            Result result = (Result) vectorOfResults.get(i);
            removeResult(result);
        }
        vectorOfResults.clear();
        resultManager.removeAll();

    }
// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton inputRadio;
    private javax.swing.JTabbedPane resultManager;
    private javax.swing.JToolBar toolBar;
// End of variables declaration//GEN-END:variables
}
