/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * NewFileStep.java
 *
 * Created on March 8, 2006, 10:16 AM
 */
package com.xerox.xrce.xipui.ui;

import com.xerox.xrce.xipui.Project;
import com.xerox.xrce.xipui.ProjectContext;
import com.xerox.xrce.xipui.modules.ModuleContext;
import java.io.*;
import java.util.*;
import java.awt.*;
import javax.swing.*;

/**
 *
 * @author  vgrassau
 */
public class NewFileStep extends AbstractStep {

    private File newFile;

    /**
     * Creates new form NewFileStep
     * @param properties
     * @param managerProperties 
     */
    public NewFileStep(ModuleContext properties, Hashtable managerProperties) {
        super(properties);
        setManagerProperties(managerProperties);
        initComponents();
        setDescription("Choose name and location");
        this.infoCreated.setIcon(XIPUIUtilities.getIcon(UIConstants.CREATE));
        this.couldFinish = true;
        this.optionPanel.setVisible(false);
    }

    public void initStepManager() {
        this.name.setText("newFile");
        String cat = (String) managerProperties.get(FileStepManager.category_file);
        Project p = getProject();
        if (p != null) {
            ProjectContext pc = p.getProjectContext();
            if (cat.equals(TypeFileStep.grammar_file)) {
                directory.setText((String) pc.getProperty(ProjectContext.default_directory));
                optionPanel.setVisible(false);
            } else if (cat.equalsIgnoreCase(TypeFileStep.corpus_file)) {
                directory.setText((String) pc.getProperty(ProjectContext.corpusElement_directory));
                initCorpusSetPane();
            } else {
                directory.setText((String) pc.getProperty(ProjectContext.default_directory));
                optionPanel.setVisible(false);
            }
        } else {
            directory.setText((String) getProperty(project_directory));
            optionPanel.setVisible(false);
        }
        this.createdFileUpdate();
    }

    private void initCorpusSetPane() {
        Project p = getProject();
        if (p != null) {
            for (Iterator<String> it = p.getAllCorpusSetName().iterator(); it.hasNext();) {
                corpusSetList.addItem(it.next());
            }
        }
        DefaultListCellRenderer renderer = new DefaultListCellRenderer();
        renderer.setIcon(XIPUIUtilities.getIcon(UIConstants.CORPUS));
        renderer.setBackground(Color.blue);
        renderer.setOpaque(true);
        corpusSetList.setRenderer(renderer);
        corpusSetList.setEditable(false);
        this.optionPanel.add(corpusSetPane, BorderLayout.CENTER);
        this.optionPanel.setVisible(true);
    }

    public void createdFileUpdate() {
        String type = (String) this.managerProperties.get(FileStepManager.type_file);
        String created = directory.getText() + File.separator + name.getText() + "." + type;
        managerProperties.put(FileStepManager.file_created, created);
        File f = new File(created.replace('\\', '/'));
        boolean error = false;
        if (f.exists()) {
            error = true;
            labError.setText("The file already exists !!");
            labError.setIcon(XIPUIUtilities.getIcon(UIConstants.CODE_ERROR));
        } else {
            labError.setText("");
            labError.setIcon(null);
        }
        this.createdFile.setText(created);
    }

    public void loadModePolicy(short mode) {
    }

    public boolean isValide() {
        String parent = (String) corpusSetList.getSelectedItem();
        String category = (String) managerProperties.get(FileStepManager.category_file);
        Project p = getProject();
        if (category.equals(TypeFileStep.corpus_file)) {
            if (parent != null && p.getCorpusSet(parent) != null) {
                managerProperties.put(FileStepManager.corpus_parent, parent);
            } else {
                return false;
            }
        }
        if (name.getText().equals("")) {
            warning("Your name is empty !!!");
            return false;
        }
        return true;
    }

    public void close() {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        browseDialog = new javax.swing.JDialog();
        fileChooser = new javax.swing.JFileChooser();
        corpusSetPane = new javax.swing.JPanel();
        corpusSetlab = new javax.swing.JLabel();
        corpusSetList = new javax.swing.JComboBox();
        labelName = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        labelDirectory = new javax.swing.JLabel();
        directory = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        optionPanel = new javax.swing.JPanel();
        infoCreated = new javax.swing.JLabel();
        createdFile = new javax.swing.JTextField();
        labError = new javax.swing.JLabel();

        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        browseDialog.getContentPane().add(fileChooser, java.awt.BorderLayout.CENTER);

        corpusSetPane.setLayout(new java.awt.GridBagLayout());

        corpusSetlab.setBackground(new java.awt.Color(153, 255, 153));
        corpusSetlab.setFont(new java.awt.Font("Arial", 0, 11));
        corpusSetlab.setText("CorpusSet Parent");
        corpusSetlab.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        corpusSetlab.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        corpusSetPane.add(corpusSetlab, gridBagConstraints);

        corpusSetList.setFont(new java.awt.Font("Arial", 0, 11));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        corpusSetPane.add(corpusSetList, gridBagConstraints);

        setLayout(new java.awt.GridBagLayout());

        labelName.setBackground(new java.awt.Color(153, 255, 153));
        labelName.setFont(new java.awt.Font("Arial", 0, 11));
        labelName.setText("Name");
        labelName.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labelName.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 2, 8);
        add(labelName, gridBagConstraints);

        name.setFont(new java.awt.Font("Arial", 0, 11));
        name.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                nameInputMethodTextChanged(evt);
            }
        });
        name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameKeyTyped(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 8, 8);
        add(name, gridBagConstraints);

        labelDirectory.setBackground(new java.awt.Color(153, 255, 153));
        labelDirectory.setFont(new java.awt.Font("Arial", 0, 11));
        labelDirectory.setText("Directory");
        labelDirectory.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labelDirectory.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 4, 8);
        add(labelDirectory, gridBagConstraints);

        directory.setEditable(false);
        directory.setFont(new java.awt.Font("Arial", 0, 11));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 8, 8);
        add(directory, gridBagConstraints);

        browse.setFont(new java.awt.Font("Arial", 0, 11));
        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 8, 8);
        add(browse, gridBagConstraints);

        optionPanel.setLayout(new java.awt.BorderLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 8, 8);
        add(optionPanel, gridBagConstraints);

        infoCreated.setBackground(new java.awt.Color(153, 255, 153));
        infoCreated.setFont(new java.awt.Font("Arial", 0, 11));
        infoCreated.setText("Created File");
        infoCreated.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        infoCreated.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 2, 8);
        add(infoCreated, gridBagConstraints);

        createdFile.setEditable(false);
        createdFile.setFont(new java.awt.Font("Arial", 0, 11));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 8);
        add(createdFile, gridBagConstraints);

        labError.setFont(new java.awt.Font("Arial", 0, 11));
        labError.setForeground(new java.awt.Color(255, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 8, 7, 8);
        add(labError, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void nameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyReleased
        createdFileUpdate();
    }//GEN-LAST:event_nameKeyReleased

    private void nameInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_nameInputMethodTextChanged
        createdFileUpdate();
    }//GEN-LAST:event_nameInputMethodTextChanged

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        fileChooser.setCurrentDirectory(new File(directory.getText()));
        //ouverture de la fenetre de selection de fichier
        int returnVal = fileChooser.showOpenDialog(browseDialog);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File dir = fileChooser.getSelectedFile();
            directory.setText(dir.getAbsolutePath());
            Project p = getProject();
            if (p != null) {
                ProjectContext pc = p.getProjectContext();
                String cat = (String) managerProperties.get(FileStepManager.category_file);
                if (cat != null && cat.equals(TypeFileStep.corpus_file)) {
                    pc.setProperty(ProjectContext.corpusElement_directory, dir.getAbsolutePath());
                } else {
                    pc.setProperty(ProjectContext.default_directory, dir.getAbsolutePath());
                }
            }
        }
        this.createdFileUpdate();

    }//GEN-LAST:event_browseActionPerformed

    private void nameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameKeyTyped
        this.createdFileUpdate();
    }//GEN-LAST:event_nameKeyTyped
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JDialog browseDialog;
    private javax.swing.JComboBox corpusSetList;
    private javax.swing.JPanel corpusSetPane;
    private javax.swing.JLabel corpusSetlab;
    private javax.swing.JTextField createdFile;
    private javax.swing.JTextField directory;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel infoCreated;
    private javax.swing.JLabel labError;
    private javax.swing.JLabel labelDirectory;
    private javax.swing.JLabel labelName;
    private javax.swing.JTextField name;
    private javax.swing.JPanel optionPanel;
    // End of variables declaration//GEN-END:variables
}
