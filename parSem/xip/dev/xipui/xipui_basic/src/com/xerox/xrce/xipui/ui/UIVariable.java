/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 ****************************************************************************************
 * Copyright (c) 2005 Xerox Corporation                                                 *
 * Xerox Research Centre Europe - Grenoble                                              *
 * All Rights Reserved                                                                  *
 * Copyright protection claimed includes all forms and matters of copyrightable         *
 * material and information now allowed by statutory or judicial law or                 *
 * hereinafter granted, including without limitation, material generated from           *
 * the software programs which are displayed on the screen such as icons,               *
 * screen display looks, etc. All rights reserved. No part of this document             *
 * may be reproduced, stored in a retrieval system, or transmitted, in any              *
 * form or by any means, electronic, mechanical, photocopied, recorded, or              *
 * otherwise, without prior written consent from XEROX corporation.                     *
 ****************************************************************************************
 */
package com.xerox.xrce.xipui.ui;

import com.xerox.xrce.xipui.Project;
import com.xerox.xrce.xipui.ProjectContext;
import com.xerox.xrce.xipui.ProjectFactory;
import com.xerox.xrce.xipui.Xip;
import com.xerox.xrce.xipui.modules.DialogModule;
import com.xerox.xrce.xipui.modules.ModuleContext;
import javax.swing.*;
import java.io.*;

public class UIVariable extends DialogModule {

    private boolean isCanceled = true;

    /** Creates new form UIVariable
     * @param context
     * @param name_ 
     */
    public UIVariable(ModuleContext context, String name_) {
        super(context);
        initComponents();
        this.name.setText(name_);
        try {
            Xip xip = (Xip) getProperty(xip_parser);
            value.setText(xip.getEnv(name_));
        } catch (Exception e) {
            value.setText(System.getenv(name_));
        }
        this.setTitle("unknown variable : " + name_);
        this.setSize(500, 150);
    }

    public String getVariableValue() {
        return this.value.getText();
    }

    public String getVariableName() {
        return this.name.getText();
    }

    public void setValue(String value_) {
        if (value_ != null && !value_.equals("")) {
            value.setText(value_);
        }
    }

    public void close() {
        isClosed = true;
        isCanceled = false;
        dispose();
    }

    public boolean wasCanceled() {
        return this.isCanceled;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dialogChooser = new javax.swing.JDialog();
        fileChooser = new javax.swing.JFileChooser();
        info = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        value = new javax.swing.JTextField();
        ok = new javax.swing.JButton();
        browse = new javax.swing.JButton();

        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        dialogChooser.getContentPane().add(fileChooser, java.awt.BorderLayout.CENTER);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setLocationByPlatform(true);
        setModal(true);
        info.setBackground(new java.awt.Color(153, 255, 153));
        info.setFont(new java.awt.Font("Arial", 0, 11));
        info.setText("Path Creation");
        info.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        info.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(info, gridBagConstraints);

        name.setBackground(new java.awt.Color(255, 255, 255));
        name.setFont(new java.awt.Font("Arial", 0, 11));
        name.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(name, gridBagConstraints);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("=");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(value, gridBagConstraints);

        ok.setText("Ok");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 3, 3, 3);
        getContentPane().add(ok, gridBagConstraints);

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 3);
        getContentPane().add(browse, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        Xip xip = (Xip) getProperty(xip_parser);
        Project project = getProject();
        ProjectContext pc;
        if (project == null) {
            //we try to create a project so it doesn't instanciate in the module context
            //trying to get the project context
            pc = (ProjectContext) getProperty(ProjectFactory.project_context);
        } else {
            pc = getProject().getProjectContext();
        }
        try {
            pc.addVariable(name.getText(), value.getText());
            //  xip.setEnv(name.getText(),value.getText());
            if (name.getText().equals(ProjectContext.working_directory) && project != null) {
                xip.setWorkingPath(project.getGhandler(), value.getText());
            }
        } catch (Exception e) {
            warning("could not create your value : " + e);
            log.error(e);
        }
        close();
    }//GEN-LAST:event_okActionPerformed

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        Project project = getProject();
        String grmPath;
        if (project == null) {
            //we try to create a project so it doesn't instanciate in the module context
            //trying to get the project context
            grmPath = (String) getProperty(grm_directory);
        } else {
            grmPath = new File(getProject().getFullpathGrm()).getParent();
        }
        if (value.getText() != null && !value.getText().equals("") && !value.getText().equals("null")) {
            grmPath = value.getText();
        }
        File grm = new File(grmPath);
        fileChooser.setCurrentDirectory(grm);
        int returnVal = fileChooser.showOpenDialog(dialogChooser);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File path_ = fileChooser.getSelectedFile();
            String oldValue = value.getText().trim();
            if (oldValue.equals("")) {
                value.setText(path_.getAbsolutePath());
            } else {
                value.setText(oldValue + File.pathSeparator + path_.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_browseActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JDialog dialogChooser;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel info;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel name;
    private javax.swing.JButton ok;
    private javax.swing.JTextField value;
    // End of variables declaration//GEN-END:variables
}
