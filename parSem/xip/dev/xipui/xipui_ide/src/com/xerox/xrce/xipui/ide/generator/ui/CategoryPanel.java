/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 ****************************************************************************************
 * Copyright (c) 2006 Xerox Corporation                                                 *
 * Xerox Research Centre Europe - Grenoble                                              *
 * All Rights Reserved                                                                  *
 * Copyright protection claimed includes all forms and matters of copyrightable         *
 * material and information now allowed by statutory or judicial law or                 *
 * hereinafter granted, including without limitation, material generated from           *
 * the software programs which are displayed on the screen such as icons,               *
 * screen display looks, etc. All rights reserved. No part of this document             *
 * may be reproduced, stored in a retrieval system, or transmitted, in any              *
 * form or by any means, electronic, mechanical, photocopied, recorded, or              *
 * otherwise, without prior written consent from XEROX corporation.                     *
 ****************************************************************************************
 */
package com.xerox.xrce.xipui.ide.generator.ui;

import com.xerox.xrce.xipui.ui.graph.*;

import com.xerox.xrce.xipui.modules.ModuleContext;
import java.util.*;
import com.xerox.jxip.*;

/**
 *
 * @author csaillet
 */
public class CategoryPanel extends GeneralPanel {

    /** Creates a new instance of CategoryPanel
     * @param context
     * @param id 
     */
    public CategoryPanel(ModuleContext context, int id) {
        super(context, id);
        initComponents();
        repaint();
        setPageDoc("/com/xerox/xrce/xipui/ide/generator/doc/category.htm");
        setProperty("panel_", this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        String typeRule = (String) this.getProperty("choiceRule");
        choiceRuleBox.setSelectedItem(typeRule);

        String choiceCategory = (String) this.getProperty("category");
        if (choiceCategory.equals("")) {
            choiceCategory = "?";
        }
        choiceCategoryBox.setSelectedItem(choiceCategory);

    }// </editor-fold>

    public void initPanel() {
        addRuleButton.setVisible(false);
        clearTempFileButton.setVisible(false);
        clearButton.setEnabled(false);
        ruleLabel.setEnabled(false);
        choiceRuleBox.setEnabled(false);
        dependencyLabel.setVisible(false);
        dependencyBox.setVisible(false);
        longestBox.setVisible(false);
        indexBox.setVisible(false);
        outputLabel.setVisible(false);
        fileRadioButton.setVisible(false);
        bufferRadioButton.setVisible(false);
    }

    public void next() {
        String choiceCategory = new String();
        choiceCategory = (String) choiceCategoryBox.getSelectedItem();
        this.setProperty("category", choiceCategory);
        BodyPanel body = new BodyPanel(getModuleContext(), id);
        body.bodyP();
    }

    public void back() {
        this.setProperty("category", "");
        SelectionRulePanel selection = new SelectionRulePanel(getModuleContext(), id);
        selection.selectionP();
    }

    public void clear() {
    }

    public void close() {
    }

    public void generateRule() {
        SessionGraph session = getModuleContext().getSessionGraph(false, id);
        Vector v = session.getNodeGraphSelected();
        //deselection automatique de tout noeuds selectionnes dans l arbre de chunks
        if (v.size() != 0) {
            warning("Wrong choice !");
            long index = ((NodeGraph) v.firstElement()).getIndex();
            if (((NodeGraph) v.firstElement()).getSelectedObject().getObject() instanceof XipNode) {
                session.unSelectXipNode(index);
            } else if (((NodeGraph) v.firstElement()).getSelectedObject().getObject() instanceof XipDependency) {
                session.unSelectXipDependency(index);
            }
        }
    }

    public void indexWord() {
    }

    public void lonMatch() {
    }

    public void categoryP() {
        CategoryPanel category = new CategoryPanel(getModuleContext(), id);
        this.refreshTabbedPane(category);
    }
}
