/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * GeneralPanel.java
 *
 * Created on 22 May 2006, 12:08
 */
package com.xerox.xrce.xipui.ide.generator.ui;

import com.xerox.xrce.xipui.ui.editor.EditFileAction;
import com.xerox.xrce.xipui.ui.grammar.SpecialisationEditor;
import com.xerox.xrce.xipui.ide.ui.Generator;
import com.xerox.xrce.xipui.modules.ModuleContext;
import com.xerox.xrce.xipui.modules.PanelModule;
import com.xerox.xrce.xipui.ui.UIConstants;
import com.xerox.xrce.xipui.ui.XIPUIUtilities;
import java.io.*;
import java.awt.*;
import java.util.*;
import javax.swing.*;
import com.xerox.jxip.*;
import javax.swing.text.html.*;
import javax.swing.event.*;
import javax.swing.text.*;

/**
 *
 * @author  csaillet
 */
public abstract class GeneralPanel extends PanelModule implements HyperlinkListener {
//    protected Component rootGP;

    protected int id;
    static public final short GRAMMAR_EDITOR = 1;

    /** Creates new form GeneralPanel
     * @param context
     * @param id 
     */
    public GeneralPanel(ModuleContext context, int id) {
        super(context);
        this.id = id;
        initComponents();
        initPanel();
        addDependencyBox();
        addChoiceCategoryBox();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        ruleLabel = new javax.swing.JLabel();
        dependencyLabel = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        outputLabel = new javax.swing.JLabel();
        bufferRadioButton = new javax.swing.JRadioButton();
        dependencyBox = new javax.swing.JComboBox();
        choiceCategoryBox = new javax.swing.JComboBox();
        longestBox = new javax.swing.JCheckBox();
        indexBox = new javax.swing.JCheckBox();
        fileRadioButton = new javax.swing.JRadioButton();
        choiceRuleBox = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        addRuleButton = new javax.swing.JButton();
        clearTempFileButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(1250, 240));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        ruleLabel.setText(" Rule   ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(ruleLabel, gridBagConstraints);

        dependencyLabel.setText("Dependency   ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(dependencyLabel, gridBagConstraints);

        categoryLabel.setText("Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(categoryLabel, gridBagConstraints);

        outputLabel.setText("    output selection ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel1.add(outputLabel, gridBagConstraints);

        buttonGroup1.add(bufferRadioButton);
        bufferRadioButton.setText("in buffer");
        bufferRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        bufferRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        bufferRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bufferRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(bufferRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(dependencyBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(choiceCategoryBox, gridBagConstraints);

        longestBox.setText("Longest match");
        longestBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        longestBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        longestBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longestBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(longestBox, gridBagConstraints);

        indexBox.setText("Index on last word");
        indexBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        indexBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        indexBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(indexBox, gridBagConstraints);

        buttonGroup1.add(fileRadioButton);
        fileRadioButton.setText("in current file");
        fileRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        fileRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        fileRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(fileRadioButton, gridBagConstraints);

        choiceRuleBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dependency", "Sequence", "ID Rule", "Term", "Tagging", "Marking" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(choiceRuleBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanel1, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        jPanel3.add(backButton, gridBagConstraints);

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(nextButton, gridBagConstraints);

        clearButton.setText("Clear Selection");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(clearButton, gridBagConstraints);

        addRuleButton.setText("Add rule");
        addRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRuleButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(addRuleButton, gridBagConstraints);

        clearTempFileButton.setText("Clear buffer");
        clearTempFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTempFileButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        jPanel3.add(clearTempFileButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanel3, gridBagConstraints);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jEditorPane1.setEditable(false);
        jScrollPane1.setViewportView(jEditorPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane1, gridBagConstraints);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane2, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void indexBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexBoxActionPerformed
        indexWord();
    }//GEN-LAST:event_indexBoxActionPerformed

    private void longestBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longestBoxActionPerformed
        lonMatch();
    }//GEN-LAST:event_longestBoxActionPerformed

    private void bufferRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bufferRadioButtonActionPerformed
        addRuleButton.setVisible(true);
        clearTempFileButton.setVisible(true);
        setPageDoc("/com/xerox/xrce/xipui/ide/generator/doc/buffer.htm");
        EditFileAction editFileAction = new EditFileAction(getModuleContext());
        editFileAction.putValue(EditFileAction.ICON, XIPUIUtilities.getIcon(UIConstants.CODE));
        editFileAction.setType(EditFileAction.GRAMMAR_EDITOR);
        File file = new File(getProject().getFullName() + "/Grammar/output.xip");
        if (file.exists()) {
            editFileAction.setFile(file);
            editFileAction.actionPerformed(evt);
        } else {
            try {
                FileWriter rd = new FileWriter(getProject().getFullName() + "/Grammar/output.xip");
                File fl = new File(getProject().getFullName() + "/Grammar/output.xip");
                editFileAction.setFile(fl);
                editFileAction.actionPerformed(evt);
            } catch (Exception e) {
                DEBUG_LOG.trace(e);
            }
        }
    }//GEN-LAST:event_bufferRadioButtonActionPerformed

    private void fileRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileRadioButtonActionPerformed
        addRuleButton.setVisible(true);
        clearTempFileButton.setVisible(false);
        setPageDoc("/com/xerox/xrce/xipui/ide/generator/doc/currentFile.htm");
        //ouverture du fichier courant
        EditFileAction editFileAction = new EditFileAction(getModuleContext());
        editFileAction.putValue(EditFileAction.ICON, XIPUIUtilities.getIcon(UIConstants.CODE));
        editFileAction.setType(EditFileAction.GRAMMAR_EDITOR);
        Generator debView = (Generator) getProperty(Generator.generator_module);
        RuleLoaded rload = debView.getRuleLimit();
        File file = rload.getFile();
        if (file != null) {
            editFileAction.setFile(file);
            editFileAction.actionPerformed(evt);
        } else {
            warning("no file!");
        }
    }//GEN-LAST:event_fileRadioButtonActionPerformed

    private void clearTempFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTempFileButtonActionPerformed
        JTabbedPane pane = (JTabbedPane) getProperty(GeneralPanel.CENTER_TABBED);
        Component comp = pane.getSelectedComponent();
        int index = pane.getSelectedIndex();
        String title = pane.getTitleAt(index);
        if (comp instanceof SpecialisationEditor) {
            SpecialisationEditor specEdit = (SpecialisationEditor) comp;
            if (title.equals("output.xip")) {
                // remplacer tout le contenu par
                long start = 0;
                int len = specEdit.getLenght();
                long end = (long) len;
                specEdit.replace(start, end, "//This file is generated by the generator. \r\n");
                specEdit.save();
            }
        }
    }//GEN-LAST:event_clearTempFileButtonActionPerformed

    private void addRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRuleButtonActionPerformed
        try {
            JTabbedPane pane = (JTabbedPane) getProperty(GeneralPanel.CENTER_TABBED);
            Component comp = pane.getSelectedComponent();
            int index = pane.getSelectedIndex();
            String title = pane.getTitleAt(index);
            if (comp instanceof SpecialisationEditor) {
                SpecialisationEditor specEdit = (SpecialisationEditor) comp;
                String sentence = (String) this.getProperty("sentence");
                String rule = (String) this.getProperty("ruleResult");
                long caret = (long) specEdit.getCaretPosition();
                JOptionPane optPane = new JOptionPane();
                System.out.println("specEdit.getLength = " + specEdit.getLenght());
                if (title.equals("output.xip") && specEdit.getLenght() == 0) {
                    specEdit.write(caret, "//This file is generated by the generator. \r\n" + "\n\r" + "//@input\"" + sentence + "\"\r\n" + "1>" + rule + "\n\r");
                    specEdit.save();
                    repaint();
                } else {
                    specEdit.write(caret, "//@input\"" + sentence + "\"\r\n" + "1>" + rule + "\n\r");
                    specEdit.save();
                    repaint();
                }
            } else {
                // si le comp n est pas un SpecialisationEditor
                warning("you can't add your rule in this file !");
            }
        } catch (Exception e) {
            DEBUG_LOG.trace(e);
        }
    }//GEN-LAST:event_addRuleButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        next();
    }//GEN-LAST:event_nextButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        back();
    }//GEN-LAST:event_backButtonActionPerformed

    //str doit etre un chemin vers une ressource
    public void setPageDoc(String str) {
        try {
            this.jEditorPane1.setPage(getClass().getResource(str));
            ((AbstractDocument) this.jEditorPane1.getDocument()).setAsynchronousLoadPriority(10);
            this.jEditorPane1.setAutoscrolls(true);
        } catch (Exception e) {
            DEBUG_LOG.trace(e);
        }
    }

    public abstract void generateRule();

    public abstract void next();

    public abstract void back();

    public abstract void initPanel();

    public abstract void clear();

    public abstract void indexWord();

    public abstract void lonMatch();

    public void printRule(String rule) {
        jTextArea2.setText(rule);
    }

    public void addDependencyBox() {
        try {
            int gHandler = getProject().getGhandler();
            Vector v = getProject().getXip().getNameDependencies(gHandler);
            for (int k = 0; k < v.size(); k++) {
                String str = (String) v.get(k);
                String dir = System.getProperty("file.separator");
                if ((str.contains(dir) == true) || str.equals("nofile")) {
                    v.remove(k);
                    if (k > 0) {
                        k--;
                    }
                }
            }
            Collections.sort(v);
            for (int i = 0; i < v.size(); i++) {
                dependencyBox.addItem(v.get(i));
            }
        } catch (Exception e) {
            DEBUG_LOG.trace("AppendRule::ERROR" + e);
        }
    }

    public void addChoiceCategoryBox() {
        try {
            int gHandler = getProject().getGhandler();
            Vector vcat = getProject().getXip().getNameCategories(gHandler);
            for (int k = 0; k < vcat.size(); k++) {
                String str = (String) vcat.get(k);
                String dir = System.getProperty("file.separator");
                if ((str.contains(dir) == true) || str.equals("nofile")) {
                    vcat.remove(k);
                    if (k > 0) {
                        k--;
                    }
                }
            }
            Collections.sort(vcat);
            for (int i = 0; i < vcat.size(); i++) {
                choiceCategoryBox.addItem(vcat.get(i));
            }
        } catch (Exception e) {
            DEBUG_LOG.trace("AppendRule::ERROR" + e);
        }
    }

    public void hyperlinkUpdate(HyperlinkEvent e) {
        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            JEditorPane pane = (JEditorPane) e.getSource();
            if (e instanceof HTMLFrameHyperlinkEvent) {
                HTMLFrameHyperlinkEvent evt = (HTMLFrameHyperlinkEvent) e;
                HTMLDocument doc = (HTMLDocument) pane.getDocument();
                doc.processHTMLFrameHyperlinkEvent(evt);
            } else {
                try {
                    pane.setPage(e.getURL());
                } catch (Throwable t) {
                    t.printStackTrace();
                }
            }
        }
    }

//methode qui prend un onglet, un composant et le rafraichit
    public void refreshTabbedPane(Component comp) {
        JTabbedPane tab = (JTabbedPane) getProperty(GeneralPanel.OUTPUT_TABBED);
        XIPUIUtilities.addComponentOnTab(tab, comp, null, "Generator" + "(" + id + ")", "");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton addRuleButton;
    protected javax.swing.JButton backButton;
    protected javax.swing.JRadioButton bufferRadioButton;
    protected javax.swing.ButtonGroup buttonGroup1;
    protected javax.swing.JLabel categoryLabel;
    protected javax.swing.JComboBox choiceCategoryBox;
    protected javax.swing.JComboBox choiceRuleBox;
    protected javax.swing.JButton clearButton;
    protected javax.swing.JButton clearTempFileButton;
    protected javax.swing.JComboBox dependencyBox;
    protected javax.swing.JLabel dependencyLabel;
    protected javax.swing.JRadioButton fileRadioButton;
    protected javax.swing.JCheckBox indexBox;
    protected javax.swing.JEditorPane jEditorPane1;
    protected javax.swing.JPanel jPanel1;
    protected javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    protected javax.swing.JTextArea jTextArea2;
    protected javax.swing.JCheckBox longestBox;
    protected javax.swing.JButton nextButton;
    protected javax.swing.JLabel outputLabel;
    protected javax.swing.JLabel ruleLabel;
    // End of variables declaration//GEN-END:variables
}
