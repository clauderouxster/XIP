/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * EncrypteDecryptePanel.java
 *
 * Created on March 26, 2007, 4:06 PM
 */
package com.xerox.xrce.xipui.ide.ui;

import com.xerox.xrce.xipui.Project;
import com.xerox.xrce.xipui.Xip;
import com.xerox.xrce.xipui.modules.*;
import com.xerox.xrce.xipui.ui.UIConstants;
import com.xerox.xrce.xipui.ui.XIPUIUtilities;
import java.io.File;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author  vgrassau
 */
public class EncrypteDecryptePanel extends PanelModule {

    private boolean encrypte_flag = true;
    private File directory = null;

    /** Creates new form EncrypteDecryptePanel
     * @param context
     * @param encrypte 
     */
    public EncrypteDecryptePanel(ModuleContext context, boolean encrypte) {
        super(context);
        initComponents();
        this.encrypte_flag = encrypte;
        Project project = getProject();
        directory = new File(project.getFullName());
        this.encrypte.setToolTipText("Encrypte the file during the copying");
        this.directoryField.setText(directory.getAbsolutePath());
        this.directoryField.setToolTipText(directory.getAbsolutePath());
        directoryField.setCaretPosition(0);
        if (encrypte_flag) {
            this.iconEncrypte.setIcon(XIPUIUtilities.getIcon(UIConstants.ENCRYPTED));
            this.okButton.setIcon(XIPUIUtilities.getIcon(UIConstants.COPY));
            this.instrcution.setText("Choose a directory destination to copy the grammar");
            okButton.setToolTipText("Copy the grammar");
        } else {
            this.okButton.setIcon(XIPUIUtilities.getIcon(UIConstants.DECRYPTED));
            this.encrypte.setVisible(false);
            this.iconEncrypte.setVisible(false);
            this.instrcution.setText("Choose a directory destination to decrypte the grammar");
            okButton.setToolTipText("Decrypte the grammar");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        instrcution = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        directoryField = new javax.swing.JTextField();
        encrypte = new javax.swing.JCheckBox();
        okButton = new javax.swing.JButton();
        directoryLabel = new javax.swing.JLabel();
        iconEncrypte = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        instrcution.setBackground(new java.awt.Color(153, 255, 153));
        instrcution.setFont(new java.awt.Font("Arial", 0, 11));
        instrcution.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        instrcution.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(instrcution, gridBagConstraints);

        browseButton.setFont(new java.awt.Font("Arial", 0, 11));
        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(browseButton, gridBagConstraints);

        directoryField.setBackground(new java.awt.Color(255, 255, 255));
        directoryField.setEditable(false);
        directoryField.setFont(new java.awt.Font("Arial", 0, 11));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(directoryField, gridBagConstraints);

        encrypte.setFont(new java.awt.Font("Arial", 0, 11));
        encrypte.setText("Encrypte the grammar");
        encrypte.setActionCommand("Encrypte");
        encrypte.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        encrypte.setMargin(new java.awt.Insets(0, 0, 0, 0));
        encrypte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encrypteActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(encrypte, gridBagConstraints);

        okButton.setFont(new java.awt.Font("Arial", 0, 11));
        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(okButton, gridBagConstraints);

        directoryLabel.setBackground(new java.awt.Color(153, 255, 153));
        directoryLabel.setFont(new java.awt.Font("Arial", 0, 11));
        directoryLabel.setText("Directory");
        directoryLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        directoryLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(directoryLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(iconEncrypte, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void encrypteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encrypteActionPerformed
        if (this.encrypte.isSelected()) {
            okButton.setToolTipText("Copy and encrypte the grammar");
        } else {
            okButton.setToolTipText("Copy the grammar");
        }
    }//GEN-LAST:event_encrypteActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        browse();
    }//GEN-LAST:event_browseButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        ok();
    }//GEN-LAST:event_okButtonActionPerformed

    private void browse() {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(directory);
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setSelectedFile(new File(directory, Project.GRAMMAR_DIRECTORY));
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            directory = chooser.getSelectedFile();
            this.directoryField.setText(directory.getAbsolutePath());
            this.directoryField.setCaretPosition(0);
            this.directoryField.setToolTipText(directory.getAbsolutePath());
        }
    }

    private void ok() {
        Project project = getProject();
        Xip xip = project.getXip();
        // 0 : no error in copy
        // 1 : copy error
        // 2 : no error in decrypte
        // 3 : decrypte error
        int error = 0;
        if (encrypte_flag) {
            try {
                xip.copyAndCrypteGrammarFiles(project.getFullpathGrm(), project.getGhandler(), directory.getAbsolutePath(), encrypte.isSelected());
                error = 0;
            } catch (Exception e) {
                log.warn("error", e);
                error = 1;
            }
        } else {
            try {
                xip.decryptGrammar(project.getFullpathGrm(), project.getGhandler(), directory.getAbsolutePath());
                error = 2;
            } catch (Exception e) {
                log.warn("error", e);
                error = 3;
            }
        }
        String message = null;
        switch (error) {
            case 0: {
                message = "The grammar was copied successfully";
                JOptionPane.showMessageDialog(this, message);
                info(message);
                break;
            }
            case 1: {
                message = "The grammar was not copied";
                warning(message);
                break;
            }
            case 2: {
                message = "The grammar was decrypted successfully";
                JOptionPane.showMessageDialog(this, message);
                info(message);
                break;
            }
            case 3: {
                message = "The grammar was not decrypted";
                warning(message);
                break;
            }
        }


        JDialog dialog = (JDialog) removeProperty("dialog");
        if (dialog != null) {
            dialog.dispose();
        }
    }

    public void close() {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField directoryField;
    private javax.swing.JLabel directoryLabel;
    private javax.swing.JCheckBox encrypte;
    private javax.swing.JLabel iconEncrypte;
    private javax.swing.JLabel instrcution;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
