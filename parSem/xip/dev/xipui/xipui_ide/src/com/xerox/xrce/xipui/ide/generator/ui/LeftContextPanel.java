/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 ****************************************************************************************
 * Copyright (c) 2006 Xerox Corporation                                                 *
 * Xerox Research Centre Europe - Grenoble                                              *
 * All Rights Reserved                                                                  *
 * Copyright protection claimed includes all forms and matters of copyrightable         *
 * material and information now allowed by statutory or judicial law or                 *
 * hereinafter granted, including without limitation, material generated from           *
 * the software programs which are displayed on the screen such as icons,               *
 * screen display looks, etc. All rights reserved. No part of this document             *
 * may be reproduced, stored in a retrieval system, or transmitted, in any              *
 * form or by any means, electronic, mechanical, photocopied, recorded, or              *
 * otherwise, without prior written consent from XEROX corporation.                     *
 ****************************************************************************************
 */
package com.xerox.xrce.xipui.ide.generator.ui;

import com.xerox.xrce.xipui.Xip;
import com.xerox.xrce.xipui.ide.generator.CommonMethod;
import com.xerox.xrce.xipui.ide.generator.RuleGenerator;
import com.xerox.xrce.xipui.ui.graph.*;
import com.xerox.xrce.xipui.modules.ModuleContext;
import java.util.*;
import com.xerox.jxip.*;

/**
 *
 * @author csaillet
 */
public class LeftContextPanel extends GeneralPanel {

    /** Creates a new instance of LeftContextPanel */
    public LeftContextPanel(ModuleContext context, int id) {
        super(context, id);
        initComponents();
        repaint();
        setPageDoc("/com/xerox/xrce/xipui/ide/generator/doc/leftContext.htm");
        setProperty("panel_", this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        String typeRule = (String) this.getProperty("choiceRule");
        choiceRuleBox.setSelectedItem(typeRule);

        String choiceCategory = (String) this.getProperty("category");
        choiceCategoryBox.setSelectedItem(choiceCategory);
    }// </editor-fold>

    public void initPanel() {
        addRuleButton.setVisible(false);
        clearTempFileButton.setVisible(false);
        ruleLabel.setEnabled(false);
        choiceRuleBox.setEnabled(false);
        dependencyLabel.setVisible(false);
        dependencyBox.setVisible(false);
        longestBox.setVisible(false);
        indexBox.setVisible(false);
        outputLabel.setVisible(false);
        fileRadioButton.setVisible(false);
        bufferRadioButton.setVisible(false);
        String typeRule = (String) this.getProperty("choiceRule");
        if (typeRule.equals("Tagging")) {
            categoryLabel.setVisible(false);
            choiceCategoryBox.setVisible(false);

        } else if (typeRule.equals("Sequence") || typeRule.equals("ID Rule") || typeRule.equals("Term")) {
            categoryLabel.setEnabled(false);
            choiceCategoryBox.setEnabled(false);
        }
        String rule = (String) this.getProperty("rule");
        jTextArea2.setText(rule);
        jTextArea2.setToolTipText(rule);
    }

    public void next() {
        RightContextPanel right = new RightContextPanel(getModuleContext(), id);
        right.rightContP();
    }

    public void back() {
        String typeRule = (String) this.getProperty("choiceRule");

        if (typeRule.equals("Tagging")) {
            clear();
            KeepTagPanel keep = new KeepTagPanel(getModuleContext(), id);
            keep.keepTagP();
        } else {
            clear();
            BodyPanel body = new BodyPanel(getModuleContext(), id);
            body.bodyP();
        }
    }

    public void clear() {
        CommonMethod cmethod = new CommonMethod();
        Vector vecleftselect = (Vector) this.getProperty("vectLeftSelect");
        if (vecleftselect.size() != 0) {
            cmethod.unselectXipNodeFromVector(vecleftselect, getModuleContext().getSessionGraph(id));
        }
        vecleftselect.clear();
        this.setProperty("vectLeftSelect", vecleftselect);
    }

    public void close() {
    }

    public void indexWord() {
    }

    public void lonMatch() {
    }

    public void generateRule() {
        try {
            CommonMethod cmethod = new CommonMethod();
            SessionGraph session = getModuleContext().getSessionGraph(false, id);
            Vector v = session.getNodeGraphSelected();
            Vector selectedFeatures = new Vector();
            if (v != null) {
                Iterator ite = v.iterator();
                while (ite.hasNext()) {
                    NodeGraph ng = (NodeGraph) ite.next();
                    selectedFeatures.add(ng);
                }
            }
            Vector vecleft = cmethod.vectNodeGraphToSelectedObject(getModuleContext(), id, selectedFeatures);
            Vector vecbodyselect = (Vector) this.getProperty("vectBodySelect");
            Vector vecheadselect = (Vector) this.getProperty("vectHeadSelect");
            Vector veckeepselect = (Vector) this.getProperty("vectKeepSelect");
            Vector veckselect = new Vector(veckeepselect);
            String choiceRuleType = (String) this.getProperty("choiceRule");
            Vector veckeep = cmethod.subVector(veckselect, vecheadselect);
            // verifie que les anciens contexts sont toujours selectionne sinon les reselectionne
            if (choiceRuleType.equals("Sequence") || choiceRuleType.equals("ID Rule") || choiceRuleType.equals("Term")) {
                long res = cmethod.verifyNodeSelection(vecleft, vecbodyselect);
                if (res != -1) {
                    warning("Wrong selection !");
                    session.selectXipNode(res);
                }
            } else if (choiceRuleType.equals("Tagging")) {
                long tag = cmethod.verifyNodeSelection(vecleft, vecheadselect);
                if (tag != -1) {
                    warning("Wrong selection !");
                    session.selectXipNode(tag);
                }
                if (veckeep.size() != 0) {
                    long keep = cmethod.verifyNodeSelection(vecleft, veckeep);
                    if (keep != -1) {
                        warning("Wrong selection !");
                        session.selectXipNode(keep);
                    }
                }
            } else {
                DEBUG_LOG.trace(" problem type of rule !!!!");
            }
            // enleve de la selection les noeuds des autres contexts pour avoir les noeuds du contexte gauche
            if (choiceRuleType.equals("Sequence") || choiceRuleType.equals("ID Rule") || choiceRuleType.equals("Term")) {
                Vector vecleftselect = cmethod.subVector(vecleft, vecbodyselect);
                this.setProperty("vectLeftSelect", vecleftselect);
            } else {
                Vector vecleftselect = cmethod.subVector(vecleft, vecheadselect);
                this.setProperty("vectLeftSelect", vecleftselect);
                if (veckeep.size() != 0) {
                    Vector vecleftsel = cmethod.subVector(vecleftselect, veckeep);
                    this.setProperty("vectLeftSelect", vecleftsel);
                }
            }
            Vector vecleftselect = (Vector) this.getProperty("vectLeftSelect");
            // verifie que le contexte gauche est bien a la gauche du body ou du head
            long maxLeft = cmethod.findMaxSelObject(vecleftselect);
            if (choiceRuleType.equals("Sequence") || choiceRuleType.equals("ID Rule") || choiceRuleType.equals("Term")) {
                long minBody = cmethod.findMinSelObject(vecbodyselect);
                if (maxLeft > minBody) {
                    warning("Wrong selection !");
                    long index = ((NodeGraph) v.lastElement()).getIndex();
                    session.unSelectXipNode(index);
                    cmethod.removeNodeGraphFromIndex(vecleftselect, index);
                }
            } else if (choiceRuleType.equals("Tagging")) {
                long minHead = cmethod.findMinSelObject(vecheadselect);
                if (veckeep.size() != 0) {
                    veckeep.addAll(vecheadselect);
                    //Vector tagg = cmethod.concVector(veckeep,vecheadselect);
                    long minTagg = cmethod.findMinSelObject(veckeep);
                    if (maxLeft > minTagg) {
                        warning("Wrong selection !");
                        long index = ((NodeGraph) v.lastElement()).getIndex();
                        session.unSelectXipNode(index);
                        cmethod.removeNodeGraphFromIndex(vecleftselect, index);
                    }
                } else {
                    if (maxLeft > minHead) {
                        warning("Wrong selection !");
                        long index = ((NodeGraph) v.lastElement()).getIndex();
                        session.unSelectXipNode(index);
                        cmethod.removeNodeGraphFromIndex(vecleftselect, index);
                    }
                }
            }
            Vector vect = new Vector();
            Xip xip = getProject().getXip();
            XipResult xresult = xip.getXipResult();
            Vector vOfXipUnit = xresult.getXipUnits();
            XipUnit unit = (XipUnit) vOfXipUnit.get(0);
            XipNode root1 = unit.getRoot();
            int ghandler = getModuleContext().getProject().getGhandler();
            CommonMethod.readXipNode(root1, vect, xip, ghandler); // vect contient les noeuds de l arbre       
            // verifie que la selection ne porte pas sur les feuilles ou sur les dependances et deselectionne
            boolean stop = false;
            Iterator it = vecleftselect.iterator();
            while (it.hasNext() && stop == false) {
                SelectedObject selobj = (SelectedObject) it.next();
                Object xnode = selobj.getObject();
                long index = ((NodeGraph) v.lastElement()).getIndex();
                if (xnode instanceof XipLeaf) {
                    warning("You can't choose the leaves !");
                    session.unSelectXipNode(index);
                    stop = true;
                } else if (xnode instanceof XipDependency) {
                    warning("You can't choose the dependencies !");
                    session.unSelectXipDependency(index);
                    stop = true;
                }
            }
            RuleGenerator generator = new RuleGenerator(getModuleContext(), id);
            String rule = generator.constructRules(vect);
            if (rule.equals("problem")) {
                long index = ((NodeGraph) v.lastElement()).getIndex();
                session.unSelectXipNode(index);
            } else {
                DEBUG_LOG.trace("rule = " + rule);
                this.setProperty("rule", rule);
                jTextArea2.setText(rule);
                jTextArea2.setToolTipText(rule);
            }
//            }
        } catch (Exception e) {
            DEBUG_LOG.trace(e);
        }
    }

    public void leftContP() {
        this.setProperty("panel", "left");
        LeftContextPanel left = new LeftContextPanel(getModuleContext(), id);
        this.refreshTabbedPane(left);
    }
}

