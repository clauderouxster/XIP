/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 ****************************************************************************************
 * Copyright (c) 2005 Xerox Corporation                                                 *
 * Xerox Research Centre Europe - Grenoble                                              *
 * All Rights Reserved                                                                  *
 * Copyright protection claimed includes all forms and matters of copyrightable         *
 * material and information now allowed by statutory or judicial law or                 *
 * hereinafter granted, including without limitation, material generated from           *
 * the software programs which are displayed on the screen such as icons,               *
 * screen display looks, etc. All rights reserved. No part of this document             *
 * may be reproduced, stored in a retrieval system, or transmitted, in any              *
 * form or by any means, electronic, mechanical, photocopied, recorded, or              *
 * otherwise, without prior written consent from XEROX corporation.                     *
 ****************************************************************************************
 */
package com.xerox.xrce.xipui.ide.graph;

import com.xerox.xrce.xipui.ide.ui.*;
import com.xerox.xrce.xipui.ui.UIConstants;
import com.xerox.xrce.xipui.ui.XIPUIUtilities;
import javax.swing.*;
import java.util.*;
import java.awt.*;

/**
 *
 * @author  Vianney Grassaud
 */
public class ResultGraphBar extends javax.swing.JPanel {

    private Vector vectorDebugElement = null;

    /** Creates new form ResultGraphBar
     * Les composants sont simplements initialises.
     *Le menu n'est pas interactif
     *
     *@see com.xerox.xrce.lingdexip.ui.run.ResultGraphBar#setBuildAction(Action )
     *@see com.xerox.xrce.lingdexip.ui.run.ResultGraphBar#setViewAction(Action )
     */
    public ResultGraphBar() {
        vectorDebugElement = new Vector();
        initComponents();
        this.sentences.setRenderer(new SentenceRenderer());
    }

    /**
     *Retourne le composant graphique contenant tous les numeros de phrases
     *@return jcombobox
     */
    public JComboBox getSentences() {
        return sentences;
    }

    /**
     *Initialise le label de la phrase selectionnee. C a d affiche le contenu de la phrase selectionnee
     *@param text texte de la phrase
     *@param tooltip info bulle pour la phrase
     */
    public void setLabelSentence(String text, String tooltip) {
        sentenceLabel.setText(text);
        sentenceLabel.setCaretPosition(0);
        if (tooltip != null) {
            sentenceLabel.setToolTipText(tooltip);
        }
        updateSpinner();
    }

    /**
     *Renvoie le numero de la phrase selectionne.
     *@return la phrase selectionnee
     *
     */
    public DebugElement getSelectedSentence() {
        try {
            return (DebugElement) (sentences.getSelectedItem());
        } catch (ClassCastException e) {
            return null;
        }
    }

    /**
     *Initialise l'action sur la liste des phrases.
     *@param action 
     *
     */
    public void setBuildAction(Action action) {
        this.sentences.setAction(action);
    }

    /**
     *Renvoie le JTextField permettant d'ecrire la phrase.
     *@return une zone de texte
     */
    public JTextField getSentenceLabel() {
        return sentenceLabel;
    }

    /**
     *Ajoute un item a la combobox
     *@param de
    
     */
    public void addItem(DebugElement de) {
        if (!this.vectorDebugElement.contains(de)) {
            this.vectorDebugElement.add(de);
            sentences.addItem(de);
        }
    }

    public void setSpinner() {
        int max = vectorDebugElement.size() - 1;
        int min = 0;
        int step = 1;
        SpinnerNumberModel model = new SpinnerNumberModel(min, min, max, step);
        spinSentence.setModel(model);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
// <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
       java.awt.GridBagConstraints gridBagConstraints;
       
       buttonGroup1 = new javax.swing.ButtonGroup();
       jLabel1 = new javax.swing.JLabel();
       sentences = new javax.swing.JComboBox();
       sentenceLabel = new javax.swing.JTextField();
       spinSentence = new javax.swing.JSpinner();
       
       
       setLayout(new java.awt.GridBagLayout());
       
       setBackground(new java.awt.Color(153, 255, 153));
       jLabel1.setBackground(new java.awt.Color(153, 255, 153));
       jLabel1.setFont(new java.awt.Font("Arial", 0, 11));
       jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
       jLabel1.setText("sentences");
       jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 0)));
       gridBagConstraints = new java.awt.GridBagConstraints();
       gridBagConstraints.gridx = 0;
       gridBagConstraints.gridy = 0;
       gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
       gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
       add(jLabel1, gridBagConstraints);
       
       sentences.setFont(new java.awt.Font("Arial", 0, 11));
       sentences.setMaximumSize(new java.awt.Dimension(100, 22));
       sentences.setMinimumSize(new java.awt.Dimension(100, 22));
       sentences.setPreferredSize(new java.awt.Dimension(100, 22));
       gridBagConstraints = new java.awt.GridBagConstraints();
       gridBagConstraints.gridx = 2;
       gridBagConstraints.gridy = 0;
       gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
       gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
       gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
       add(sentences, gridBagConstraints);
       
       sentenceLabel.setEditable(false);
       sentenceLabel.setFont(new java.awt.Font("Arial", 0, 11));
       gridBagConstraints = new java.awt.GridBagConstraints();
       gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
       gridBagConstraints.weightx = 1.0;
       gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
       add(sentenceLabel, gridBagConstraints);
       
       spinSentence.setFont(new java.awt.Font("Arial", 0, 12));
       spinSentence.setMaximumSize(new java.awt.Dimension(40, 18));
       spinSentence.setMinimumSize(new java.awt.Dimension(40, 18));
       spinSentence.setPreferredSize(new java.awt.Dimension(40, 18));
       spinSentence.addChangeListener(new javax.swing.event.ChangeListener() {
           public void stateChanged(javax.swing.event.ChangeEvent evt) {
               spinSentenceStateChanged(evt);
           }
       });
       
       gridBagConstraints = new java.awt.GridBagConstraints();
       gridBagConstraints.gridx = 1;
       gridBagConstraints.gridy = 0;
       gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
       add(spinSentence, gridBagConstraints);
       
   }// </editor-fold>//GEN-END:initComponents

    private void spinSentenceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinSentenceStateChanged
        Object source = evt.getSource();
        if (source instanceof JSpinner) {
            Integer numSent = (Integer) spinSentence.getValue();
            sentences.setSelectedIndex(numSent);
        }
    }//GEN-LAST:event_spinSentenceStateChanged

    private class SentenceRenderer extends JLabel implements ListCellRenderer {

        public SentenceRenderer() {
            super();
            setOpaque(true);
            setFont(UIConstants.DEFAULT_FONT);
        }

        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if (value != null) {
                this.setText(value.toString());
                setBackground(isSelected ? Color.lightGray : Color.white);
                setForeground(isSelected ? Color.red : Color.black);
                if (value instanceof DebugElement) {
                    DebugElement de = (DebugElement) value;
                    if (de.getCorpusElement().isXML()) {
                        setIcon(XIPUIUtilities.getIcon(UIConstants.XML));
                    } else {
                        setIcon(XIPUIUtilities.getIcon(UIConstants.TEXT));
                    }
                    setText(de.toString());
                    setToolTipText(de.getSentence());
                }
                return this;
            } else {
                return new JLabel();
            }
        }
    }

    public void updateSpinner() {
        int i = sentences.getSelectedIndex();
        spinSentence.setValue(i);
    }
// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField sentenceLabel;
    private javax.swing.JComboBox sentences;
    private javax.swing.JSpinner spinSentence;
// End of variables declaration//GEN-END:variables
}
