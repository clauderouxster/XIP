DependencyRules:

if ( ^$1(#1[contr],#2[relation]) | ^$1(#1[relation],#2[contr]) )
	$1[contr=+](#1,#2).


Script:



iftest ( $1(#1[contr],#2[relation]) ) { #2[relation=~,rf=~] ; }

iftest ( $1(#1[relation],#2[contr]) ) { #1[relation=~,rf=~] ; }



iftest ( ^$1(#1[deict,form:fthis],#2[rf,art:~,deictdep]) ) { #2[deictdep=~] ; }

iftest ( ^$1(#1[rf,art:~,deictdep],#2[deict,form:fthis]) ) { #1[deictdep=~] ; }

iftest ( ^$1(#1[deict,form:fhere],#2[rf,art:~,deictdep]) ) { #2[deictdep=~] ; }

iftest ( ^$1(#1[rf,art:~,deictdep],#2[deict,form:fhere]) ) { #1[deictdep=~] ; }

// good is nonot

iftest ( $1(#1[good],#2[contr]) ) { #1[rf=~,good=~] ; }

iftest ( $1(#1[good],#2[form:fno]) ) { #1[rf=~,good=~] ; }

iftest ( $1(#1[good],#2[form:fnot]) ) { #1[rf=~,good=~] ; }


iftest ( $1(#1[contr],#2[good]) ) { #2[rf=~,good=~] ; }

iftest ( $1(#1[form:fno],#2[good]) ) { #2[rf=~,good=~] ; }

iftest ( $1(#1[form:fnot],#2[good]) ) { #2[rf=~,good=~] ; }

// based[relation=~] around two diseases 

//PREPD(Disease_OTHER:+_SCOPE:+,around)
//MOD_RELATIONDEP_OTHER(based_RELATION:+_OTHERDEP:+,Disease_OTHER:+_SCOPE:+)

iftest ( PREPD(#1,#2[form_vikef:~fon]) & MOD(#3[lemme:base],#1) ) { #3[vikef_feat=~] ; }

iftest ( PREPD(#1,#2[form_vikef:~fon]) & MOD(#3[lemme:based],#1) ) { #3[vikef_feat=~] ; }

iftest ( PREPD(#1,#2[form_vikef:fon]) & MOD(#3[lemme:base],#1) ) { #3[relation=+,rf=+] ; }

iftest ( PREPD(#1,#2[form_vikef:fon]) & MOD(#3[lemme:based],#1) ) { #3[relation=+,rf=+] ; }

// of change[relation=~]

iftest ( PREPD(#1[lemme:change],#2[lemme:of]) ) { #1[vikef_feat=~] ; }

// the others[actor=~]

iftest ( DETD(#1[lemme:other],#2) ) { #1[vikef_feat=~] ; }


// They are performed using our new ECO ( Enforced - Convergence Optimization ) second order optimization method 

//DETD_DEICTDEP_OWN_DEICT(ECO_DEICTDEP:+_SCOPE:+,our_DEICTDEP:+_DEICT:+)
//OBJ_RELATIONDEP_DEICTDEP_BUILD(ECO_DEICTDEP:+_SCOPE:+,using_RELATION:+_DEICTDEP:+)

iftest ( DETD(#1[scope],#2[deict]) & OBJ(#3[relation],#1[scope]) ) { #3[relation=~,rf=~] ; }


