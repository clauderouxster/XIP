//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! 
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2001 - 2009 Xerox Corporation.  All Rights Reserved.
//!
//!
//!  Date: Nov. 2009
//!
//!  Author: Brun C. 
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


// some colloquial pattern for opinion
// e.g. work well --> positive

Marker:

// out of focus

2> adj[lemme:"Fucking",negative=+].
2> adj[lemme:"fuckin",negative=+].

2> verb[lemme:"fuck",negative=+,topic-obj=+].

2> adj[lemme:"bad"], noun[lemme:"luck", no-sents=~].

//2> prep[lemme:"out_of"], noun[lemme:"foc

// stands out ==> se distinguer = posit

//2> verb[lemme:"stand",positive=+,topic-subj=+], adv[lemme:"out"].

// camera shake

2> noun[lemme:"camera"], noun[lemme:"shake",negative=+].
// it is interesting

2> verb[lemme:"interest",topic-subj=+,positive=+].
2> verb[lemme:"disturb",topic-subj=+,negative=+].

// reasonably priced 

2> adv[lemme:"reasonably", positive=+], verb[lemme:"price"].

// it misses the mark ==> rater l#objectif

2> verb[lemme:"miss",negative=+,topic-subj=+], det[lemme:"the"], noun[lemme:"mark"].

// it cost so much / little

2> verb[lemme:"cost",topic-subj=+,positive=+], adv[lemme:"so"], quant[lemme:"little"].

2> verb[lemme:"cost",topic-subj=+,negative=+], adv[lemme:"so"], quant[lemme:"much"].

//on marque le dernier ou l'avant dernier mot par endsequence

2> ?[endsequence=+], punct[end].

2> ?[endsequence=+,end].

// less than 

//2> quant[lemme:"less"], conj[lemme:"than"], adj[positive, negative=+,positive=~].

// nothing to like 

45> pron[lemme:"nothing"], prep[lemme:"to"], ?[lemme:"like", positive=~,negative=+].

// adv verb

2> adv[positive], verb[positive=+] .
2> adv[negative], verb[negative=+] .


// lack of

2> noun[lemme:"lack"], prep, noun[positive, negative=+,positive=~].

2> noun[lemme:"lack"], prep, noun, conj, noun[positive, negative=+,positive=~], punct. 

// 2 fine example

2> nadj[lemme:"fine",positive=~], noun[lemme:"example"].

// cheap and slow

2> adj[lemme:"cheap", positive=~,negative=+], conj, adj[negative]. 



// worn out --> usÃ©

2> verb[lemme:"wear",negative=+], adv[lemme:"out"].

// past success

2> nadj[lemme:"past"], noun[lemme:"success",positive=~].

2> verb[lemme:"rock",positive=~,negative=+], noun[lemme:"bottom"].


// worth watching

2> noun[lemme:"worth", positive=+], verb[lemme:"watch"].

2> adj[lemme:"strong"], noun[lemme:"performance",positive=+].


//there is little to like 

2> quant[lemme:"little"], prep, verb[lemme:"like",positive=~,negative=+].

2> noun[lemme:"convenience", positive=~], noun[lemme:"store"].


2> adj[lemme:"bright",positive=~,maj], ?[lemme:"white"], ?[lemme:"paper"].

2> noun[lemme:"ink"], ?[lemme:"blot",negative=+].

2> verb[lemme:"do",start,maj,imper=+].

2> verb[lemme:"print"], prep[lemme:"at"], det , nadj[lemme:"top",positive=~].

2> verb[lemme:"work",positive=+,topic-subj=+ ],adv*,  adv[lemme:"well"].

2> nadj[lemme:"top",positive=~], noun[lemme:"cover"];noun[lemme:"cartridge"];dig;noun[place,proper];noun[lemme:"part"];noun[lemme:"page"].

2> noun[lemme:"table"],  nadj[lemme:"top",positive=~].
 
2> nadj[lemme:"top",positive=~], noun[lemme:"half"].

2> noun[lemme:"mountain"], nadj[lemme:"top",positive=~]. 


2> nadj[lemme:"top",positive=~], prep[lemme:"of"], det , noun[lemme:"paper"];noun[lemme:"tray"] .


2> nadj[lemme:"top",positive=~], prep[form:fof], det, noun[lemme:"cartridge"].

2> nadj[lemme:"top",positive=~], conj ,  nadj[lemme:"bottom"].



// i get tired

2> verb[lemme:"get"], adv*,  verb[lemme="tire",negative=+,topic-of=+].


//2> verb[lemme:~"could"], adv* , adv[lemme:"well",positive=+], ?[lemme:~"beyond"].

// they could do better 

2> aux[lemme:"could"], verb*, verb[lemme:"do"], adj[lemme:"good",compar,positive=~,negative=+].


2> aux[lemme:"could"], verb*, verb[lemme:"do"], adj[lemme:"bad",compar,positive=~].


2>   adv[lemme:"well",positive=+,start:~] , verb[lemme:~"be",negative:~] .

// screw up --> cafouiller = negat

2> verb[lemme:"screw",negative=+,topic-subj=+], adv*, adv[lemme:"up"].


// runs out of == consume 


2> verb[lemme="run",consume=+], adv*, prep[lemme:"out_of"] .


2> punct, verb[lemme:"please",positive=~], ?[lemme:"email"] .

//better off
//2> adj[lemme:"good",positive=~,negative=+], adv[lemme:"off"].


2> quant, ?[lemme:"work",positive=~]. 
2>  ?[lemme:"work",positive=~], det, noun[lemme:"bug"]. 
2> verb[lemme:"attempt"], prep[lemme:"to"] ,?[lemme:"work",positive=~]. 

//heavey use
2> nadj[lemme:"heavy",negative=~], noun[lemme:"use"];noun[lemme:"mix"].


// smear test

2> ?[lemme:"smear", negative=~] , ?[lemme:"test"].

2> ?[lemme:"try"], prep[lemme:"to"],  verb[lemme:"smear", negative=~].

2> ?[lemme:"negative",negative=~] , noun[lemme:"scanner"].


// not whithout
2> ?[lemme:"not"], prep[lemme:"whithout",lexneg=~].

2> ?[lemme:"great",positive=~], noun[negative];nadj[negative].

2> verb[lemme:"smear",negative=+,topic-subj=+], noun[lemme:"text"].


2> quant[lemme:"no"], noun[lemme:support,positive=+].

// cheap parts

2> adj[lemme:"cheap",negative=+,positive=~], noun[lemme:"part"].


// know better

2> verb[lemme:"know"], adj[lemme:"good", compar,positive=~].

2> nadj[lemme:"good",compar:~,positive=~,negative=+], noun[lemme:"money"].

2> verb[lemme:"steer",negative=+], nadj[lemme:"clear",positive=~].

// test to remove all sentiments on conditional

//2> conj[lemme:"if"] , ?+[comma:~,positive=~,negative=~,sentiments=~] , punct[comma];punct[sent] .

2> ?[lemme:"crash"], ?[lemme:"happy",positive=~]. 

2> nadj[lemme:"fine",positive=~], noun[lemme:"mode"].

2> adj[lemme:"good",compar,positive=~,negative=+], noun[printer-related];noun[lemme:"choice"];noun[lemme:"value"].

2> adj[lemme:"good",negative=+,positive=~],prep[lemme:"for"], noun[negative].

2> nadj[negative=~,lemme:"heavy"], noun[lemme:"feeding"].

2> det[def], nadj[lemme:"original",positive=~], ?[noun:~].

// sicca 

2> det[def] , noun[maj,term-kana=+],  ?[noun,post-term]. 

2> det[def], nadj[lemme:"negative",negative=~], ?[noun:~]  .

Sequence:

3> noun = punct[lemme:"@", dest], noun .


3> adv = det[lemme:"a"], noun[lemme:"bit"] |adj;nadj|.

3> adv = |verb[lemme:"be"] | quant[lemme:"all"], pron[lemme:"that"] | verb[partpas] | .

// fast enough

3> nadj[positive=+] = nadj[!features:!,positive], quant[lemme:"enough"] | ? |.

3> noun[easyto=+,property=+] = | punct, adj | adj[lemme:"set"], adv[lemme:"up"] | punct | .


// sicca 

//3> noun[term-kana=+] = det[def] , ?[maj], ?+[maj], ?[noun,post-term]. 