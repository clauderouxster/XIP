
DependencyRules:
|#2[noun, human=+]|
if (HEAD2(#1[human],#2))
	~


//if (CORE-DRIVE(#1,#2) & ^CORE-DRIVE(#3,#2) & #1:~#3)
	


Variables:

graph g;
graph p;
graph p1;
graph phrase[];
graph phrasetp[];
graph events[];
graph allevents[];
graph texte[];
graph results[];
int i;
int j;
string noeud;
string noeud1;
string noeud2;

Script:

//******** création des noyaux

if (CORE(#1))
	
{
noeud=#1[lemme]+"_"+nodenumber(#1);
g <<
<g name="event">
	<c id="event">
		<r id="node">
			<c id="number" i="!nodenumber(#1)"/>
		</r>
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;


addgraph(events,g);

}


//******** ajout des coordonnées acteur

if (COORDINATE[actor, merged:~](#1,#2[human]))

{
noeud=#1[lemme]+"_"+nodenumber(#1);

g <<
<g name="acteur">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
		<r id="hasactor" >
			<c id="human" i="!#2[lemme]"/>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;

for (i=0;i<events;i=i+1)
{replacegraph(events[i],p,g);
}

}


if (COORDINATE[actor, merged:~](#1,#2[human:~]))

{
noeud=#1[lemme]+"_"+nodenumber(#1);

g <<
<g name="acteur">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
		<r id="hasactor" >
			<c id="entity" i="!#2[lemme]"/>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;

for (i=0;i<events;i=i+1)
{replacegraph(events[i],p,g);}

}

//******** ajout des coordonnées cible


if (COORDINATE[target, merged:~](#1,#2[human]))
	
{
noeud=#1[lemme]+"_"+nodenumber(#1);

g <<
<g name="event">
	<c id="event">
		<r id="hastarget">
			<c id="human" i="!#2[lemme]"/>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;

p1 <<
<g name="patron">
	<c id="event"/>
</g>;


for (i=0;i<events;i=i+1)
	{
	if(p>events[i])
		{
		replacegraph(events[i],p1,g);
		}
	}
}

if (COORDINATE[target, merged:~](#1,#2[human:~]))
	
{
noeud=#1[lemme]+"_"+nodenumber(#1);

g <<
<g name="event">
	<c id="event">
		<r id="hastarget">
			<c id="location" i="!#2[lemme]"/>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;

p1 <<
<g name="patron">
	<c id="event"/>
</g>;


for (i=0;i<events;i=i+1)
	{
	if(p>events[i])
		{
		replacegraph(events[i],p1,g);
		}
	}
}



//******** ajout des coordonnées lieu

if (COORDINATE[loc-pr, merged:~](#1,#2))
{
noeud=#1[lemme]+"_"+nodenumber(#1);

g <<
<g name="event">
	<c id="event">
		<r id="hasplace">
			<c id="location" i="!#2[lemme]"/>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;

p1 <<
<g name="patron">
	<c id="event"/>
</g>;


for (i=0;i<events;i=i+1)
	{
	if(p>events[i])
		{
		replacegraph(events[i],p1,g);
		}
	}
}

//******** ajout des coordonnées temps

if (COORDINATE[time, merged:~](#1,#2))
{
noeud=#1[lemme]+"_"+nodenumber(#1);

g <<
<g name="event">
	<c id="event">
		<r id="hastime">
			<c id="time" i="!#2[lemme]"/>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;

p1 <<
<g name="patron">
	<c id="event"/>
</g>;


for (i=0;i<events;i=i+1)
	{
	if(p>events[i])
		{
		replacegraph(events[i],p1,g);
		}
	}
}



//******** ajout des sources

if (SRC[factual, merged:~](#1,#2))
{
noeud=#1[lemme]+"_"+nodenumber(#1);

g <<
<g name="event">
	<c id="event">
		<r id="factual_after">
			<c id="human" i="!#2[lemme]"/>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;

p1 <<
<g name="patron">
	<c id="event"/>
</g>;


for (i=0;i<events;i=i+1)
	{
	if(p>events[i])
		{
		replacegraph(events[i],p1,g);
		}
	}
}

if (SRC[counter-factual, merged:~](#1,#2))
{
noeud=#1[lemme]+"_"+nodenumber(#1);

g <<
<g name="event">
	<c id="event">
		<r id="counter-factual_after">
			<c id="human" i="!#2[lemme]"/>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;

p1 <<
<g name="patron">
	<c id="event"/>
</g>;


for (i=0;i<events;i=i+1)
	{
	if(p>events[i])
		{
		replacegraph(events[i],p1,g);
		}
	}
}
	
if (SRC[possible, merged:~](#1,#2))
{
noeud=#1[lemme]+"_"+nodenumber(#1);

g <<
<g name="event">
	<c id="event">
		<r id="possible_after">
			<c id="human" i="!#2[lemme]"/>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;

p1 <<
<g name="patron">
	<c id="event"/>
</g>;


for (i=0;i<events;i=i+1)
	{
	if(p>events[i])
		{
		replacegraph(events[i],p1,g);
		}
	}
}


// *********** ajout de la source de diffusion
//a) auteur seulement (nom du  journal ou de l'auteur de l'article)
|#2|
if (INFOSOURCE(#1) & CORE(#2) & ~INFODATE(?))
{
noeud=#2[lemme]+"_"+nodenumber(#2);

g <<
<g name="event">
	<c id="event">
		<r id="hassource">
			<c id="set">
				<r id="author">
					<c id="human"  i="!#1[lemme]"/>
				</r>
			</c>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;


p1 <<
<g name="patron">
	<c id="event"/>
</g>;


for (i=0;i<events;i=i+1)
	{
	if(p>events[i])
		{
		replacegraph(events[i],p1,g);
		}
	}
}

//b) auteur et date de l'article

|#2|
if (INFOSOURCE(#1) & CORE(#2) & INFODATE(#3))
{
noeud=#2[lemme]+"_"+nodenumber(#2);

g <<
<g name="source">
	<c id="event">
		<r id="hassource">
			<c id="set">
				<r id="author">
					<c id="human"  i="!#1[lemme]"/>
				</r>
				<r id="hastime">
					<c id="time"  i="!#3[lemme]"/>
				</r>

			</c>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;


p1 <<
<g name="patron">
	<c id="event"/>
</g>;


for (i=0;i<events;i=i+1)
	{
	if(p>events[i])
		{
		replacegraph(events[i],p1,g);
		}
	}
}

//c) date de l'article seulement

|#2|
if (INFODATE(#1) & CORE(#2) & ~INFOSOURCE(?))
{
noeud=#2[lemme]+"_"+nodenumber(#2);

g <<
<g name="source">
	<c id="event">
		<r id="hassource">
			<c id="set">
				<r id="date">
					<c id="time"  i="!#1[lemme]"/>
				</r>

			</c>
		</r>
	</c>
</g>;

p <<
<g name="patron">
	<c id="event">
		<r id="hascore">
			<c id="core" i="!noeud"/>
		</r>
	</c>
</g>;


p1 <<
<g name="patron">
	<c id="event"/>
</g>;


for (i=0;i<events;i=i+1)
	{
	if(p>events[i])
		{
		replacegraph(events[i],p1,g);
		}
	}
}

//***** ajout du nom pour les EN
//if (COORDINATE(?,#2[Nentity]))
//	{
//g<<
//<g name="named_entity">
//	<c id="human" i="!#2[lemme]">
//		<r id="name">
//			<c id="name" i="!#2[lemme]"/>
//		</r>
//	</c>
//</g>;
//
//p<<
//<g name="named_entity">
//	<c id="human" i="!#2[lemme]"/>
//</g>;
//
//	}
//	
//for (i=0;i<events;i=i+1)
//	{replacegraph(events[i],p,g);}


//*************************

// dupliquage des événements et stockage dans phrase
for (i=0;i<events;i=i+1)
	{
duplicategraph(phrase[i],events[i]);
}



//************* relations entre événements 

//I. création des relations en double
// ce cas correspond à une erreur d'analyse : un noyau dépend de deux ou plusieurs drivers sans qu'aucun ne soit déclaré secondaire. Plutôt que de choisir arbitrairement une des relations, on construit les deux (ou plus) graphes correspondants 




//II. création des autres relations
//************* création des relations DRIVE entre événements
if (CORE-DRIVE[second:~, identical:~](#1,#2))
	{
noeud1=#1[lemme]+"_"+nodenumber(#1);
noeud2=#2[lemme]+"_"+nodenumber(#2);

//recherche de l'événement drivé
p<<
<g name="evenement_2">
	<c id="event">
		<r id="node">
			<c id="number" i="!nodenumber(#2)"/>
		</r>
	</c>
</g>;

for (i=0;i<phrase;i=i+1)
{
if (p>phrase[i])
	{p=phrase[i];
	removegraph(phrase,i);
	}

}

//création de la relation drive
g <<
<g name="relation-drive">
	<c id="event">
		<r id="node">
			<c id="number" i="!nodenumber(#1)"/>
		</r>
		<r id="drive">
			<a ref="!p"/>
		</r>
	</c>
</g>;

// recherche et ajout de l'événement driver
p<<
<g name="evenement_1">
	<c id="event">
		<r id="node">
			<c id="number" i="!nodenumber(#1)"/>
		</r>
	</c>
</g>;

for (i=0;i<phrase;i=i+1)
{
if (p>phrase[i])
	{
replacegraph(phrase[i],p,g);
	}
}

	}


//************* création des relations ANNEX entre événements
if (CORE-ANNEX[second:~, identical:~](#1,#2))
	{
noeud1=#1[lemme]+"_"+nodenumber(#1);
noeud2=#2[lemme]+"_"+nodenumber(#2);

p<<
<g name="evenement_2">
	<c id="event">
		<r id="node">
			<c id="number" i="!nodenumber(#2)"/>
		</r>
	</c>
</g>;

for (i=0;i<phrase;i=i+1)
{
if (p>phrase[i])
	{p=phrase[i];
	removegraph(phrase,i);
	}

}


g <<
<g name="relation-annex">
	<c id="event">
		<r id="node">
			<c id="number" i="!nodenumber(#1)"/>
		</r>
		<r id="annex">
			<a ref="!p"/>
		</r>
	</c>
</g>;


// recherche et ajout de l'événement driver
p <<
<g name="evenement_1">
	<c id="event">
		<r id="node">
			<c id="number" i="!nodenumber(#1)"/>
		</r>
	</c>
</g>;

for (i=0;i<phrase;i=i+1)
{
if (p>phrase[i])
	{
replacegraph(phrase[i],p,g);
	}
}


}



//************* création des relations IDENTICAL entre événements
if ((CORE-ANNEX[identical](#1,#2) | CORE-DRIVE[identical](#1,#2)))
	{
noeud1=#1[lemme]+"_"+nodenumber(#1);
noeud2=#2[lemme]+"_"+nodenumber(#2);

p<<
<g name="evenement_2">
	<c id="event">
		<r id="node">
			<c id="number" i="!nodenumber(#2)"/>
		</r>
	</c>
</g>;

for (i=0;i<phrase;i=i+1)
{
if (p>phrase[i])
	{p=phrase[i];
	removegraph(phrase,i);
	}

}

g <<
<g name="relation-identical">
	<c id="event">
		<r id="node">
			<c id="number" i="!nodenumber(#1)"/>
		</r>
		<r id="identical">
			<a ref="!p"/>
		</r>
	</c>
</g>;


// recherche et ajout de l'événement driver
p <<
<g name="evenement_1">
	<c id="event">
		<r id="node">
			<c id="number" i="!nodenumber(#1)"/>
		</r>
	</c>
</g>;

for (i=0;i<phrase;i=i+1)
{
if (p>phrase[i])
	{
replacegraph(phrase[i],p,g);
	}
}

	}



//********** on enlève la relation noeud
if(CORE(#1))
{
noeud=#1[lemme]+"_"+nodenumber(#1);

g<<
<g name="event">
	<c id="event">
	</c>
</g>;

p<<
<g name="noeud">
	<c id="event">
		<r id="node">
			<c id="number"/>
		</r>
	</c>
</g>;

for (i=0;i<phrase;i=i+1)
{
replacegraph(phrase[i],p,g);
}

for (i=0;i<events;i=i+1)
{
replacegraph(events[i],p,g);
}


}

//************ essai d'extraction de graphes : les relations acteur

//g <<
//<g name="acteurs">
//	<c id="event">
//		<r id="hasactor">
//			<c id="entity"/>
//		</r>
//	</c>
//</g>;
//
//for (i=0;i<phrase;i=i+1)
//{
//if (extractgraph(phrase[i],g,results))
//	{
//	print("graphes extraits : \n");
//	for (j=0;j<results;j=j+1)
//		{
//		print(results[j]+"\n");
//		}
//	}
//}

//************ essai d'extraction de graphes : les relations drive


//g <<
//<g name="drives">
//	<c id="event">
//		<r id="hascore">
//			<c id="core"/>
//		</r>
//		<r id="drive">
//			<c id="event" action="full">
//				<r id="hascore">
//					<c id="core"/>
//				</r>
//			</c>
//		</r>
//	</c>
//</g>;
//print("graphe cherché :\n"+g+"\n");
//
//for (i=0;i<phrase;i=i+1)
//{
//if (extractgraph(phrase[i],g,results))
//	{
//	print("graphes extraits : \n");
//	for (j=0;j<results;j=j+1)
//		{
//		print(results[j]+"\n");
//		}
//	}
//}
//


//les événements de la phrase sont ajoutés aux événements du texte

for (i=0;i<events;i=i+1)
{addgraph(allevents,events[i]);}

for (i=0;i<phrase;i=i+1)
{addgraph(texte,phrase[i]);}



//******* affichage de chaque phrase

for (i=0;i<phrase;i=i+1)
{print("phrase "+i+" :\n"+phrase[i]+"\n");}


//******* affichage des événements de la phrase

//for (i=0;i<events;i=i+1)
//{print("événement "+i+" :\n"+events[i]+"\n");}



events="";
phrase="";

