DependencyRules:


///////////////////// NOT IMPSENT IN REFLECETIVE SENTENCES \\\\\\\\\\\\\\\\

// sentences that don't have any other kind of KSWDEP but CONTR+DEICT


if ( ^KSWDEP(#1[contr],#2[deict]) )
   KSWDEP[contr=+,deict=+](#1,#2).   

if ( ^KSWDEP(#1[deict],#2[contr]) )
   KSWDEP[contr=+,deict=+](#1,#2).

if ( ^KSWDEP[contr,deict](#2,#3) )
   ~.   

if ( IMPSENT(#1) & ~KSWDEP(#3,#4) )
   SENT(#1).

if ( IMPSUMMARY(#1) & ~KSWDEP(#3,#4) )
   SENT(#1).

if ( ^IMPSENT(#1) & SENT(#1) )
   ~.

if ( ^IMPSUMMARY(#1) & SENT(#1) )
   ~.



///////////////////////// final for NOT IMPSENT IN REFLECETIVE SENTENCES


if ( SENT(#1) & ^CONCEPT[impsent](#2) )
   CONCEPT[impsent=~](#2).

if ( SENT(#1) & ^CONCEPT[impsent](#2,#3) )
   CONCEPT[impsent=~](#2,#3).

if ( SENT(#1) & ^CONCEPT[impsent](#2,#3,#4) )
   CONCEPT[impsent=~](#2,#3,#4).

if ( SENT(#1) & ^CONCEPT[impsent](#2,#3,#4,#5) )
   CONCEPT[impsent=~](#2,#3,#4,#5).


| #1[md=~] |
if ( SENT(#2) )
   ~.


///////////////////// IMPSENT \\\\\\\\\\\\\\\\\\\\

// SUMMARY sentences are not relevant in reflective writing

| #1[md=~] |
if ( SUMMARY(#2) )
    ~.

if ( ^AUTHOR(#1) )
    PERSON(#1).

if ( SUMMARY(#1) )
    SENT(#1).

if ( ^SUMMARY(#1) )
    ~.

if ( ^IMPSUMMARY(#1) )
    IMPSENT[contribution=~](#1).

if ( ^IMPSENT(#1) )
    REFLSENT[analytic=+](#1).

/
if ( ^IMPSENT[reference](#1) )
    IMPSENT[reference=~](#1).

if ( IMPSENT[novstat](#1) & ^REFLSENT(#1) )
    REFLSENT[novstat=+,analytic=+](#1).


if ( IMPSENT[vis](#1) & ^REFLSENT(#1) )
    REFLSENT[vis=+,analytic=+](#1).

if ( IMPSENT[attitude](#1) & ^REFLSENT(#1) )
    REFLSENT[attitude=+,analytic=+](#1).

if ( IMPSENT[emph](#1) & ^REFLSENT(#1) )
    REFLSENT[emph=+,analytic=+](#1).


if ( IMPSENT(#1) & ~REFLSENT(#1) )
    REFLSENT[analytic=+](#1).

if ( ^IMPSENT(#1) & REFLSENT(#1) )
    ~.
\



//////////////////////////////  AUTHOR DEPENDENCIES \\\\\\\\\\\\\\\\\\\\\\

// *** dependencies involving the author *** \\

if ( ^$1(#1,#2[lemme:I]) )
	$1[authdep=+](#1,#2).

if ( ^$1(#1[lemme:I],#2) )
	$1[authdep=+](#1,#2).

if ( ^$1(#1,#2[lemme:we]) )
	$1[authdep=+](#1,#2).

if ( ^$1(#1[lemme:we],#2) )
	$1[authdep=+](#1,#2).

// *** dependencies involving the author and a reflective word *** \\

| #1[authrefl=+] |
if ( ^$1[authdep](#1[reflection],#2) )
   $1[refldep=+](#1,#2).

| #2[authrefl=+] |
if ( ^$1[authdep](#1,#2[reflection]) )
   $1[refldep=+](#1,#2).

//I hope to be able to incorporate this into my future projects as I now have a deeper understanding of this broad concept of sustainability.
//OBJ-N(have,understanding)
//SUBJ_PRE_AUTHDEP(have,I)

| #3[authrefl=+] |
if ( $1[authdep](#1[lemme:have],#2) & $2(#1,#3[reflection]) )
   DEP[authdep=+,refldep=+](#2,#3).

//support verbs

//During the subject progress , I have developed a better understanding of professional strengths and attributes as a graduate , as well as knowledge including rules and regulations related to Australia workplace such as safety and ethics issues .
//OBJ_POST(developed,understanding)
//SUBJ-N_PRE(developed,I)


| #3[authrefl=+] |
if ( SUBJ-N[pre,authdep](#1,#2) & ^OBJ[post](#1,#3[reflection]) )
   OBJ[post,authdep=+,refldep=+](#1,#3).


// no subject of non-finite verb that has a modifier having a determiner "my"
//That readiness form was actually an attempt to think in an organized way about my career .
//MOD_SUBCAT_POST(think,career)
//DETD(career,my)

| #1[authrefl=+] |
if ( ^MOD[post](#1[reflection,authrefl:~],#2) & DETD(#2,#3[lemme:I]) )
   MOD[post,authdep=+,refldep=+](#1,#2).


// impersonal subject sentences with reflection words are also authrefl 

//Being irresponsible for day cost me marks that could have added to my final assessment but I was happy as it was a different learning experience.
//NUCL_SUBJCOMPL(was,learning experience)
//ATTRIB(it,learning experience)

| #2[authrefl=+] |
if ( ^NUCL[subjcompl](#1,#2[reflection,authrefl:~]) & ATTRIB(#3[lemme:it],#2) )
   NUCL[authdep=+,refldep=+,impersonal=+](#1,#2).



// *** dependencies involving the author and a capability word *** \\

| #1[authcapa=+] |
if ( $1[authdep](#1[capability],#2) )
   ~.

| #2[authcapa=+] |
if ( $1[authdep](#1,#2[capability]) )
   ~.

// marking the dependencies that involve the capability

//SUBJ_AUTHDEP_PRE(can_AUTHCAPA:+,we)
//SUBJ-N_AUTHDEP_PRE(help,we)
//ARGUMENT_AUTHDEP(help,we)

| #2[authcapa=+] |
if ( $1[authdep](#1[authcapa],#2) )
    ~.

| #1[authcapa=+] |
if ( $1[authdep](#1,#2[authcapa]) )
    ~.

if ( ^$1(#1[authcapa],#2) )
    $1[authcapadep=+](#1,#2)

if ( ^$1(#1,#2[authcapa]) )
    $1[authcapadep=+](#1,#2)

///////////////////// CONTEXT OF THE REFLECTION \\\\\\\\\\\\\\\\\\\\

//•	Context of the event that triggers the reflection (why, when, where, who, how much, what): the more detail the better, as long as the event is non-trivial

// *** reflective author + context *** \\
//exception: When we look at other peoples' arcs, we don't see all of the deviations (both high and low) from this upward and forward trajectory, but they are there.


| #3[contextmark] |
if ( ^$1[refldep](#1,#2) & $2(#4[past],#3))
	$1[contextdep=+](#1,#2).


// In refldeps with impersonal verbs: if there are at least two clauses, i.e. two finite CORE-VERBs
//Furthermore I came across couple of subjects which were manufacturing engineering and solid works , it was a good learning experience for me .
//NUCL_REFLDEP_SUBJCOMPL(was,learning experience)
//CORE-VERB(came)
//CORE-VERB(was)

| fv{?*,#3} |
if ( ^NUCL[refldep,subjcompl](#1,#2) & CORE-VERB(#3) & #1~:#3 )
   NUCL[contextdep=+](#1,#2).




//// INDICATOR_beg \\\\

| #3[contextmark] |
if ( $1[contextdep](#1,#2) & $2(#4[past],#3) )
    INDICATOR(#3), INDICATOR(#1), INDICATOR(#2), INDICATOR(#4).

//// INDICATOR_end \\\\

if ( ^SENT(#3) & $1[contextdep](#1,#2) )
   REFLSENT[context=+](#3).

if ( ^REFLSENT(#3) & $1[contextdep](#1,#2) )
   REFLSENT[context=+](#3).

//// INDICATOR_beg \\\\

if ( REFLSENT[context](#3) & $1[contextdep](#1,#2) )
    INDICATOR(#1), INDICATOR(#2).
    
//// INDICATOR_end \\\\


///////////////////// SPECIFICATION OF THE REFLECTION \\\\\\\\\\\\\\\\\\\\


//•	Specific information about the event; specific examples of actions , ideas, learning experiences

//Expressions about learning SOMETHING SPECIFIC (I learned that)*

// *** reflective author + embedded clause, which is not shift *** \\

if ( ^$1[infinit](#1[authrefl,bf:~],#2[lemme:~be,shift:~,sentiment:~]) )
   $1[specificdep=+,refldep=+](#1,#2).

if ( ^$1[infinit](#1[lemme:~be,shift:~,sentiment:~],#2[authrefl,bf:~]) )
   $1[specificdep=+,refldep=+](#1,#2).

//if ( ^EMBED[complthat](#1[shift:~,sentiment:~],#2[authrefl]) )
if ( ^EMBED(#1[shift:~,sentiment:~],#2[authrefl]) & #2 < #1 )
   EMBED[specificdep=+,refldep=+](#1,#2).

//What really struck me about the class was the caring environment.
//SUBJ_PRE_SENTENCE(was,struck)

if ( ^SUBJ[pre,sentence](#1[shift:~,sentiment:~],#2[authrefl]) & #2 < #1 )
   SUBJ[specificdep=+,refldep=+](#1,#2).

if ( ^OBJ[post,sentence](#1[authrefl],#2[shift:~,sentiment:~]) )
   OBJ[specificdep=+,refldep=+](#1,#2).

//I learned the importance of continually developing a relationship between my patient and I, no matter what barriers come along the way.
//OBJ-N(learned,importance)

if ( ^OBJ(#1[authrefl],#2[ksw]) )
    OBJ[specificdep=+,refldep=+](#1,#2).

///I hope to be able to incorporate this into my future projects as I now have a deeper understanding of this broad concept of sustainability.
//MOD_POST(understanding[authrefl],concept)
//PREPD(concept,of)

if ( ^MOD[post](#1[authrefl],#2) & PREPD(#2,#3[lemme:of]) )
   MOD[specificdep=+,refldep=+](#1,#2).

//Also in that visit I learned a lot about workplace health and safety requirements .
//MANNER_POST(learned,a lot)

if ( ^MANNER[post](#1[authrefl],#2) )
   MANNER[specificdep=+,refldep=+](#1,#2).

//That readiness form was actually an attempt to think in an organized way about my career .
//MOD_REFLDEP_SUBCAT_POST(think,career)

if ( ^MOD[refldep,subcat](#1,#2) )
   MOD[specificdep=+](#1,#2).


// With impersonal subject: The reflection is in a subordinate clause

//Being irresponsible for day cost me marks that could have added to my final assessment but I was happy as it was a different learning experience.
//CONNECTOR_COMPLEX_SUBORD(was,as)
//NUCL_AUTHDEP_SUBJCOMPL(was,learning experience)

if ( CONNECTOR[subord](#1,#2) & ^NUCL[authdep,subjcompl](#1,#3) )
   NUCL[specificdep=+,contextdep:~](#1,#3).

//When I was doing my bachelor on electrical engineering at UTS I thought doing only electrical subjects are not enough for my future career .
//MOD_POST_GERUND(thought,doing)

if ( ^$1[post,gerund](#1[authrefl],#2) )
   $1[specificdep=+,refldep=+](#1,#2).


//exception

//VCOORD_SPECIFICDEP_REFLDEP_INFINIT(construct,visualise)

if ( ^VCOORD[specificdep,refldep](#1,#2) )
   VCOORD[specificdep=~,refldep=~](#1,#2).

// REFLSENT_SPECIFIC

if ( ^SENT(#3) & $1[specificdep](#1,#2) )
   REFLSENT[specific=+](#3).


//The important lesson I learn here is that data sheets, current models and guidelines are very important.
//REFLSENT_COMPLEX_ANALYTIC(

| #1[authrefl] |
if ( ^REFLSENT[analytic](#2) )
   REFLSENT[specific=+](#2).

//// INDICATOR_beg \\\\

if ( REFLSENT[specific](#3) & $1[specificdep](#1,#2) )
    INDICATOR(#1), INDICATOR(#2).

| #1[authrefl] |
if ( REFLSENT[analytic,specific](#2)  )
    INDICATOR(#1).

//// INDICATOR_end \\\\


if ( ^REFLSENT(#3) & $1[specificdep](#1,#2) )
   REFLSENT[specific=+](#3).

//// INDICATOR_beg \\\\

if ( REFLSENT[specific](#3) & $1[specificdep](#1,#2) )
    INDICATOR(#1),  INDICATOR(#2).

//// INDICATOR_end \\\\


///////////////////// SHIFT IN REFLECTION \\\\\\\\\\\\\\\\\\\\


//•	Change between assumptions of learning and/or prior knowledge and actual performance

// *** IMPSENT_CONTRAST + reflective author
/
| #1[authrefl] |
if ( $1[analytic](#2) )
   REFLSENT[shift=+](#2).
\
//// INDICATOR_beg \\\\
/
| #1[authrefl] |
if ( $1[analytic](#2) &  REFLSENT[shift](#2) )
    INDICATOR(#1).
\
//// INDICATOR_end \\\\


// *** reflective author - reflection word is also shift word *** \\\

| #1[shift,authrefl] |
if ( ^SENT(#2) )
   REFLSENT[shift=+](#2).

| #1[shift,authrefl] |
if ( ^REFLSENT(#2) )
   REFLSENT[shift=+](#2).

//// INDICATOR_beg \\\\

| #1[shift,authrefl] |
if ( REFLSENT[shift](#2) )
    INDICATOR(#1).


//// INDICATOR_end \\\\

// *** reflective author + embedded clause, which is shift *** \\


//I can already see that my attitude towards University has changed.
//EMBED_SPECIFICDEP_REFLDEP_COMPLTHAT(changed,see)
/

if ( ^$1[infinit](#1[authrefl,bf:~],#2[lemme:~be,shift]) )
   $1[shiftdep=+,refldep=+](#1,#2).

if ( ^$1[infinit](#1[lemme:~be,shift],#2[authrefl,bf:~]) )
   $1[shiftdep=+,refldep=+](#1,#2).

//if ( ^EMBED[complthat](#1[shift],#2[authrefl]) )
if ( ^EMBED(#1[shift],#2[authrefl]) )
   EMBED[shiftdep=+,refldep=+](#1,#2).

if ( ^SUBJ[pre,sentence](#1[shift],#2[authrefl]) )
   SUBJ[shiftdep=+,refldep=+](#1,#2).

if ( ^OBJ[post,sentence](#1[authrefl],#2[shift]) )
   OBJ[shiftdep=+,refldep=+](#1,#2).
\

//After this discussion though, I started to see how deviation from social norms can be much less extreme, even going as far to say some deviations could not be problematic and may not be extremely harmful at all.
//OBJ_POST_INFINIT(started,see)

if ( ^$1(#1[shift],#2[authrefl]) )
    $1[shiftdep=+,refldep=+](#1,#2).


// reflective author + authchange

| #3[authrefl] |
if ( ^$1(#1[shift],#2[lemme:I]) | ^$1(#1[lemme:I],#2[shift]) )
   $1[shiftdep=+](#1,#2).

//REFLSENT[shift=+]

if ( ^SENT(#1) & $1[shiftdep](#2,#3) )
   REFLSENT[shift=+](#1).

if ( ^REFLSENT(#1) & $1[shiftdep](#2,#3) )
   REFLSENT[shift=+](#1).


//// INDICATOR_beg \\\\

if ( REFLSENT[shift](#1) & $1[shiftdep](#2,#3) )
    INDICATOR(#2), INDICATOR(#3).

//// INDICATOR_end \\\\

// reflective author + authchange

| #3[authrefl] |
if ( ^$1(#1[shift],#2[lemme:I]) | ^$1(#1[lemme:I],#2[shift]) )
   $1[shiftdep=+](#1,#2).

if ( ^SENT(#1) & $1[shiftdep](#2,#3) )
    REFLSENT[shift=+](#1).

if ( ^REFLSENT(#1) & $1[shiftdep](#2,#3) )
    REFLSENT[shift=+](#1).

//// INDICATOR_beg \\\\

if ( REFLSENT[shift](#1) & $1[shiftdep](#2,#3) )
    INDICATOR(#2), INDICATOR(#3).

//// INDICATOR_end \\\\

// analytic sentence + authorshift

if ( ^REFLSENT[analytic](#1) & $1(#2[shift],#3[lemme:I]) )
    REFLSENT[shift=+](#1).

if ( ^REFLSENT[analytic](#1) & $2(#1[lemme:I],#3[shift]) )
    REFLSENT[shift=+](#1).

//// INDICATOR_beg \\\\

if ( REFLSENT[shift](#1) & $1(#2[shift],#3[lemme:I]) )
    INDICATOR(#2), INDICATOR(#3).

if ( REFLSENT[shift](#1) & $1(#2[lemme:I],#3[shift]) )
    INDICATOR(#2), INDICATOR(#3).

//// INDICATOR_end \\\\


//Reference to the present and future in the context of reflecting on changed behaviour, expectations or beliefs: since; now; when; as

///////////////////// EXPERIMENTATION \\\\\\\\\\\\\\ 

//Expressions of experimentation and ability (I tried, I tested, I experimented, I developed my capability to, I was/am able to, I was/am unable to, I practised, I asked, I sought advice, I overcame, I couldn’t overcome)

// *** author capability
/
| #1[authcapa] |
if ( ^SENT(#2) & $1[authdep,authcapadep:~](#3[authcapa:~],#4[authcapa:~]) )
   REFLSENT[capability=+](#2).

| #1[authcapa] |
if ( ^REFLSENT(#2) & $1[authdep,authcapadep:~](#3[authcapa:~],#4[authcapa:~]) )
   REFLSENT[capability=+](#2).
\

///////////////////// OTHER'S POINT OF VIEW \\\\\\\\\\\\\\\\\\\


//For some , it was described as less pressuring and time constrained than high school , while others felt like college made them give up some free time they may have had in the past .

///////////////////// other reflection \\\\\\\\\\\\\\\


if ( ^SUBJ-N[authdep:~](#1[reflection,vprog:~],#2) )
   SUBJ-N[otherrefldep=+](#1,#2).

//exceptions

if ( ^SUBJ-N[otherrefldep](#1,#2[lemme:we]) |  ^SUBJ-N[otherrefldep](#1,#2[lemme:it]) | ^SUBJ-N[otherrefldep](#1,#2[lemme:you]) )
    SUBJ-N[otherrefldep=~](#1,#2).

| #2[argumentation,contrast] |
if ( ^SENT(#1) & $1[otherrefldep](?,?) )
    REFLSENT[otherrefl=+](#1).

| #2[argumentation,contrast] |
if ( ^REFLSENT(#1) & $1[otherrefldep](?,?) )
    REFLSENT[otherrefl=+](#1).

//// INDICATOR_beg \\\\

if ( REFLSENT[otherrefl](#1) & $1[otherrefldep](#2,#3) )
    INDICATOR(#2), INDICATOR(#3).


//// INDICATOR_end \\\\

//it turned/turns out; it became clear


///////////////////// YELLOW sentences \\\\\\\\\\\\\\\\\\\

//extending beyond self to domain/world 

//I didn't find indicators of this meaning, but found the following

//will have to
/
//Even throughout a single shift, we will have to encounter many different problems, such as a patient dying or receiving a devastating diagnosis, and still have to care for our many other patients.

//NUCL_VLINK_MODAL(will,have to)

if ( NUCL(#1[lemme:will],#2) & ^SENT(#3) )
    REFLSENT[lesson=+](#3).
    
if ( NUCL(#1[lemme:will],#2) & ^REFLSENT(#3) )
    REFLSENT[lesson=+](#3).
 \   

///////////////////// BLUE sentences \\\\\\\\\\\\\\\\\\\

//course-specific

| #2[course] |
if ( ^REFLSENT(#1) )
    REFLSENT[course=+](#1).


///////////////////// SURFACEREFL sentences \\\\\\\\\\\\\\\\\\\


//////////////// Complex structures \\\\\\\\\\\\\\\\\


if ( ^EMBED[temp](#1,#2) )
    EMBED[complex=+](#1,#2).

if ( ^$1[gerund](#1,#2) )
    EMBED[complex=+](#1,#2).

if ( ^CONNECTOR(#1,#2) )
    CONNECTOR[complex=+](#1,#2).

if ( ^MOD[pre,sentence](#1,#2) )
    MOD[complex=+](#1,#2).

if ( ^TEMP(#1,#2) )
    TEMP[complex=+](#1,#2).

if (^MAIN[ksw](#1) )
    MAIN[complex=+](#1).

if ( ^KSWDEP(#1) )
   KSWDEP[complex=+](#1)


//I chose this subject and I would like to reflect back on some of key experiences that have contributed to my  individual professional growth.
//SUBJ_PRE_RELATIV(have,that)

if ( ^SUBJ[pre,relativ](#1,#2) )
   SUBJ[complex=+](#1,#2).

//I found a efficient was for myself to manage time , both using a physical white board and also the application on my phone to plan and remind me of different deadlines and progress .

| sc, ?*, sc |
if ( ^REFLSENT(#1) )
   REFLSENT[complex=+](#1)

//I tend to look at the problem in depth and consider the problem in an engineer's perception.

| iv , ?*, iv |
if ( ^REFLSENT(#1) )
   REFLSENT[complex=+](#1)



if ( ^REFLSENT(#3) & ( $1[complex](#1,#2) | $1[complex](#1) ) )
   REFLSENT[complex=+](#3).

/////////////// REFLSENT[specific] and no other label \\\\\\\\\\\\\
/
if ( ^REFLSENT[specific,capability:~,context:~,course:~,grow:~,emph:~,otherrefl:~,shift:~,contrast:~,vis:~](#1) )
    REFLSENT[specificonly=+,1label=+](#1).
\
//////////////// REFLSENT[context] and no other label \\\\\\\\\\\\\\
/
if ( ^REFLSENT[specific:~,capability:~,context,course:~,grow:~,emph:~,otherrefl:~,shift:~,contrast:~,vis:~](#1) )
    REFLSENT[contextonly=+,1label=+](#1).
\


//////////////////////////////////////////////////////////////////////////////
// SURFACEREFL SENTENCES: NOMODAL
// the reflective verb does not have any modality: (SUBJ=SUBJ-N)
// +
// the sentence's label is only SPECIFIC or only CONTEXT
// +
// no complex structures
/////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// SIMPLE EVALUATION/1
// a REFLSENT contains a NUCL[subjcompl]
// +  no complex structures
/////////////////////////////////////////////////////////////////////////////

//It is important for me to know what the company is looking for and change accordingly .
//NUCL_SUBJCOMPL(is,important)

if ( ^NUCL[subjcompl](#1[lemme:be],#2[adj]) & REFLSENT[surfacerefl:~](#3) )
    NUCL[subjcompl,surfacerefl=+](#1,#2).

// NUCL[subjcompl] is not surfacerefl if the sentence contains complex structures

if ( $1[complex](#1,#2) & REFLSENT[surfacerefl:~](#3) &  ^NUCL[subjcompl,surfacerefl](#4,#5) )
    NUCL[subjcompl,surfacerefl=~](#4,#5).

if ( $1[complex](#1) & REFLSENT[surfacerefl:~](#3) &  ^NUCL[subjcompl,surfacerefl](#4,#5) )
    NUCL[subjcompl,surfacerefl=~](#4,#5).

// REFLSENT containing NUCL[surfacerefl] is SURFACEREFL

if ( NUCL[subjcompl,surfacerefl](#1,#2) & ^REFLSENT[surfacerefl:~](#3) )
    REFLSENT[surfacerefl=+,simpleval=+](#3).


// further complex structures

//I learnt how to equate petrol motor and electric motor specifications such that the two motors would have the same output as well as their respective pulley sizes needed .
//ORDER_TEMP_REL(learnt_INDICATOR:+,equate_INDICATOR:+)


if ( ^REFLSENT[surfacerefl](#1) & ORDER(#2[reflection],#3) )
    REFLSENT[surfacerefl=~,simpleval=~](#1)

///////////////////////////////////////////////////////////////
// SIMPLE EVALUATION/2
// "it is/was" is surfacerefl in not complex sentences
// SUBJ_PRE(was,It)
///////////////////////////////////////////////////////////////

//It is important for me to know what the company is looking for and change accordingly .

if ( ^SUBJ[pre](#1[lemme:be],#2[lemme:it]) & REFLSENT[surfacerefl:~](#3) & ~$1[complex](#4,#5) & ~$2[complex](#6) )
    SUBJ[surfacerefl=+](#1,#2).

if ( SUBJ[pre,surfacerefl](#1[lemme:be],#2[lemme:it]) & ^REFLSENT[surfacerefl:~](#3) )
    REFLSENT[surfacerefl=+,simpleval=+](#3).


///////////////////////////////////////////////////////////////
// SIMPLE SENTEENCE
// sentences without complex structure, contr words and COURSE
///////////////////////////////////////////////////////////////

if ( ^REFLSENT[surfacerefl:~](#1) & ( $1[complex](#2,#3) | $2[complex](#4) ) )
    REFLSENT[proba=+](#1).

if ( ^REFLSENT[proba:~,surfacerefl:~](#1) )
    REFLSENT[surfacerefl=+,proba=+,simplsent=+](#1).

| #1[contr] |
if ( ^REFLSENT[surfacerefl,proba](#2) )
    REFLSENT[surfacerefl=~,proba=~,simplsent=~](#2).

if ( ^REFLSENT[surfacerefl,proba,course](#2) )
    REFLSENT[surfacerefl=~,proba=~,simplsent=~](#2).

if (^REFLSENT[surfacerefl,simplsent](#3) & PRESENT(#1) & PAST(#2) )
   REFLSENT[surfacerefl=~,simplsent=~](#3)

if ( ^REFLSENT[proba](#1) )
    REFLSENT[proba=~](#1).

///////////////////////////////////////////////////////////////
// REDUCED PERSPECTIVE
//sentences that have no SUBJ that are not pronouns
// + no contr connector (KSWDEP)
///////////////////////////////////////////////////////////////

if ( ^REFLSENT[surfacerefl:~,course:~](#3) & ~SUBJ[sentence:~](#1,#2[pron:~]) & ~KSWDEP(#4) & ~MAIN[ksw](#5) )
    REFLSENT[surfacerefl=+,reduced=+](#3).

// not surfacerefl if there are several tenses

if (^REFLSENT[surfacerefl,reduced](#3) & PRESENT(#1) & PAST(#2) )
   REFLSENT[surfacerefl=~,reduced=~](#3)

//I think they are fantastic opportunities , and if there is anything about the course that I think has changed me as a person , it would be the community volunteer placements .
//VASPECT_A_PERFECT(changed)
//PRESENT(think)

if (^REFLSENT[surfacerefl,reduced](#3) & PRESENT(#1) & NUCL[perfect](#2,#4) )
   REFLSENT[surfacerefl=~,reduced=~](#3).

// exception: there are at least two pronoun subjects, but they are different
//Also during some professional interaction I felt a bit behind when it came to describing something as compared to our team members.
//SUBJ_PRE(came,it)
//SUBJ(felt,I)

if ( SUBJ(?,#1[pron]) & SUBJ(?,#2[pron]) & ^REFLSENT[surfacerefl,reduced](#3) & #1 ~: #2 )
    REFLSENT[surfacerefl=~,reduced=~](#3).

///////////////////////

if ( ^REFLSENT[surfacerefl,complex](#1) )
   REFLSENT[surfacerefl=~,simplsent=~,simpleval=~,reduced=~](#1)


if ( ^REFLSENT[specificonly,complex:~](#1) )
   REFLSENT[surfacerefl=+](#1).
 



////////////// eliminate 1label, specificonly, contextonly in not surfacerels sentences
/
if ( ^REFLSENT[surfacerefl:~](#1) )
   REFLSENT[1label=~,specificonly=~,contextonly=~](#1).
\

if ( ^REFLSENT[complex:~,analytic:~](#1) )
   REFLSENT[surfacerefl=+](#1)

if ( ^REFLSENT[surfacerefl,simplsent:~,simpleval:~,reduced:~](#1) )
   REFLSENT[vague=+](#1).

/////////////////////////////////////////////////////////////////////////////
///////////////////////  MARK TRIGGER WORDS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////////////////////////////////////////////

/
if ( INDICATOR(#1[authrefl]) & $1[authdep](#1,#2) )
    INDICATOR(#2).

if ( INDICATOR(#2[authrefl]) & $1[authdep](#1,#2) )
    INDICATOR(#1).
\

if ( INDICATOR(?) & $1[authrefl](#1,#2) )
    INDICATOR(#1), INDICATOR(#2).

| #1[indicator=+] |
if ( INDICATOR(#1) )
    ~.


/////////////////////////////////////////////////////////////////////////////
///////////////////////  MARK CONCEPTS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////////////////////////////////////////////


//CONTRIBUTION is not IMPSENT in the reflective parser


if ( SENT(#1) & ^CONCEPT[contribution](#2) )
    CONCEPT[contribution=~,impsent=~,reflsent=~](#2).

if ( SENT(#1) & ^CONCEPT[contribution](#2,#3) )
    CONCEPT[contribution=~,impsent=~,reflsent=~](#2,#3).

if ( SENT(#1) & ^CONCEPT[contribution](#2,#3,#4) )
    CONCEPT[contribution=~,impsent=~,reflsent=~](#2,#3,#4).

if ( SENT(#1) & ^CONCEPT[contribution](#2,#3,#4,#5) )
    CONCEPT[contribution=~,impsent=~,reflsent=~](#2,#3,#4,#5).

/////////////


if ( REFLSENT(#1) & ^CONCEPT(#2) )
   CONCEPT[reflsent=+](#2).

if ( REFLSENT(#1) & ^CONCEPT(#2,#3) )
   CONCEPT[reflsent=+](#2,#3).

if ( REFLSENT(#1) & ^CONCEPT(#2,#3,#4) )
   CONCEPT[reflsent=+](#2,#3,#4).

if ( REFLSENT(#1) & ^CONCEPT(#2,#3,#4,#5) )
   CONCEPT[reflsent=+](#2,#3,#4,#5).




| #1[conceptword=~] |
if ( CONCEPT[reflsent:~](#1) )
   ~.

| #1[conceptword=~] |
if ( CONCEPT[reflsent:~](#1,#2) )
   ~.

| #2[conceptword=~] |
if ( CONCEPT[reflsent:~](#1,#2) )
   ~.

| #1[conceptword=~] |
if ( CONCEPT[reflsent:~](#1,#2,#3) )
   ~.

| #2[conceptword=~] |
if ( CONCEPT[reflsent:~](#1,#2,#3) )
   ~.

| #3[conceptword=~] |
if ( CONCEPT[reflsent:~](#1,#2,#3) )
   ~.

| #1[conceptword=~] |
if ( CONCEPT[reflsent:~](#1,#2,#3,#4) )
   ~.

| #2[conceptword=~] |
if ( CONCEPT[reflsent:~](#1,#2,#3,#4) )
   ~.

| #3[conceptword=~] |
if ( CONCEPT[reflsent:~](#1,#2,#3,#4) )
   ~.

| #4[conceptword=~] |
if ( CONCEPT[reflsent:~](#1,#2,#3,#4) )
   ~.



