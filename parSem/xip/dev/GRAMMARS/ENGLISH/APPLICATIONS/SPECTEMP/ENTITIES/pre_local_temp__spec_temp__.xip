//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2003 Xerox Corporation.  All Rights Reserved.
//!
//! --- CONTENTS ---
//!   Project    : English XIP grammar
//!   filename   : pre_local_temp.xip
//!   Date       : October 2005
//!   Author     : Caroline Hagege
//!  
//!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


Variables:

int i;
string str_type;
string _str_var;
// Python dictionary will be changed into a XIP dictionary 
//   at the end of each sentence
Dictionary temp_dict="";


Script:

1> temp_dict = "";
1> init_dict(temp_dict); 
//1> print_xip_dict(temp_dict);



Marker:

// YEAR DESAMB
//   all that is tagged as a year but is not




Sequence: 

// parenthetized timezones
10> noun[timezone:+,abr:+,t_absolut:+] = punct[form:fopar], ?[timezone:+], punct[form:fcpar] .

// night-time
10> noun[period:h,  period_length:+, posttime:+, lower_unit:h, lower_number:10,
			spec_period=ni, period_frequ:1, period_frequ_unit:d] =
	noun[lemme:night], (punct[form:fhyph]), noun[lemme:time].

// daylight hours = daytime
10> NP[period:h,  period_length:+, posttime:+, lower_unit:h, lower_number:10,
			spec_period=dt, period_frequ:1, period_frequ_unit:d] =
	noun[lemme:daylight], noun[lemme:hour].




Fragment:
// problem with tokenization, 10PM, 11AM... splitted into two nodes (and handled in localdates.xip)
11> "%d(%d)%1[am,Am,AM]%2" : noun[guess] = dig%1[smallhour=+,hour=+,card=+], noun%2[posthour=am].
11> "%d(%d)%1[pm,Pm,PM]%2" : noun[guess] = dig%1[smallhour=+,hour=+,card=+], noun%2[posthour=pm].


// problem also with 1237GTM, 1265EDT, ... (means 12:37 GMT, ...
11> "%d%d%d%d%1GMT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=gmt].
11> "%d%d%d%d%1ACDT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1ACST%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1ADT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1AEDT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1AEST%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1AKST%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1AKDT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1BST%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1CDT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1CEDT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1CEST%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1CET%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1CST%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1EDT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1EST%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1EEST%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1GMT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1MDT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1MST%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1PDT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1PST%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1UTC%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1WEDT%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1WET%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].
11> "%d%d%d%d%1WST%2" : noun[guess] = dig%1[time=+], noun%2[timezone=+].



Sequence:

// Special dates

// January 1st / new year's day
10> noun[temp_level=d,tempexpr=+,date=+] = ?[lemme:new], ?[lemme:year], (part[poss]), ?[lemme:day],
	where(str_type = "-----0101T-------O---W---" & add_special_date(#0, str_type, "d")).
10> noun[temp_level=d,tempexpr=+,date=+] = ?[lemme:New_Year], (part[poss]), ?[lemme:day],
	where(str_type = "-----0101T-------O---W---" & add_special_date(#0, str_type, "d")).




// 11th of November
// Remembrance Day (Australia, Canada, United Kingdom), 
//  also known as Poppy Day (South Africa and Malta), and Armistice Day
10> noun[temp_level=d,tempexpr=+,date=+] = ?[lemme:remembrance], ?[lemme:day],
	where(str_type = "-----1111T-------O---W---" & add_special_date(#0, str_type, "d")).
10> noun[temp_level=d,tempexpr=+,date=+] = ?[lemme:poppy], ?[lemme:day],
	where(str_type = "-----1111T-------O---W---" & add_special_date(#0, str_type, "d")).
10> noun[temp_level=d,tempexpr=+,date=+] = ?[lemme:armistice], ?[lemme:day],
	where(str_type = "-----1111T-------O---W---" & add_special_date(#0, str_type, "d")).



// 31 december / new year's eve
10> noun[temp_level=d,tempexpr=+,date=+] = ?[lemme:new], ?[lemme:year], (part[poss]), ?[lemme:eve],
	where(str_type = "-----1231T-------O---W---" & add_special_date(#0, str_type, "d")).
10> noun[temp_level=d,tempexpr=+,date=+] = ?[lemme:New_Year], (part[poss]), ?[lemme:eve],
	where(str_type = "-----1231T-------O---W---" & add_special_date(#0, str_type, "d")).
	


Marker:

// 1st of November
15> noun#1[lemme:Allhallowmas,temp_level=d,tempexpr=+,date=+],
	where(str_type = "-----1101T-------O---W---" & add_special_date(#1, str_type, "d")).
15> noun#1[lemme:Allhallows,temp_level=d,tempexpr=+,date=+],
	where(str_type = "-----1101T-------O---W---" & add_special_date(#1, str_type, "d")).
15> noun#1[lemme:All_Saints'_Day,temp_level=d,tempexpr=+,date=+],
	where(str_type = "-----1101T-------O---W---" & add_special_date(#1, str_type, "d")).

// Thanksgiving
//   4th Thursday of November
//     for the moment, just a Thursday in November
15> #1[lemme:Thanksgiving,temp_level=d,tempexpr=+,date=+],
	where(str_type = "-----11--T-------O---W--4" & add_special_date(#1, str_type, "d")).

// Holloween (October 31)
15> #1[lemme:Halloween,temp_level=d,tempexpr=+,date=+],
	where(str_type = "-----1031T-------O---W---" & add_special_date(#1, str_type, "d")).


// Special dates
// 25 december / Christmas
15> #1[lemme:Christmas, temp_level=d,tempexpr=+,date=+],
	where(str_type = "-----1225T-------O---W---" & add_special_date(#1, str_type, "d")).



Script:

20> | ?[meas:~], #1[Decade] | {if (add_date_decade(#1, "unknown")) {SetFeature(#1, "date", "+"); SetFeature(#1, "tempexpr", "+"); SetFeature(#1, "temp_level", "y");}}

//20> | dig#1[percent:~, Month:~, Day:~, ShortYear:~, Year:~] | {if (add_date_year(#1)) {SetFeature(#1, "year", "+");}}

20> | #1[Year] | {if (add_date_year(#1)) {SetFeature(#1, "date", "+"); SetFeature(#1, "temp_level", "y");}}

20> | #1[ShortYear] | {add_date_short_year(#1);}

20> | #1[noun,month] | {add_date_month(#1);} 
//) {SetFeature(#1, "date", "+"); SetFeature(#1, "temp_level", "m");SetFeature(#1, "tempexpr", "+"); }}

20> | #1[month,noun:~] | {if (add_date_month(#1)) {SetFeature(#1, "date", "+");}}

20> | #1[noun,Day,sg] | {if (add_date_day(#1)) {SetFeature(#1, "date", "+");}}
20> | #1[noun,Day,sg:~] | {add_date_day(#1);}

20> | #1[Day,noun:~] | {if (add_date_day(#1)) {SetFeature(#1, "date", "+");}}

//20> | #1[ord] | {add_day_of_the_year(#1);}

20> | #1[spec_period, spec_period:~+] | {if (add_date_period(#1)) {SetFeature(#1, "temp_level", "p");}}

20> | #1[timezone] | {add_gmt(#1);}

20> | #1[temp_rel]  | {add_temporal_relation(#1);}

20> | quant#1[c_set];prep#1[c_set] | {add_quant(#1, "EACH");}

20> | #1[c_set,period_frequ,period_frequ_unit] | {add_freq(#1);}

// removed because "last" or others were full c_anchors
//20> | #1[preperiod,c_anchor=+] | {}

20> | #1[lemme:yesterday,c_anchor=+] | {SetFeature(#1, "temp_level", "d"); add_anchor_date(#1, "d", "1", "before", "s");}
20> | #1[lemme:today,c_anchor=+]     | {SetFeature(#1, "temp_level", "d"); add_anchor_date(#1, "d", "1", "present", "s");}
20> | #1[lemme:tonight,c_anchor=+]   | {SetFeature(#1, "temp_level", "d"); add_anchor_date(#1, "h", "1", "present", "s");}
20> | #1[lemme:tomorrow,c_anchor=+]  | {SetFeature(#1, "temp_level", "d"); add_anchor_date(#1, "d", "1", "after", "s");}
20> | #1[lemme:now,c_anchor=+]       | {SetFeature(#1, "temp_level", "p"); add_anchor_date(#1, "", "", "present", "s");}



Marker:


// Coordination of ORDs was already treated in localgram1 in a non-temporal grammar
// use it like it is

// between 15th and 16th
// here is_month_known to be added
25> prep#3[form:fbetween], dig#4{dig#1[ord], conj[coord, form:fand], dig#2[ord]}, #5,
	where(#5[lemme:~century] & #5[lemme:~millennium] & SetFeature(#4, "temp_level", "d") &
	concat_dates(#1, #2, #3, #4, "d", "d")).

// 15th or 16th  (without between before, treated in previous rule)
// here is_month_known to be added
25> ?[form:~fbetween], dig#4[temp_level=d]{dig#1[ord], conj#3[coord], dig#2[ord]}, #5,
	where(#5[lemme:~century] & #5[lemme:~millennium] & concat_dates(#1, #2, #3, #4, "d", "d")).


// between 15th and 16th centuries
// here is_month_known to be added
25> prep#3[form:fbetween], dig#4{dig#1[ord], conj[coord, form:fand], dig#2[ord]}, #5[lemme:century];#5[lemme:millennium],
	where(SetFeature(#1, "temp_level", "y") & add_century_millennium(#1, #1, #5) & 
		SetFeature(#2, "temp_level", "y") & add_century_millennium(#2, #2, #5) & 
		SetFeature(#4, "temp_level", "y") & concat_dates(#1, #2, #3, #4, "y", "y")).

// 15th or 16th  (without between before, treated in previous rule)
// here is_month_known to be added
25> ?[form:~fbetween], dig#4{dig#1[ord], conj#3[coord], dig#2[ord]}, #5[lemme:century];#5[lemme:millennium],
	where(SetFeature(#1, "temp_level", "y") & add_century_millennium(#1, #1, #5) & 
		SetFeature(#2, "temp_level", "y") & add_century_millennium(#2, #2, #5) & 
		SetFeature(#4, "temp_level", "y") & concat_dates(#1, #2, #3, #4, "y", "y")).


// feast event that have not been attributed a temporal value 
//   (see dates above)
// get an empty date
26> #1[feast_event],
	where(~key_exists(#1) & add_empty_date(#1, "p")).