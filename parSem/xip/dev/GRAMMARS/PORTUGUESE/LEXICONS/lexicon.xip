//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe
//!                                                                            !
//! Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
//!                                                                            !
//! --- CONTENTS ---                                                           !
//!   Project    : Portuguese XIP grammar                                      !
//!   filename   : lexicon.xip                                                 !
//!   Date       : 2006/March                                                  !
//!   Author     : Nuno Mamede (INESC-ID) - Caroline Hagege                                           !
//!                                                                            !
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!                                                                            !
//!   Based on a previous version developed by Caroline Hagege at Xerox        !
//!       Research Centre Europe - Grenoble Laboratory.                        !
//!                                                                            !
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// $Id: lexicon.xip,v 1.5 2008/10/21 14:26:21 chagege Exp $


Vocabulary:

// Refinements that are necessary for syntax
// We refine the categories at the level of XIP lexicon


//==============================================================================
// Treatment of the quotes (treated as markups)
//==============================================================================

// With this rules all the the elements between quotes will bear
// the feature guille:+ and the quotes will be ignored in the
// analysis.
// In order to make this rule active, it is necessary to declare
// feature guille:+

// \"  <>*= [guille=+].



//==============================================================================
// Punctuation
//==============================================================================
\´    += [accent=+].              // accent
\`    += [accent=+].              // accent
\~    += [accent=+].              // accent
\^    += [accent=+].              // accent
\,    += [comma=+].               // comma
\-    += [dash=+].                // dash
\.    += [dots=+].                // dots
\\    += [slash=+].               // slash or backslash
\/    += [slash=+].               // slash or backslash
\[    += [bracket=+,left=+].      // bracket
\]    += [bracket=+,right=+].     // bracket
\(    += [paren=+,left=+].        // parenthesis
\)    += [paren=+,right=+].       // parenthesis
\"    += [quote=+].               // quotation mark
\?    += [quest=+].               // question mark
\«    += [bracket=+,left=+].      // bracket
\»    += [bracket=+,right=+].     // bracket


//==============================================================================
// indefinite pronouns indef1 and subclasses
//==============================================================================

// Q3
// Definition of entry "bastante". FST categorizes it as adjective and quantifier.
// We do not want to have the adjective possibility
bastante = pron[pron:+,q3:+,indef:+].

// adding feature q3 when necessary
muito     += [q3=+].
pouco     += [q3=+].

// TANTO
tanto     += [tanto=+].

// VARIO
vários    += [vario=+].

// TAL -redefinition
//tal: pron = pron[pron:+,tal:+,dem:+,sg:+].
//tal: adj[adj:+,pl:+] = pron[pron:+,tal:+,indef:+,pl:+].


// OUTRO feature addition
outro += [outro=+].

// MESMO - redefintion of ADJ
mesmo    += [mesmo=+].
restante += [mesmo=+,indef:+].

// PROPRIO
próprio += [proprio=+].

isto   += [proxindef=+].
isso   += [proxindef=+].
aquilo += [proxindef=+].


//==============================================================================
// Todos e ambos in the same category TODOS/AMBOS
//==============================================================================
todo  += [todo=+].
ambos += [todo=+].


//==============================================================================
// ALGUM/ UNS
//==============================================================================
algum += [algum=+].

// adding feature algum (q2) for "uns"
um : ?[pl:+]  += [algum=+].


//==============================================================================
// CADA QUALQUER NENHUM CERTO
//==============================================================================
// redefinition of cada
//cada = pron[other_indef2:+, pron:+].

// redefinition of qualquer
//qualquer = pron[other_indef2:+,pron:+].

// redefinition of nenhum
nenhum = pron[other_indef2:+,pron:+].


//==============================================================================
// dem pronouns
//==============================================================================
este   += [proxdem=+].
esse   += [proxdem=+].
aquele += [proxdem=+].


//==============================================================================
// AUXILIARY MODAL VERBS (VMOD)
//==============================================================================
dever:           verb[verb:+] += [noInfDeo:+, deInfDeo:+].
ficar:           verb[verb:+] += [deInfObr:+].
haver:           verb[verb:+] += [deInfObr:+].
poder:           verb[verb:+] += [noInfDeo:+].
ter:             verb[verb:+] += [deInfObr:+, queInfObr:+].
ser:             verb[verb:+] += [deInfDeoImpf:+].
hesitar:         verb[verb:+] += [emInfIrreal:+].
hesitar:         verb[verb:+] += [noInfIrreal:+].
dever:   pastpart[pastpart:+] += [noInfDeo:+, deInfDeo:+].
ficar:   pastpart[pastpart:+] += [deInfObr:+].
haver:   pastpart[pastpart:+] += [deInfObr:+].
poder:   pastpart[pastpart:+] += [noInfDeo:+].
ter:     pastpart[pastpart:+] += [deInfObr:+, queInfObr:+].
ser:     pastpart[pastpart:+] += [deInfDeoImpf:+].
hesitar: pastpart[pastpart:+] += [emInfIrreal:+].
hesitar: pastpart[pastpart:+] += [noInfIrreal:+].

//==============================================================================
// AUXILIARY TENSE VERBS (VTEMP)
//==============================================================================
haver:           verb[verb:+] += [noPpPas:+,queInfDeoImps:+].
ir:              verb[verb:+] += [noInfFut:+,aInfFut:+].
ter:             verb[verb:+] += [noPpPas:+].


//==============================================================================
// AUXILIARY ASPECTUAL VERBS (VASP)
//==============================================================================
acabar      += [noGerTer:+, aInfTer:+,deInfTer:+,porInfTer:+].
andar       += [aInfDur:+,noGerDur:+].
cessar      += [deInfTer:+].
chegar      += [aInfTer:+].
começar     += [aInfInc:+,porInfInc:+].
continuar   += [aInfDur:+,noGerDur:+].
correr      += [aInfInc:+].
costumar    += [noInfFre:+,deInfFre:+].
deitar      += [aInfInc:+].
deixar      += [deInfTer:+].
desatar     += [aInfInc:+].
estar       += [aInfDur:+,noGerDur:+,paraInfImp:+,porInfImpP:+].
//estar a ponto += [deInfInc:+].        coded as a chunk
//estar prestes += [aInfInc:+].         coded as a chunk
ficar       += [aInfDur:+,noGerDur:+].
ir          += [noGerDur:+].
passar      += [aInfInc:+].
parar       += [deInfTer:+].
pôr         += [aInfInc:+,noGerInc:+].
recomeçar   += [aInfIte:+].
tornar      += [aInfIte:+].
vir         += [noGerDur:+,aInfTer:+,deInfTer:+].
voltar      += [aInfIte:+].


//==============================================================================
//  COP VERBS
//==============================================================================
estar       += [cop:+].
ser         += [cop:+].
andar       += [cop:+].
viver       += [cop:+].
continuar   += [cop:+].
ficar       += [cop:+].
parecer     += [cop:+].
permanecer  += [cop:+].
//tornar-se += [cop:+].    por regra


//==============================================================================
// Adding feature coord on "e" and "ou"
//==============================================================================
e:   conj[conj:+] += [coord=+].
ou:  conj[conj:+] += [coord=+].

nem: conj[conj:+] += [neg=+].



//==============================================================================
// Adding feature meas (measure - unit)
//==============================================================================
etc:       noun += [etc=+].

pouco:     noun += [meas=+].

"o_que":    rel += [qu:+].
qual:      pron += [qu:+].
"por_que"	     = pron[qu=+].
que              = pron[qu=+].
quando           = pron[qu=+,temporal=+].
onde             = pron[qu=+,local=+].
quem             = pron[qu=+].
porque           = conj[qu=+].



//==============================================================================
// Atenção esta regra pode não fazer sentido para os dois
// A mim dá-me jeito para coisas como "ainda que", "cada vez que", "de modo que" etc.
//  que são consideradas como um só token na morf da Xerox
//                                                          NUNCA APAGAR (Nuno)
"%c+ que":      conj += [qu=+].
"%c+_que":	conj += [qu=+].
"%c+ %c+ que":  conj += [qu=+].
"%c+_%c+_que":  conj += [qu=+].


// CH . Nao percebo isto (cozido e um local ?????)
cozer:     pastpart += [local=+].


//======================================================================
// Teste para segmentacao no HAREM (balizas)
"\/DOC"		+= [sent:+] .


