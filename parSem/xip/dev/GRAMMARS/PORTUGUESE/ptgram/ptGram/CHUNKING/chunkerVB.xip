//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!                                                                            !
//! --- CONTENTS ---                                                           !
//!   Project    : Portuguese XIP grammar                                      !
//!   filename   : chunkerVB.xip                                               !
//!   Date       : 2011/febru                                                  !
//!   Author     : Nuno Mamede                                                 !
//!                                                                            !
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!                                                                            !
//!   VERBS                                                                    !
//!                                                                            !
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
//NJM+JB, 2011/02/19 (São Carlos)
//
// VC - VERBAL CHAIN
//
//      (2nd stage, after NPs and PPs, but before SCs)
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

DependencyRules:
| VF[aInfIrreal=+]   {?[aInfIrreal]}     ;VGER[aInfIrreal=+]   {?[aInfIrreal]}      ;VPP[aInfIrreal=+]   {?[aInfIrreal]}}      ;VTEMP[aInfIrreal=+]   {?[aInfIrreal]}}    | ~
| VF[aInfReal=+]     {?[aInfReal]}       ;VGER[aInfReal=+]     {?[aInfReal]}        ;VPP[aInfReal=+]     {?[aInfReal]}}        ;VTEMP[aInfReal=+]     {?[aInfReal]}}      | ~
| VF[deInfDeo=+]     {?[deInfDeo]}       ;VGER[deInfDeo=+]     {?[deInfDeo]}        ;VPP[deInfDeo=+]     {?[deInfDeo]}}        ;VTEMP[deInfDeo=+]     {?[deInfDeo]}}      | ~
| VF[deInfDeoImpf=+] {?[deInfDeoImpf]}   ;VGER[deInfDeoImpf=+] {?[deInfDeoImpf]}    ;VPP[deInfDeoImpf=+] {?[deInfDeoImpf]}}    ;VTEMP[deInfDeoImpf=+] {?[deInfDeoImpf]}}  | ~
| VF[deInfImp=+]     {?[deInfImp]}       ;VGER[deInfImp=+]     {?[deInfImp]}        ;VPP[deInfImp=+]     {?[deInfImp]}}        ;VTEMP[deInfImp=+]     {?[deInfImp]}}      | ~
| VF[deInfIrreal=+]  {?[deInfIrreal]}    ;VGER[deInfIrreal=+]  {?[deInfIrreal]}     ;VPP[deInfIrreal=+]  {?[deInfIrreal]}}     ;VTEMP[deInfIrreal=+]  {?[deInfIrreal]}}   | ~
| VF[deInfObr=+]     {?[deInfObr]}       ;VGER[deInfObr=+]     {?[deInfObr]}        ;VPP[deInfObr=+]     {?[deInfObr]}}        ;VTEMP[deInfObr=+]     {?[deInfObr]}}      | ~
| VF[emInfIrreal=+]  {?[emInfIrreal]}    ;VGER[emInfIrreal=+]  {?[emInfIrreal]}     ;VPP[emInfIrreal=+]  {?[emInfIrreal]}}     ;VTEMP[emInfIrreal=+]  {?[emInfIrreal]}}   | ~
| VF[noInfDeo=+]     {?[noInfDeo]}       ;VGER[noInfDeo=+]     {?[noInfDeo]}        ;VPP[noInfDeo=+]     {?[noInfDeo]}}        ;VTEMP[noInfDeo=+]     {?[noInfDeo]}}      | ~
| VF[noInfIrreal=+]  {?[noInfIrreal]}    ;VGER[noInfIrreal=+]  {?[noInfIrreal]}     ;VPP[noInfIrreal=+]  {?[noInfIrreal]}}     ;VTEMP[noInfIrreal=+]  {?[noInfIrreal]}}   | ~
| VF[queInfDeoImps=+]{?[queInfDeoImps]}  ;VGER[queInfDeoImps=+]{?[queInfDeoImps]}   ;VPP[queInfDeoImps=+]{?[queInfDeoImps]}    ;VTEMP[queInfDeoImps=+]{?[queInfDeoImps]}  | ~
| VF[queInfObr=+]    {?[queInfObr]}      ;VGER[queInfObr=+]    {?[queInfObr]}       ;VPP[queInfObr=+]    {?[queInfObr]}}       ;VTEMP[queInfObr=+]    {?[queInfObr]}}     | ~

| VF[aInfFut=+]      {?[aInfFut]}        ;VGER[aInfFut=+]      {?[aInfFut]}         ;VPP[aInfFut=+]      {?[aInfFut]}}         ;VTEMP[aInfFut=+]      {?[aInfFut]}}       | ~
| VF[noInfFut=+]     {?[noInfFut]}       ;VGER[noInfFut=+]     {?[noInfFut]}        ;VPP[noInfFut=+]     {?[noInfFut]}}        ;VTEMP[noInfFut=+]     {?[noInfFut]}}      | ~
| VF[noPpPas=+]      {?[noPpPas]}        ;VGER[noPpPas=+]      {?[noPpPas]}         ;VPP[noPpPas=+]      {?[noPpPas]}}         ;VTEMP[noPpPas=+]      {?[noPpPas]}}       | ~

| VF[aInfDur=+]      {?[aInfDur]}        ;VGER[aInfDur=+]      {?[aInfDur]}         ;VPP[aInfDur=+]      {?[aInfDur]}}         ;VTEMP[aInfDur=+]      {?[aInfDur]}}       | ~
| VF[aInfInc=+]      {?[aInfInc]}        ;VGER[aInfInc=+]      {?[aInfInc]}         ;VPP[aInfInc=+]      {?[aInfInc]}}         ;VTEMP[aInfInc=+]      {?[aInfInc]}}       | ~
| VF[aInfIte=+]      {?[aInfIte]}        ;VGER[aInfIte=+]      {?[aInfIte]}         ;VPP[aInfIte=+]      {?[aInfIte]}}         ;VTEMP[aInfIte=+]      {?[aInfIte]}}       | ~
| VF[aInfTer=+]      {?[aInfTer]}        ;VGER[aInfTer=+]      {?[aInfTer]}         ;VPP[aInfTer=+]      {?[aInfTer]}}         ;VTEMP[aInfTer=+]      {?[aInfTer]}}       | ~
| VF[deInfFre=+]     {?[deInfFre]}       ;VGER[deInfFre=+]     {?[deInfFre]}        ;VPP[deInfFre=+]     {?[deInfFre]}}        ;VTEMP[deInfFre=+]     {?[deInfFre]}}      | ~
| VF[deInfInc=+]     {?[deInfInc]}       ;VGER[deInfInc=+]     {?[deInfInc]}        ;VPP[deInfInc=+]     {?[deInfInc]}}        ;VTEMP[deInfInc=+]     {?[deInfInc]}}      | ~
| VF[deInfTer=+]     {?[deInfTer]}       ;VGER[deInfTer=+]     {?[deInfTer]}        ;VPP[deInfTer=+]     {?[deInfTer]}}        ;VTEMP[deInfTer=+]     {?[deInfTer]}}      | ~
| VF[emInfInc=+]     {?[emInfInc]}       ;VGER[emInfInc=+]     {?[emInfInc]}        ;VPP[emInfInc=+]     {?[emInfInc]}}        ;VTEMP[emInfInc=+]     {?[emInfInc]}}      | ~
| VF[noGerDur=+]     {?[noGerDur]}       ;VGER[noGerDur=+]     {?[noGerDur]}        ;VPP[noGerDur=+]     {?[noGerDur]}}        ;VTEMP[noGerDur=+]     {?[noGerDur]}}      | ~
| VF[noGerInc=+]     {?[noGerInc]}       ;VGER[noGerInc=+]     {?[noGerInc]}        ;VPP[noGerInc=+]     {?[noGerInc]}}        ;VTEMP[noGerInc=+]     {?[noGerInc]}}      | ~
| VF[noGerTer=+]     {?[noGerTer]}       ;VGER[noGerTer=+]     {?[noGerTer]}        ;VPP[noGerTer=+]     {?[noGerTer]}}        ;VTEMP[noGerTer=+]     {?[noGerTer]}}      | ~
| VF[noInfFre=+]     {?[noInfFre]}       ;VGER[noInfFre=+]     {?[noInfFre]}        ;VPP[noInfFre=+]     {?[noInfFre]}}        ;VTEMP[noInfFre=+]     {?[noInfFre]}}      | ~
| VF[noInfDur=+]     {?[noInfDur]}       ;VGER[noInfDur=+]     {?[noInfDur]}        ;VPP[noInfDur=+]     {?[noInfDur]}}        ;VTEMP[noInfDur=+]     {?[noInfDur]}}      | ~
| VF[paraInfImp=+]   {?[paraInfImp]}     ;VGER[paraInfImp=+]   {?[paraInfImp]}      ;VPP[paraInfImp=+]   {?[paraInfImp]}}      ;VTEMP[paraInfImp=+]   {?[paraInfImp]}}    | ~
| VF[porInfImpP=+]   {?[porInfImpP]}     ;VGER[porInfImpP=+]   {?[porInfImpP]}      ;VPP[porInfImpP=+]   {?[porInfImpP]}}      ;VTEMP[porInfImpP=+]   {?[porInfImpP]}}    | ~
| VF[porInfTer=+]    {?[porInfTer]}      ;VGER[porInfTer=+]    {?[porInfTer]}       ;VPP[porInfTer=+]    {?[porInfTer]}}       ;VTEMP[porInfTer=+]    {?[porInfTer]}}     | ~

| VF[cop=+]          {?[cop]}            ;VGER[cop=+]          {?[cop]}             ;VPP[cop=+]          {?[cop]}}             ;VTEMP[cop=+]          {?[cop]}}           | ~
| VF[durativo=+]     {?[cop,durativo]}   ;VGER[durativo=+]     {?[cop,durativo]}    ;VPP[durativo=+]     {?[cop,durativo]}     ;VTEMP[durativo=+]     {?[cop,durativo]}   | ~
| VF[permansivo=+]   {?[cop,permansivo]} ;VGER[permansivo=+]   {?[cop,permansivo]}  ;VPP[permansivo=+]   {?[cop,permansivo]}   ;VTEMP[permansivo=+]   {?[cop,permansivo]} | ~
| VF[incoat=+]       {?[cop,incoat]}     ;VGER[incoat=+]       {?[cop,incoat]}      ;VPP[incoat=+]       {?[cop,incoat]}       ;VTEMP[incoat=+]       {?[cop,incoat]}     | ~
| VF[irreal=+]       {?[cop,irreal]}     ;VGER[irreal=+]       {?[cop,irreal]}      ;VPP[irreal=+]       {?[cop,irreal]}       ;VTEMP[irreal=+]       {?[cop,irreal]}     | ~
| VF[real=+]         {?[cop,real]}       ;VGER[real=+]         {?[cop,real]}        ;VPP[real=+]         {?[cop,real]}         ;VTEMP[real=+]         {?[cop,real]}       | ~

| ?[verb,inf=+]      {?[verb,inf]}      | ~
| ?[verb,gerund=+]   {?[verb,gerund]}   | ~

Sequence:



//======================================================================
// VASP - verbo que auxilia verbos introduzindo traços aspectuais
//======================================================================
// Example: [Estava o Pedro a ponto de] comer a sopa
1> VASP[incoat=+] = VF[lemma:estar], advp*, NP;PP, advp*, ?[surface:"a ponto de"] |VINF|.

// Example: [Estava o Pedro prestes a] comer a sopa
1>VASP[incoat=+]  = VF[lemma:estar], advp*, NP;PP, advp*, ?[surface:"prestes a"]  |VINF|.

Reshuffling:
2> VASP[incoat=+]{VF{?-#1};VGER{?-#1}, ?-#2}= VASP[incoat=+]{#1,#2}.
Sequence:



//======================================================================
// VMOD = verbo que auxilia verbos introduzindo traços modais
//======================================================================

// VERBO "HAVER-DE" e "HAVER de"
// Example: [há-de]VMOD o Pedro ler o livro
//
4> VMOD[obrig=+] = ?[lemma:haver], ?[lemma:de] | pron*,             (np;pp;advp)+,                      ?[verb,inf]|.
4> VMOD[obrig=+] = ?[lemma:haver], ?[lemma:de] | np*, punct[comma], (advp;pp;pron)+, punct[comma],      ?[verb,inf]|.
4> VMOD[obrig=+] = ?[lemma:haver], ?[lemma:de] |      punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[verb,inf]|.
4> VMOD[obrig=+] = ?[lemma:haver], ?[lemma:de] | np*, punct[comma], (advp;pp;pron)+, punct[comma],      ?[verb,inf]|.
4> VMOD[obrig=+] = ?[lemma:haver], ?[lemma:de] |      punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[verb,inf]|.


//NJM+JB, 2012/10/29
//
// VERBO "ESTAR LONGE DE"
// Example: O Pedro [está longe de]VMOD ganhar o prémio.
// Example: O Pedro [está muito longe de]VMOD ganhar o prémio.
//
4> VMOD[irreal=+] = ?[lemma:estar], (advp), ?[lemma:"longe de"];?[lemma:"perto de"] | pron*,             (np;pp;advp),                       ?[verb,inf]|.
4> VMOD[irreal=+] = ?[lemma:estar], (advp), ?[lemma:"longe de"];?[lemma:"perto de"] | pron*,             (np;pp;advp)+,                      ?[verb,inf]|.
4> VMOD[irreal=+] = ?[lemma:estar], (advp), ?[lemma:"longe de"];?[lemma:"perto de"] | np*, punct[comma], (advp;pp;pron)+, punct[comma],      ?[verb,inf]|.
4> VMOD[irreal=+] = ?[lemma:estar], (advp), ?[lemma:"longe de"];?[lemma:"perto de"] |      punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[verb,inf]|.
4> VMOD[irreal=+] = ?[lemma:estar], (advp), ?[lemma:"longe de"];?[lemma:"perto de"] | np*, punct[comma], (advp;pp;pron)+, punct[comma],      ?[verb,inf]|.
4> VMOD[irreal=+] = ?[lemma:estar], (advp), ?[lemma:"longe de"];?[lemma:"perto de"] |      punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[verb,inf]|.


// Example: [DEVIA O Pedro DE]VMOD ter podido avançar
// Example: Havia o Pedro que ter PODIDO avançar
// Example: Ficou o Pedro de ter PODIDO avançar
// Example: Teve o Pedro que avançar
// Example: hesitou o Pedro em avançar
// Example: procurou o Pedro começar a comer
//
5> VMOD[deont=+]             = ?[deInfDeo],      pron*, (np;pp;advp)+, ?[lemma:de]  |pron*, advp*,         ?[verb,inf]|.
5> VMOD[deont=+,imperfect=+] = ?[deInfDeoImpf],  pron*, (np;pp;advp)+, ?[lemma:de]  |pron*, advp*,         ?[verb,inf]|.
5> VMOD[deont=+]             = ?[noInfDeo]                                          |pron*, (np;pp;advp)+, ?[verb,inf]|.
5> VMOD[deont=+,impessoal=+] = ?[queInfDeoImps], pron*, (np;pp;advp)+, ?[lemma:que] |pron*, advp*,         ?[verb,inf]|.
5> VMOD[obrig=+]             = ?[deInfObr],      pron*, (np;pp;advp)+, ?[lemma:de]  |pron*, (np;pp;advp)*, ?[verb,inf]|.
5> VMOD[obrig=+]             = ?[queInfObr],     pron*, (np;pp;advp)+, ?[lemma:que] |pron*, advp*,         ?[verb,inf]|.
5> VMOD[irreal=+]            = ?[emInfIrreal],   pron*, (np;pp;advp)+, ?[lemma:em]  |pron*, advp*,         ?[verb,inf]|.
5> VMOD[irreal=+]            = ?[deInfIrreal],   pron*, (np;pp;advp)+, ?[lemma:de]  |pron*, advp*,         ?[verb,inf]|.
5> VMOD[irreal=+]            = ?[aInfIrreal],    pron*, (np;pp;advp)+, ?[lemma:a]   |pron*, advp*,         ?[verb,inf]|.
5> VMOD[irreal=+]            = ?[noInfIrreal]                                       |pron*, (np;pp;advp)+, ?[verb,inf]|.
5> VMOD[real=+]              = ?[aInfReal],      pron*, (np;pp;advp)+, ?[lemma:a]   |pron*, advp*,         ?[verb,inf]|.
5> VMOD[imperative=+]        = ?[deInfImp],      pron*, (np;pp;advp)+, ?[lemma:de]  |pron*, advp*,         ?[verb,inf]|.

// Example: TEVE (o Pedro), EFECTIVAMENTE, DE acordar
//
6> VMOD[deont=+]             = ?[deInfDeo],      np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:de]  |pron*, advp*, ?[verb,inf]|.
6> VMOD[deont=+,imperfect=+] = ?[deInfDeoImpf],  np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:de]  |pron*, advp*, ?[verb,inf]|.
6> VMOD[deont=+,impessoal=+] = ?[queInfDeoImps], np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:que] |pron*, advp*, ?[verb,inf]|.
6> VMOD[obrig=+]             = ?[deInfObr],      np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:de]  |pron*, advp*, ?[verb,inf]|.
6> VMOD[obrig=+]             = ?[queInfObr],     np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:que] |pron*, advp*, ?[verb,inf]|.
6> VMOD[irreal=+]            = ?[emInfIrreal],   np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:em]  |pron*, advp*, ?[verb,inf]|.
6> VMOD[irreal=+]            = ?[deInfIrreal],   np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:de]  |pron*, advp*, ?[verb,inf]|.
6> VMOD[irreal=+]            = ?[aInfIrreal],    np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:a]   |pron*, advp*, ?[verb,inf]|.
6> VMOD[real=+]              = ?[aInfReal],      np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:a]   |pron*, advp*, ?[verb,inf]|.
6> VMOD[imperative=+]        = ?[deInfImp],      np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:de]  |pron*, advp*, ?[verb,inf]|.

// Example: TEVE, EFECTIVAMENTE, (o Pedro) DE acordar
//
7> VMOD[deont=+]             = ?[deInfDeo],      punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[lemma:de]  |pron*, advp*, ?[verb,inf]|.
7> VMOD[deont=+,imperfect=+] = ?[deInfDeoImpf],  punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[lemma:de]  |pron*, advp*, ?[verb,inf]|.
7> VMOD[deont=+,impessoal=+] = ?[queInfDeoImps], punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[lemma:que] |pron*, advp*, ?[verb,inf]|.
7> VMOD[obrig=+]             = ?[deInfObr],      punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[lemma:de]  |pron*, advp*, ?[verb,inf]|.
7> VMOD[obrig=+]             = ?[queInfObr],     punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[lemma:que] |pron*, advp*, ?[verb,inf]|.
7> VMOD[irreal=+]            = ?[emInfIrreal],   punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[lemma:em]  |pron*, advp*, ?[verb,inf]|.
7> VMOD[irreal=+]            = ?[deInfIrreal],   punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[lemma:de]  |pron*, advp*, ?[verb,inf]|.
7> VMOD[irreal=+]            = ?[aInfIrreal],    punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[lemma:a]   |pron*, advp*, ?[verb,inf]|.
7> VMOD[real=+]              = ?[aInfReal],      punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[lemma:a]   |pron*, advp*, ?[verb,inf]|.
7> VMOD[imperative=+]        = ?[deInfImp],      punct[comma], (advp;pp;pron)+, punct[comma], np*, ?[lemma:de]  |pron*, advp*, ?[verb,inf]|.

// Example: TEVE (o Pedro), EFECTIVAMENTE, DE não acordar
//
8> VMOD[deont=+]             = ?[deInfDeo],      np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[deont=+,imperfect=+] = ?[deInfDeoImpf],  np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[deont=+,impessoal=+] = ?[queInfDeoImps], np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:que] |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[obrig=+]             = ?[deInfObr],      np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[obrig=+]             = ?[queInfObr],     np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:que] |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[irreal=+]            = ?[emInfIrreal],   np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:em]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[irreal=+]            = ?[deInfIrreal],   np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[irreal=+]            = ?[aInfIrreal],    np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[real=+]              = ?[aInfReal],      np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[imperative=+]        = ?[deInfImp],      np*, punct[comma], (advp;pp;pron)+, punct[comma], ?[lemma:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.

// Example: TEVE, EFECTIVAMENTE, (o Pedro) DE não acordar
//
8> VMOD[deont=+]             = ?[deInfDeo],      punct[comma], (advp;pp;pron)+, punct[comma], np*,  ?[lemma:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[deont=+,imperfect=+] = ?[deInfDeoImpf],  punct[comma], (advp;pp;pron)+, punct[comma], np*,  ?[lemma:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[deont=+,impessoal=+] = ?[queInfDeoImps], punct[comma], (advp;pp;pron)+, punct[comma], np*,  ?[lemma:que] |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[obrig=+]             = ?[deInfObr],      punct[comma], (advp;pp;pron)+, punct[comma], np*,  ?[lemma:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[obrig=+]             = ?[queInfObr],     punct[comma], (advp;pp;pron)+, punct[comma], np*,  ?[lemma:que] |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[irreal=+]            = ?[emInfIrreal],   punct[comma], (advp;pp;pron)+, punct[comma], np*,  ?[lemma:em]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[irreal=+]            = ?[deInfIrreal],   punct[comma], (advp;pp;pron)+, punct[comma], np*,  ?[lemma:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[irreal=+]            = ?[aInfIrreal],    punct[comma], (advp;pp;pron)+, punct[comma], np*,  ?[lemma:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[real=+]              = ?[aInfReal],      punct[comma], (advp;pp;pron)+, punct[comma], np*,  ?[lemma:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.
8> VMOD[imperative=+]        = ?[deInfImp],      punct[comma], (advp;pp;pron)+, punct[comma], np*,  ?[lemma:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]|.


Reshuffling:
9> VMOD[deont,impessoal]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}} = VMOD[deont=+,impessoal=+]{#1}.
9> VMOD[deont,impessoal]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}    = VMOD[deont=+,impessoal=+]{#1,#2}.

9> VMOD[real]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}}   = VMOD[real=+]{#1}.
9> VMOD[real]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}               = VMOD[real=+]{#1,#2}.

9> VMOD[irreal]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}} = VMOD[irreal=+]{#1}.
9> VMOD[irreal]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}             = VMOD[irreal=+]{#1,#2}.

9> VMOD[obrig]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}}  = VMOD[obrig=+]{#1}.
9> VMOD[obrig]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}              = VMOD[obrig=+]{#1,#2}.

9> VMOD[deont]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}}  = VMOD[deont=+]{#1}.
9> VMOD[deont]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}              = VMOD[deont=+]{#1,#2}.
Sequence:



//======================================================================
// VTEMP = verbo que auxilia verbos introduzindo traços temporais
//======================================================================
DependencyRules:
//NJM+JB,  2012/03/30 - Introdução da restrição [surface:~lugar] para resolver o problema: "Isso aconteceu teve lugar na noite passada"

| ?[noPpPas], pron*, (np{?[surface:~lugar]};pp;advp)+,                                                 AP[destroy=+]{pastpart[masc,sg];adj[masc,sg]} | ~
| ?[noPpPas], pron*, (np{?[surface:~lugar]};pp)+, punct[comma], (pron;advp)+, punct[comma],            AP[destroy=+]{pastpart[masc,sg];adj[masc,sg]} | ~
| ?[noPpPas], pron*,           punct[comma], (pron;advp)+, punct[comma],  (np{?[surface:~lugar]};pp)+, AP[destroy=+]{pastpart[masc,sg];adj[masc,sg]} | ~
Reshuffling:
10> AP[destroy]{#1[last]} = #1.
Sequence:


// Example: tinha (o João) podido avançar
// Example: foi   (o João) a comer
//
12> VTEMP[pass=+] = ?[noPpPas,vtemp:~]                                      |pron*, (np;pp;advp)+, VASP;VMOD;VTEMP;VCOP;?[verb,inf];pastpart[masc,sg];pastpart[cop]|.
12> VTEMP[futu=+] = ?[noInfFut,vtemp:~]                                     |pron*, (np;pp;advp)+, ?[verb,inf]     |.
12> VTEMP[futu=+] = ?[aInfFut,vtemp:~], pron*, (np;pp;advp)+, ?[surface:a]  |pron*, (np;pp;advp)+, ?[verb,inf]     |.

// Example: tinha (o João), efectivamente, podido avançar
// Example: foi (o João) a, efectivamente, avançar
13> VTEMP[pass=+] = ?[noPpPas,vtemp:~]                                      |pron*, (np;pp)+, punct[comma], (pron;advp)+, punct[comma], VASP;VMOD;VTEMP;VCOP;?[verb,inf];pastpart[masc,sg];pastpart[cop]|.
13> VTEMP[futu=+] = ?[noInfFut,vtemp:~]                                     |pron*, (np;pp)+, punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]     |.
13> VTEMP[futu=+] = ?[aInfFut,vtemp:~], pron*, (np;pp;advp)+, ?[surface:a]  |                 punct[comma], (pron;advp)+, punct[comma], ?[verb,inf]     |.

// Example: tinha, efectivamente, (o João) podido avançar
13> VTEMP[pass=+] = ?[noPpPas,vtemp:~]                                      |pron*, punct[comma], (pron;advp)+, punct[comma],  (np;pp)+, VASP;VMOD;VTEMP;VCOP;?[verb,inf];pastpart[masc,sg];pastpart[cop]|.
13> VTEMP[futu=+] = ?[noInfFut,vtemp:~]                                     |pron*, punct[comma], (pron;advp)+, punct[comma],  (np;pp)+, ?[verb,inf]     |.

// Example: foi (o João), efectivamente, a nadar até à margem
//
13> VTEMP[futu=+] = ?[aInfFut], pron*, (np;pp)+, punct[comma], (advp;pp)+, punct[comma], ?[surface:a]  |pron*, advp*, ?[verb,inf] |.

// Example: vai (o João), efectivamente, a, realmente, lavar
//
13> VTEMP[futu=+] = ?[aInfFut], pron*, (np;pp)+, punct[comma], (advp;pp;pron)+, punct[comma], ?[surface:a]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf] |.


Reshuffling:
15> VTEMP[pass]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}} = VTEMP[pass=+]{#1}.
15> VTEMP[pass]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}             = VTEMP[pass=+]{#1,#2}.

15> VTEMP[futu]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}} = VTEMP[futu=+]{#1}.
15> VTEMP[futu]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}             = VTEMP[futu=+]{#1,#2}.
Sequence:



//======================================================================
// VASP = verbo que auxilia verbos introduzindo traços aspectuais
//        [Second stage]
//======================================================================
// Example: ESTÁ o Pedro A mandar fazer
// Example: ESTÁ o Pedro mandando fazer
// Example: tem VINDO o Pedro A dormir
// Example: tem VINDO o Pedro A começar a estudar
//
20> VASP[incoat=+]     = ?[aInfInc],    (pron;NP[nopphead]), (np;pp;advp)+,     ?[surface:a]  |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[incoat=+]     = ?[deInfInc],   (pron;NP[nopphead]), (np;pp;advp)+, prep[surface:de]  |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[incoat=+]     = ?[emInfInc],   (pron;NP[nopphead]), (np;pp;advp)+, prep[surface:em]  |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[incoat=+]     = ?[porInfInc],  (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:por] |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[incoat=+]     = ?[paraInfInc], (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:para]|(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[incoat=+]     = ?[noGerInc]                                                          |(pron;NP[nopphead]), (np;pp;advp)+, ?[verb,gerund];vger|.
20> VASP[terminat=+]   = ?[aInfTer],    (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:a]   |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[terminat=+]   = ?[deInfTer],   (pron;NP[nopphead]), (np;pp;advp)+, prep[surface:de]  |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[terminat=+]   = ?[porInfTer],  (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:por] |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[terminat=+]   = ?[noGerTer]                                                          |(pron;NP[nopphead]), (np;pp;advp)+, ?[verb,gerund];vger|.
20> VASP[durativo=+]   = ?[aInfDur],    (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:a]   |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[durativo=+]   = ?[noGerDur]                                                          |(pron;NP[nopphead]), (np;pp;advp)+, ?[verb,gerund];vger|.
20> VASP[frequentat=+] = ?[deInfFre],   (pron;NP[nopphead]), (np;pp;advp)+, prep[surface:de]  |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[frequentat=+] = ?[noInfFre]                                                          |(pron;NP[nopphead]), (np;pp;advp)+, ?[verb,inf];vmod|.
20> VASP[durativo=+]   = ?[noInfDur]                                                          |(pron;NP[nopphead]), (np;pp;advp)+, ?[verb,inf];vmod|.
20> VASP[iterat=+]     = ?[aInfIte],    (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:a]   |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[imperfect=+]  = ?[paraInfImp], (pron;NP[nopphead]), (np;pp;advp)+, prep[lemma:para]  |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.
20> VASP[imperfect=+,passive=+]
                       = ?[porInfImpP], (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:por] |(pron;NP[nopphead]), advp*,         ?[verb,inf];vmod|.


// Example: ESTÁ (o Pedro) A,     efectivamente, mandar fazer
// Example: ESTÁ (o Pedro)  ,     efectivamente, mandando fazer
//
21> VASP[incoat=+]     = ?[aInfInc],    (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:a]    |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[incoat=+]     = ?[deInfInc],   (pron;NP[nopphead]), (np;pp;advp)+, prep[surface:de]   |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[incoat=+]     = ?[emInfInc],   (pron;NP[nopphead]), (np;pp;advp)+, prep[surface:em]   |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[incoat=+]     = ?[porInfInc],  (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:por]  |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[incoat=+]     = ?[paraInfInc], (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:para] |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[incoat=+]     = ?[noGerInc]                                                           |(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (pron;advp)+, punct[comma], ?[verb,gerund];vger|.
21> VASP[terminat=+]   = ?[aInfTer],    (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:a]    |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[terminat=+]   = ?[deInfTer],   (pron;NP[nopphead]), (np;pp;advp)+, prep[surface:de]   |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[terminat=+]   = ?[porInfTer],  (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:por]  |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[terminat=+]   = ?[noGerTer]                                                           |(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (pron;advp)+, punct[comma], ?[verb,gerund];vger|.
21> VASP[durativo=+]   = ?[aInfDur],    (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:a]    |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[durativo=+]   = ?[noGerDur]                                                           |(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (pron;advp)+, punct[comma], ?[verb,gerund];vger|.
21> VASP[frequentat=+] = ?[deInfFre],   (pron;NP[nopphead]), (np;pp;advp)+, prep[surface:de]   |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[frequentat=+] = ?[noInfFre]                                                           |(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[durativo=+]   = ?[noInfDur]                                                           |(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[iterat=+]     = ?[aInfIte],    (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:a]    |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[imperfect=+]  = ?[paraInfImp], (pron;NP[nopphead]), (np;pp;advp)+, prep[lemma:para]   |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.
21> VASP[imperfect=+,passive=+]
                       = ?[porInfImpP], (pron;NP[nopphead]), (np;pp;advp)+,    ?[surface:por]  |                                    punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod   |.

// Example: ESTÁ (o Pedro), ACTUALMENTE, A mandar fazer
//
22> VASP[incoat=+]    = ?[aInfInc],    (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:a]   |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[incoat=+]    = ?[deInfInc],   (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma], prep[surface:de]  |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[incoat=+]    = ?[emInfInc],   (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma], prep[surface:em]  |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[incoat=+]    = ?[porInfInc],  (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:por] |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[incoat=+]    = ?[paraInfInc], (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:para]|(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[terminat=+]  = ?[aInfTer],    (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:a]   |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[terminat=+]  = ?[deInfTer],   (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma], prep[surface:de]  |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[terminat=+]  = ?[porInfTer],  (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:por] |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[durativo=+]  = ?[aInfDur],    (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:a]   |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[frequentat=+]= ?[deInfFre],   (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma], prep[surface:de]  |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[iterat=+]    = ?[aInfIte],    (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:a]   |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[imperfect=+] = ?[paraInfImp], (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma], prep[lemma:para]  |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
22> VASP[imperfect=+,passive=+] 
                      = ?[porInfImpP], (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:por] |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.

// Example: ESTÁ, ACTUALMENTE, (o Pedro) A mandar fazer
//
23> VASP[incoat=+]    = ?[aInfInc],    (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:a]   |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[incoat=+]    = ?[deInfInc],   (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+, prep[surface:de]  |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[incoat=+]    = ?[emInfInc],   (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+, prep[surface:em]  |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[incoat=+]    = ?[porInfInc],  (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:por] |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[incoat=+]    = ?[paraInfInc], (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:para]|(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[terminat=+]  = ?[aInfTer],    (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:a]   |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[terminat=+]  = ?[deInfTer],   (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+, prep[surface:de]  |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[terminat=+]  = ?[porInfTer],  (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:por] |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[durativo=+]  = ?[aInfDur],    (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:a]   |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[frequentat=+]= ?[deInfFre],   (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+, prep[surface:de]  |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[iterat=+]    = ?[aInfIte],    (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:a]   |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[imperfect=+] = ?[paraInfImp], (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+, prep[lemma:para]  |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.
23> VASP[imperfect=+,passive=+]
                      = ?[porInfImpP], (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:por] |(pron;NP[nopphead]), advp*, ?[verb,inf];vmod|.

// Example: ESTÁ (o Pedro), realmente, A, efectivamente, mandar fazer
//
24> VASP[incoat=+]     = ?[aInfInc],   (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[incoat=+]     = ?[deInfInc],  (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma], prep[surface:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[incoat=+]     = ?[emInfInc],  (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma], prep[surface:em]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[incoat=+]     = ?[porInfInc], (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:por] |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[incoat=+]     = ?[paraInfInc],(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:para]|punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[terminat=+]   = ?[aInfTer],   (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[terminat=+]   = ?[deInfTer],  (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma], prep[surface:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[terminat=+]   = ?[porInfTer], (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:por] |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[durativo=+]   = ?[aInfDur],   (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[frequentat=+] = ?[deInfFre],  (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma], prep[surface:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[iterat=+]     = ?[aInfIte],   (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[imperfect=+]  = ?[paraInfImp],(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma], prep[lemma:para]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
24> VASP[imperfect=+,passive=+]
                       = ?[porInfImpP],(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma],    ?[surface:por] |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.

// Example: ESTÁ, realmente, (o Pedro) A, efectivamente, mandar fazer
//
25> VASP[incoat=+]     = ?[aInfInc],   (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[incoat=+]     = ?[deInfInc],  (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+, prep[surface:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[incoat=+]     = ?[emInfInc],  (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+, prep[surface:em]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[incoat=+]     = ?[porInfInc], (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:por] |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[incoat=+]     = ?[paraInfInc],(pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:para]|punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[terminat=+]   = ?[aInfTer],   (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[terminat=+]   = ?[deInfTer],  (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+, prep[surface:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[terminat=+]   = ?[porInfTer], (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:por] |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[durativo=+]   = ?[aInfDur],   (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[frequentat=+] = ?[deInfFre],  (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+, prep[surface:de]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[iterat=+]     = ?[aInfIte],   (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:a]   |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[imperfect=+]  = ?[paraInfImp],(pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+, prep[lemma:para]  |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.
25> VASP[imperfect=+,passive=+]
                       = ?[porInfImpP],(pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+,    ?[surface:por] |punct[comma], (pron;advp)+, punct[comma], ?[verb,inf];vmod|.


Reshuffling:
28> VASP[imperfect,passive]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}} = VASP[imperfect=+,passive=+]{#1}.
28> VASP[imperfect,passive]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}       = VASP[imperfect=+,passive=+]{#1,#2}.

28> VASP[incoat]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}}      = VASP[incoat=+]{#1}.
28> VASP[incoat]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}                  = VASP[incoat=+]{#1,#2}.

28> VASP[terminat]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}}    = VASP[terminat=+]{#1}.
28> VASP[terminat]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}                = VASP[terminat=+]{#1,#2}.

28> VASP[durativo]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}}    = VASP[durativo=+]{#1}.
28> VASP[durativo]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}                = VASP[durativo=+]{#1,#2}.

28> VASP[frequentat]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}}  = VASP[frequentat=+]{#1}.
28> VASP[frequentat]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}              = VASP[frequentat=+]{#1,#2}.

28> VASP[iterat]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}}      = VASP[iterat=+]{#1}.
28> VASP[iterat]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}                  = VASP[iterat=+]{#1,#2}.

28> VASP[imperfect]{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}}   = VASP[imperfect=+]{#1}.
28> VASP[imperfect]{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}               = VASP[imperfect=+]{#1,#2}.
Sequence:


//======================================================================
// VPP = verbo na forma particípio passado masculino singular, precedido
//       de uma forma verbar dos verbos ter ou haver, ou seja um VTEMP
//       É sempre o último elemento da cadeia verbal!
//======================================================================
// Example: tem COMIDO
// Example: tinham DESAPARECIDO
// Example: terei CONVERSADO
// Example: tivesse PERDIDO
// Example: devia ter LIDO
// Example: havia LIDO
//
29> VPP[cop=+,durativo=+]   = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg,cop,durativo]    |?[verb:~,pastpart:~]|.
29> VPP[cop=+,permansivo=+] = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg,cop,permansivo]  |?[verb:~,pastpart:~]|.
29> VPP[cop=+,incoat=+]     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg,cop,incoat]      |?[verb:~,pastpart:~]|.
29> VPP[cop=+,irreal=+]     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg,cop,irreal]      |?[verb:~,pastpart:~]|.
29> VPP[cop=+,real=+]       = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg,cop,real]        |?[verb:~,pastpart:~]|.
29> VPP                     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg]                 |?[verb:~,pastpart:~]|.

// Example: Tendo estes COMPRADO.
//
29> VPP[cop=+,durativo=+]   = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg,end,cop,durativo].
29> VPP[cop=+,permansivo=+] = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg,end,cop,permansivo].
29> VPP[cop=+,incoat=+]     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg,end,cop,incoat].
29> VPP[cop=+,irreal=+]     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg,end,cop,irreal].
29> VPP[cop=+,real=+]       = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg,end,cop,real].
29> VPP                     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+| pastpart[masc,sg,end].

// Example: havia (o Pedro), efectivamente, LIDO
//
29> VPP[cop=+,durativo=+]   = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg,cop,durativo]   |?[verb:~,pastpart:~]|.
29> VPP[cop=+,permansivo=+] = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg,cop,permansivo] |?[verb:~,pastpart:~]|.
29> VPP[cop=+,incoat=+]     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg,cop,incoat]     |?[verb:~,pastpart:~]|.
29> VPP[cop=+,irreal=+]     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg,cop,irreal]     |?[verb:~,pastpart:~]|.
29> VPP[cop=+,real=+]       = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg,cop,real]       |?[verb:~,pastpart:~]|.
29> VPP                     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg]                |?[verb:~,pastpart:~]|.

29> VPP[cop=+,durativo=+]   = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg,end,cop,durativo].
29> VPP[cop=+,permansivo=+] = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg,end,cop,permansivo].
29> VPP[cop=+,incoat=+]     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg,end,cop,incoat].
29> VPP[cop=+,irreal=+]     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg,end,cop,irreal].
29> VPP[cop=+,real=+]       = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg,end,cop,real].
29> VPP                     = |VTEMP, (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (advp;pron;NP[nopphead])+, punct[comma]| pastpart[masc,sg,end].

// Example: havia, efectivamente, (o Pedro) LIDO
//
29> VPP[cop=+,durativo=+]   = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg,cop,durativo]   |?[verb:~,pastpart:~]|.
29> VPP[cop=+,permansivo=+] = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg,cop,permansivo] |?[verb:~,pastpart:~]|.
29> VPP[cop=+,incoat=+]     = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg,cop,incoat]     |?[verb:~,pastpart:~]|.
29> VPP[cop=+,irreal=+]     = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg,cop,irreal]     |?[verb:~,pastpart:~]|.
29> VPP[cop=+,real=+]       = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg,cop,real]       |?[verb:~,pastpart:~]|.
29> VPP                     = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg]                |?[verb:~,pastpart:~]|.

29> VPP[cop=+,durativo=+]   = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg,end,cop,durativo].
29> VPP[cop=+,permansivo=+] = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg,end,cop,permansivo].
29> VPP[cop=+,incoat=+]     = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg,end,cop,incoat].
29> VPP[cop=+,irreal=+]     = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg,end,cop,irreal].
29> VPP[cop=+,real=+]       = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg,end,cop,real].
29> VPP                     = |VTEMP, (pron;NP[nopphead]), punct[comma], (advp;pron;NP[nopphead])+, punct[comma], (np;pp;advp)+| pastpart[masc,sg,end].

//NJM+JB, 2012/09/13
// Transforms a pastpart that is a PP into a VPP (assumes that auxiliaries have been correctly processed)
// The VOPL (Linking operator-verb / verbo operador de ligação) construction is preserved if the 
//    adjective/past-participle is not in the masculine-singular: 
//    O Pedro tem já lavado a loiça vs. O Pedro tem já lavada a loiça.
//
// ATTENTION: pron is not working because it is a NP (for the moment)
//
// Example: Ele tem [ameaçado]VPP vir a arrebatar a médio prazo a liderança
DependencyRules:
|VTEMP, (pron), AP[destroy=+]{pastpart[masc,sg];verb[pastpart]} | ~
Reshuffling:
30> AP[destroy]{#1[last]} = VPP{#1}.
Sequence:







//======================================================================
// VCOP = verbo que auxilia adjectivos (particípios passados também, por
//        não se fazer a distinção entre adjectivo e particípio passado)
//======================================================================

//NJM+JB, 2013/01/25 - added restriction [cop] on pastpart
//NJM+JB, 2013/06/26 - removed restriction [cop] on pastpart (ex.: Está o livro lido)
//NJM+JB, 2013/06/26 - removed option of being a pastpart or a AP (because no justification was found)
//Example: O animal apresentava sinais de ter comido algum isco envenenado (comido should not be a VCOP)
//
DependencyRules:
| ?[verb,cop], (pron;NP[nopphead]), (np;pp;advp)+,                                              AP[destroy=+]{pastpart} | ~
| ?[verb,cop], (pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (pron;pp;advp)+, punct[comma], AP[destroy=+]{pastpart} | ~
| ?[verb,cop], (pron;NP[nopphead]), punct[comma], (pron;pp;advp)+, punct[comma], (np;pp;advp)+, AP[destroy=+]{pastpart} | ~
Reshuffling:
31> AP[destroy]{#1[last]}  = VCPART{#1}.
Sequence:

// Example: ESTAVA (o Pedro) impressionado
//
32> VCOP[durativo=+]   = ?[verb,cop,durativo]   |(pron;NP[nopphead]), (np;pp;advp)+, VCPART|.
32> VCOP[permansivo=+] = ?[verb,cop,permansivo] |(pron;NP[nopphead]), (np;pp;advp)+, VCPART|.
32> VCOP[incoat=+]     = ?[verb,cop,incoat]     |(pron;NP[nopphead]), (np;pp;advp)+, VCPART|.
32> VCOP[irreal=+]     = ?[verb,cop,irreal]     |(pron;NP[nopphead]), (np;pp;advp)+, VCPART|.
32> VCOP[real=+]       = ?[verb,cop,real]       |(pron;NP[nopphead]), (np;pp;advp)+, VCPART|.

// Example: ESTAVA (o Pedro), efectivamente, impressionado
//
32> VCOP[durativo=+]   = ?[verb,cop,durativo]   |(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (pron;advp)+, punct[comma],  VCPART|.
32> VCOP[permansivo=+] = ?[verb,cop,permansivo] |(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (pron;advp)+, punct[comma],  VCPART|.
32> VCOP[incoat=+]     = ?[verb,cop,incoat]     |(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (pron;advp)+, punct[comma],  VCPART|.
32> VCOP[irreal=+]     = ?[verb,cop,irreal]     |(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (pron;advp)+, punct[comma],  VCPART|.
32> VCOP[real=+]       = ?[verb,cop,real]       |(pron;NP[nopphead]), (np;pp;advp)+, punct[comma], (pron;advp)+, punct[comma],  VCPART|.


// Example: ESTAVA, efectivamente, (o Pedro) impressionado
//
32> VCOP[durativo=+]   = ?[verb,cop,durativo]   |(pron;NP[nopphead]), punct[comma], (pron;advp)+, punct[comma], (np;pp;advp)+, VCPART|.
32> VCOP[permansivo=+] = ?[verb,cop,permansivo] |(pron;NP[nopphead]), punct[comma], (pron;advp)+, punct[comma], (np;pp;advp)+, VCPART|.
32> VCOP[incoat=+]     = ?[verb,cop,incoat]     |(pron;NP[nopphead]), punct[comma], (pron;advp)+, punct[comma], (np;pp;advp)+, VCPART|.
32> VCOP[irreal=+]     = ?[verb,cop,irreal]     |(pron;NP[nopphead]), punct[comma], (pron;advp)+, punct[comma], (np;pp;advp)+, VCPART|.
32> VCOP[real=+]       = ?[verb,cop,real]       |(pron;NP[nopphead]), punct[comma], (pron;advp)+, punct[comma], (np;pp;advp)+, VCPART|.

Reshuffling:
33> VCOP{VF[last]{?-#1};VGER[last]{?-#1};VPP[last]{?-#1}}  = VCOP{#1}.
33> VCOP{VF{?-#1};VGER{?-#1};VPP{?-#1}, ?-#2}              = VCOP{#1,#2}.
Sequence:


//======================================================================
// VCPART = verbo particípio passado (no fim da cadeia verbal)
//======================================================================

// Example: está (o Pedro) IMPRESSIONADO
//
35> VCPART = |VCOP;VMOD;verb;VPP[cop], pron*, (np;pp;advp)+| pastpart;verb[pastpart] |?[verb:~,pastpart:~]|.
35> VCPART = |VCOP;VMOD;verb;VPP[cop], pron*, (np;pp;advp)+| pastpart[end];verb[pastpart,end].

// Example: está (o Pedro), efectivamente, IMPRESSIONADO
//
36> VCPART = |VCOP;VMOD;verb;VPP[cop], pron*, (np;pp;advp)+, punct[comma], (pron;advp)+, punct[comma]| pastpart;verb[pastpart] |?[verb:~,pastpart:~]|.

// Example: está, efectivamente, (o Pedro) IMPRESSIONADO
//
36> VCPART = |VCOP;VMOD;verb;VPP[cop], pron*, punct[comma], (pron;advp)+, punct[comma], (np;pp;advp)+| pastpart;verb[pastpart] |?[verb:~,pastpart:~]|.



Reshuffling:
// in order to correct cases when VASP and VMOD
//   is built with NPs, PPs and ADVPs
//
37> VASP{VERB#1, NP{#2[first,last]}, ?-#3}        = VASP{#1,#2,#3}.
37> VASP{VERB#1, ADVP{ADV#2[first,last]}, ?-#3}   = VASP{#1,#2,#3}.
37> VASP{NP{#1[first,last]}, VERB#2, ?-#3}        = VASP{#1,#2,#3}.
37> VASP{VERB#1, NP{#2[first,last]}, ?-#3}        = VASP{#1,#2,#3}.

38> VASP{VERB#1, #2, ADVP{#3[first,last]}, ?-#4}  = VASP{#1,#2,#3,#4}.
38> VASP{#1, VERB#2, ADVP{#3[first,last]}, ?-#4}  = VASP{#1,#2,#3,#4}.

38> VASP{VERB#1, #2, PP{PREP#3[first,last]}}      = VASP{#1,#2,#3}.

38> VMOD{VERB#1, ADVP{ADV#2[first,last]}, ?-#3}   = VMOD{#1,#2,#3}.
38> VMOD{VERB#1, #2, PP{PREP#3[first,last]}}      = VMOD{#1,#2,#3}.

38> VMOD{VERB#1, #2, ADVP{#3[first,last]}, ?-#4}  = VMOD{#1,#2,#3,#4}.

38> VTEMP{VERB#1, #2, ADVP{#3[first,last]}, ?-#4} = VTEMP{#1,#2,#3,#4}.
Sequence:


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// PP - PREPOSITIONAL CHUNK
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//NJM+JB, 2011/02/20 (moved the option of forming a PP with a  ADVP to after all verbs)
// Example: PARA O RAPAZ
// Example: os chefes DE AMANHÃ
//195> PP = prep, NP[noPPhead:~];ADVP;adj;pastpart.
40> PP = prep, ADVP.

Reshuffling:
41> PP[interrog:~]{prep#1,ADVP{?-#2} } = PP{#1,#2}.
Sequence:



////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// SC - Beginning Subclauses
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Any subclause introduced by a relative completive etc is starting by SC (going from the
// clause introducer until the first verb on its right.
// [repetition of rules in order to ensure embedded clauses within embedded clauses]
//
// Example: eu conheço o Pedro [que tinha]SC começado a comer a pera
//
45> SC = ?[pronrel];?[rel];?[qu];conj[coord:~], ?*[verb:~,conj:~,rel:~,pronrel:~,qu:~,punct:~], ?[verb].
45> SC = ?[pronrel];?[rel];?[qu];conj[coord:~], ?*[verb:~,conj:~,rel:~,pronrel:~,qu:~,punct:~], ?[verb].
45> SC = ?[pronrel];?[rel];?[qu];conj[coord:~], ?*[verb:~,conj:~,rel:~,pronrel:~,qu:~,punct:~], ?[verb].





////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// LAST VERB CONSTRUCTIONS
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Example: para poder lutar   - VINF[para poder] lutar
// Example: hesitou em afastar - hesitou VINF[em afastar]
//
61> VINF = prep, ?*[verb:~,scfeat:~], VINF.

//NJM+JB, 2010/11/19
// Example: autorizou o alunos a terem cartão - VF[a terem]
//
61> VF = prep, ?*[verb:~,scfeat:~], VF.


// ATENÇÂO:
// Verificar se esta regra não pode ser feita antes, antes da construção do VIF simples
// para evitar o reshuffling
//
Reshuffling:
65> VINF{prep#1, VINF{?-#2}}               = VINF{#1,#2}.
65> VINF{prep#1, art#2;pron#2, VINF{?-#3}} = VINF{#1,#2,#3}.
65> VINF{prep#1, NP{-#2}, VINF{?-#3}}      = VINF{#1,#2,#3}.
65> VF{prep#1, VF{?-#2}}                   = VF{#1,#2}.

// Example: lavada a loiça, o Pedro foi ver televisão
//
//66> AP[start]{?-#1} |NP, punct[comma] | = VCPART{#1}.
Sequence:






////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// REPAIRING A MISSED VPP
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//NJM+JB, 2011/03/29
//
//
// Example: A aldeia onde o Pedro tinha VPP[nascido] morreu
//
DependencyRules:
| SC{?*,VTEMP[last]}, AP[destroy=+]{pastpart[masc,sg]}, VF;VTEMP | ~
Reshuffling:
66> AP[destroy]{#1[last]} = VPP{#1}.
Sequence:
