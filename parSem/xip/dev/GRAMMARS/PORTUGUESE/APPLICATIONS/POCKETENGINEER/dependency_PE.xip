//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2006 Xerox Corporation.  All Rights Reserved.
//!
//! --- CONTENTS ---
//!   
//!   File   : dependency.xip
//!
//!   Content:	definition of dependency PEUNIT for Pocket Engineer Aplication
//!
//!   Language:	 PORTUGUESE
//!
//!   Date       : August 2006 
//!
//!   Author     : C. HAGEGE 
//!  
//!x
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


DependencyRules:


// Creating ATTRIB relation in order to be aligned with spanish
// a rapariga está linda
| VCOP#1, AP#3 |
if ( HEAD(#2,#1) & HEAD(#4,#3) & ~ATTRIB(#2,#4) )
	ATTRIB(#2,#4)

// A vida é bela
if ( PREDSUBJ(#1,#2) )
	ATTRIB(#1,#2)

// O rapaz esta condenado
| VCOP#1, VCPART#2 | 
if ( HEAD(#3,#1) & HEAD(#4,#2)  )
	ATTRIB(#3,#4)


//Coordinated items //ES NECESARIO??????????
//|np#1, punct#2[lemma:\/], np#3|
//	if(head(#10, #1)
//	& head(#30, #3))
//	COORD(#2, #10),
//	COORD(#2, #30).

//|pp#1, punct#2[lemma:\/], np#3|
//	if(head(#10, #1)
//	& head(#30, #3))
//	COORD(#2, #10),
//	COORD(#2, #30).

|#1, punct[comma], np#2, punct[comma], np#3, conj#4[coord], np#5| 
	if(head(#10, #1)
	& head(#20, #2)
	& head(#30, #3)
	& head(#50, #5))
	COORD(#4, #10),
	COORD(#4, #20),
	COORD(#4, #30),
	COORD(#4, #50).

//Dependency rules for MOD
//borrones o manchas en el fax
|np#1, conj#2[coord:+], np#3, ?*, pp#4{prep[lemma:en], np}|
	if(head(#10, #1)
	& head(#30, #3)
	& head(#40, #4)
	& coord(#2, #10)
	& coord(#2, #30)
	& mod(#30, #40)
	& ~mod(#10, #40))
	MOD[pos=+](#10, #40).


////////////////////////////////////////////////////////
//
// Adapt basic linguistic structures
//
////////////////////////////////////////////////////////

//Split up SCs, which only get in the way

Reshuffling:
20>  SC{?-#1} = #1.




//////////////////////////////////////////////////////////
//
// Construct initial PEU chunks
//
/////////////////////////////////////////////////////////

//We give a special feature for the PPs starting by "de"
DependencyRules:
|pp#1[pp_de=+]{prep[lemma:de], ?+}|
	~


Reshuffling:
//A top level AP, NP, PP or ?[verbal] is a PEU
60> AP#1 = PEU{#1}, where (~mother(#1, #2)).
60> NP#1 = PEU{#1}, where (~mother(#1, #2)).
60> PP#1 = PEU{#1}, where (~mother(#1, #2)).
60> #1[verb] = PEU[verbal=+]{#1}, where (~mother(#1, #2)).
60> REFLEX#1 = PEU{#1}, where (~mother(#1, #2)).
60> ADVP#1 = PEU{#1}, where (~mother(#1,#2)).
// Verificar estatuto dos adverbios
//60> AVP#1 = PEU{#1}, where (~mother(#1, #2)).


DependencyRules:
//Assign heads to the PEUs created above.
70> |PEU#1{#2}|
	if(head(#20, #2))
	HEAD(#20, #1).
	
////////////////////////////////////////////////////////////
//
// Expand and merge PEU chunks
//
////////////////////////////////////////////////////////////


DependencyRules:

//Coordinated elements.
100> |PEU#1, conj#2[coord], PEU#3|
	if(head(#10, #1)
	& head(#30, #3)
	& coord(#2, #10)
	& coord(#2, #20))
	COMBINE(#1, #3).
	

//An NP or PP followed by an AP
100> |PEU#1{NP}, PEU#2{AP}|
	if(head(#10, #1)
	& head(#20, #2)
	& mod(#10, #20))
	COMBINE(#1, #2).

100> |PEU#1{PP}, PEU#2{AP}|
	if(head(#10, #1)
	& head(#20, #2)
	& mod(#10, #20))
	COMBINE(#1, #2).

100> |PEU#1{NP}, PEU#2{PP}, PEU#3{AP}|
	COMBINE(#2, #3).

100> | PEU#1{NP}, PEU#2{AP}, PEU#3{AP} |
	COMBINE(#2,#3).

// Verificar estatuto dos adverbios
//With an adverb between the noun and the adjective (or modifier)
//copias completamente en blanco
//A VERIFIER
//100> |PEU#1{NP}, PEU#2{AVP[advmente]}, PEU#3{PP}|
//	COMBINE(#1, #2),
//	COMBINE(#2, #3).


// Verificar estatuto dos adverbios
//100> |PEU#1{NP}, PEU#2{AVP}, PEU#3{AP}|
//	COMBINE(#1, #2),
//	COMBINE(#2, #3).





//A reflexive pronoun followed by the verb
100> |PEU#1{REFLEX}, PEU#2[verbal]|
	COMBINE(#1, #2).

//A negative adverb followed by a verb
100> |PEU#1{AVP{adv[lemma:no]}}, PEU#2[verbal]|
	COMBINE(#1, #2).


//an NP followed by a PP[pp_de] (but not a clitique pronoun)
//el alimentador de documentos
120> |PEU#1{NP[pron:~];AP}, PEU#2{PP{prep[lemma:de]}}|
	COMBINE(#1, #2).

//el alimentador automático de documentos
//120> |PEU{NP[enclit:~]}, PEU#1{AP}, PEU#2{PP[pp_de]}|
//	COMBINE(#1, #2).

//modificación de cambio automático de documentos
120> |PEU{PP[pp_de]}, PEU#1{AP}, PEU#2{PP[pp_de]}|
	COMBINE(#1, #2).

//An NP[pp_a] followed by a PP{a ...}
120> |PEU#1{NP[pp_a]}, PEU#2{PP{prep[lemma:a], ?+}}|
	COMBINE(#1, #2).

//a PP followed by a PP[pp_de]
//del alimentador de documentos
120> |PEU#1{PP}, PEU#2{PP[pp_de]}|
	COMBINE(#1, #2).

//A PP[pp_a] followed by a PP{a ...}
120> |PEU#1{PP[pp_a]}, PEU#2{PP{prep[lemma:a], ?+}}|
	COMBINE(#1, #2).

//An NP followed by an NP
//de las bandejas 1, 2 ó 3
120> |PEU#1{NP}, PEU#2{NP}|
	if(head(#20, #2)
	& #20[lemma:~que])
	COMBINE(#1, #2).

//a PP followed by an NP
//de las bandejas 1, 2 ó 3
120> |PEU#1{PP}, PEU#2{NP}|
	if(head(#20, #2)
	& #20[lemma:~que])
	COMBINE(#1, #2).

//we want to avoid cases like "retirar las hojas del alimentador"
125> |PEU#1{VF}, ?*, PEU#2{NP}, PEU#3{PP[pp_de]}|
	if(head(#10, #1)
	& #10[non_pp_de]
	& ^combine(#2, #3))
	~.

//A verb with its object
120> |PEU#1[verbal], PEU#2{NP}|
	if(head(#10, #1)
	& head(#20, #2)
	& CDIR(#10, #20))
	COMBINE(#1, #2).

//the object is a pronoun
120> |PEU#1{NP}, PEU#2[verbal]|
	if(head(#10, #1)
	& head(#20, #2)
	& CDIR(#20, #10))
	COMBINE(#1, #2).

//120> |PEU#1[verbal], PEU#2{NP[enclit]}|
//	COMBINE(#1, #2).

120> |PEU#1[verbal], PEU#2{PP}|
	if(head(#10, #1)
	& head(#20, #2)
	& CDIR(#10, #20))
	COMBINE(#1, #2).

//the object is a verb
120> |PEU#1[verbal], PEU#2[verbal]|
	if(head(#10, #1)
	& head(#20, #2)
	& #10[imp]
	& #20[inf])
	COMBINE(#1, #2).

//A predicative verb followed by its complement. E.g. "antes de que quede limpio"
120> |PEU#1[verbal], PEU#2{AP}|
	if(head(#10, #1)
	& #10[cop])
	COMBINE(#1, #2).

//A copulative verb with its attribute
120> |PEU#1[verbal], PEU#2{AP}|
	if(head(#10, #1)
	& head(#20, #2)
	& #10[cop]
	& attrib(#10, #20))
	COMBINE(#1, #2).
//A copulative verb with a following past participle
120> |PEU#1[verbal], PEU#2{VCPART}|
	if(head(#10, #1)
	& head(#20, #2)
	& #10[cop]
	& attrib(#10, #20))
	COMBINE(#1, #2).


//A negative pronoun followed by reflexive verb
120> |PEU#1{AVP{adv[lemma:no]}}, PEU#2{REFLEX}, PEU[verbal]|
	COMBINE(#1, #2).

//A passive verb with its subject
120> |PEU{REFLEX}, PEU#1[verbal], PEU#2{NP}|
	if(head(#10, #1)
	& head(#20, #2)
	& subj(#10, #20))
	COMBINE(#1, #2).

120> |PEU#1{NP}, PEU#2{REFLEX}, PEU#3[verbal] |
	if(head(#10, #1)
	& head(#30, #3)
	& subj(#30, #10))
	COMBINE(#1, #2).


// Negacao seguido por verbo
120> | PEU#1{ADVP{?[neg]}}, PEU#2[verbal] |
	if ( HEAD(#3,#1) 
	& HEAD(#4,#2) )
	COMBINE(#1,#2)


// prep + infinitive. e.g. "Apos desligar"
120> | PEU#1{pp}, PEU#2{vinf[inf]} |
	COMBINE(#1,#2)

// prepdet + infinitive e.g. "Ao copiar"
120> | PEU#1{pp}, art[tokenend], PEU#2{vinf[inf]} |
	COMBINE(#1,#2)





Reshuffling:

128> PEU#1{?-#2}, PEU#3{?-#4}, PEU#5 {?-#6}, PEU#7 {?-#8}, PEU#9 {?-#10} = #1{#2, #4, #6, #8, #10}, where(COMBINE(#1, #3) & COMBINE(#3, #5) & COMBINE(#5, #7) & COMBINE(#7, #9)).
129> PEU#1{?-#2}, PEU#3{?-#4}, PEU#5 {?-#6}, PEU#7 {?-#8} = #1{#2, #4, #6, #8}, where(COMBINE(#1, #3) & COMBINE(#3, #5) & COMBINE(#5, #7)).
130> PEU#1{?-#2}, PEU#3{?-#4}, PEU#5 {?-#6} = #1{#2, #4, #6}, where(COMBINE(#1, #3) & COMBINE(#3, #5)).
140> PEU#1{?-#2}, PEU#3{?-#4} = #1{#2, #4}, where(COMBINE(#1, #3)).


// Put together PEU made by a prepdet followed by an infinitive verb
150> PEU#1{?-#2}, art#3, PEU#4{?-#5} = #1{#2,#3,#5}, where (COMBINE(#1,#4)).
	

//Cram together any PEUs that are separated only by a slash
200> PEU{?-#1}, punct#2[lemma:"/"], PEU{?-#3} = PEU{#1, #2, #3}.

//Put together in the same PEU two coordinated elements.
200> PEU{?+#2,#7,?-#8}, conj#3[coord], PEU#4{?-#5} = PEU{#2, #3, #5}, where(COMBINE(#7, #4)).

// Put in the same PEU an abbreviation in curly brackets that just followed a nominal PEU.
// e.g. Alimentador de alta capacidade (AAC).
300> PEU{NP#1,?-#2}, #3[left,paren], PEU{NP#4{noun#6[first,last,toutmaj]}}, #5[right,paren] =
	PEU{#1,#2,#3,#4{#6},#5}.
300> PEU{PP#1,?-#2}, #3[left,paren], PEU{NP#4{noun#6[first,last,toutmaj]}}, #5[right,paren] =
	PEU{#1,#2,#3,#4{#6},#5}.



Variables:
string _norm;
string _surf;


DependencyRules:
//Mark PEUNITs and compute their normalized forms
|PEU#1|
	if(normalize(#1, _norm) & _surf = #1[surface])
	PEUNIT(#1, ##PENORM[lemma = _norm], ##PESURF[lemma=_surf]).
