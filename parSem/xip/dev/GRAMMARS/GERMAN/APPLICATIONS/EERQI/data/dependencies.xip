//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Copyright (c) Xerox Corporation.  All Rights Reserved.
//!
//! File:	dependencies.xip
//! Content:	dependency rules for the german XIP grammar
//!
//! Language:	GERMAN
//!
//! Author:	Anne Schiller, Sigrid Maurel
//!
//! Created: 	17-Jan-2006
//! Updated:	06-Sep-2006
//! Updated:	08-Nov-2007 - rewriting rules using sentence structure
//! Updated:	30-Oct-2000
//!
//! ENCODING:	UTF-8	[€àâáäã]
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


DependencyRules:

// ------------------------------------------------------------------------
// HEADS OF NOUN PHRASE
// = HEAD( full_np, noun )

// HEAD of AP
| ap#1{?*, #2[adj,last]} |
	HEAD(#1,#2).

| ap#1{?*, ap^#2} |
if (HEAD( #2,#3) )
	HEAD(#1,#3).


//: Ein kleiner, bunter Luftballon
| np#1[!nagr:!]{?*, npa[last]{?*,#2[last,noun]}} |
	HEAD(#1,#2) .

//: 2007
| np#1[!nagr:!]{?*, npa[last]{?*,num[last]{?*, num#2[last]}}} |
	HEAD(#1,#2) .

| np#1[!nagr:!]{?*, noun#2[last]} |
	HEAD(#1,#2) .

//:: (nichts;etwas) neues
| np#1[!nagr:!]{?*, adj#2[last]} |
	HEAD(#1,#2) .

| np#1[!nagr:!]{?*, ap[last]{?*, #2[last]} } |
	HEAD(#1,#2) .

//: das ist er
| np#1{?*, pron#2[last] } |
	HEAD(#1,#2) .


//| np#1{?*, np#2[last]} |
//if (^HEAD(#1,#2) & HEAD(#2,#3))
//	HEAD(#1,#3) .



| noun#1{trunc, ?*, noun#2[last]} |
if ( ^HEAD(#3,#1) )
	HEAD(#3,#2).


| num#1{?*, num#2[last] } |
	HEAD(#1,#2).


// HEAD of PP
| pp#1{prep, #2} |
if ( HEAD(#2,#3) )
	HEAD[pp=+](#1,#3).


//end:HEAD
// ------------------------------------------------------------------------


// ------------------------------------------------------------------------
// DETERMINER OF NOUN PHRASE
// == DETERM( head, determiner )

| np#1{ ?*, det#2[!det_type:!], ?[det:~] } |
if ( HEAD(#1, #3) )
	DETERM(#3, #2).

| np#1{ det#2[predet, !det_type:!], ?[det] } |
if ( HEAD(#1, #3) )
	DETERM(#3, #2).

 //end:DETERM
// ------------------------------------------------------------------------


// ---------------------------------------------------------------------
// DATE expressions
// ---------------------------------------------------------------------
//:: Himmelfahrt ist am Donnerstag, den 20. Mai
//-> DATE_HOLIDAY(Himmelfahrt)
//-> DATE_DAY(Donnerstag)
//-> DATE(20. Mai)
//-> NMOD_APP(Donnerstag, 20. Mai)

|np#1;num#1|
if (HEAD(#1,#2[is_date,!date_type:!]) )
	DATE(#2).


//:: Montag, 14.7.
| pp#1;np#1, (punct[comma]), np#2 |
if (HEAD(#1,#3) & HEAD(#2,#4[is_date]) & DATE(#4) )
	NMOD[app=+](#3,#4).

//:: Montag, den 14.7.
| ?{ ?*, pp#1[last];np#1[last]}, INS{(punct[comma]), np#2} |
if (HEAD(#1,#3) & HEAD(#2,#4[is_date]) & DATE(#4) )
	NMOD[app=+](#3,#4).


// ---------------------------------------------------------------------
// TIME expressions
// ---------------------------------------------------------------------
//:: Er kommt um 17.30 Uhr
// -> TIME(17.30 Uhr)

| np#1 |
if (HEAD(#1,#2[is_time,!time_type:!]) )
	TIME(#2).


// ========================================================================
// Numerals
//:: rund sieben Teile
//:: mehr als 50 $

| num{ ?*, #1[prenum], num#2 }  |
	NUMMOD(#2, #1).

| num{?*, num#1, #2[coord,coord_num], num#3} |
	COORD[card=+](#1,#2,#3).



// ========================================================================
// Adjective modifiers

//:: der am Fließband gefertigte Wagen	> ADJMOD(gefertigte,am Fließband)
//:: die Ball spielenden Kinder	> ADJMOD(spielende,Ball)

| ap{ np#1[acc], (adv;negat), adj#2 } |
	ADJMOD[acc=+](#2,#1) .
| ap{ np#1[dat,acc:~], (adv;negat), adj#2 } |
	ADJMOD[dat=+](#2,#1) .

| ap{ pp#1, (adv;negat), adj#2 } |
	ADJMOD[pp=+](#2,#1) .

| ap{ ?*, negat#1, adj#2 } |
	NEGAT(#2,#1).


//:: ein sehr schönes Kleid		> ADJMOD(schönes, sehr)
//:: das blau gestreifte Kleid		> ADJMOD(gestreift,blau)
//:: viel zu kleine Schuhe		> ADJMOD(klein, zu)
| ap{ ?*, adv#2;ptcl#2;adj#2[pred], adj#1 } |
	ADJMOD(#1, #2).

//:: die 2007 gewonnenen Pokale
//!BUT: die 2000 verschiedenen Teile
| npa{ ?*, num#2, ap#1 } |
if (HEAD(#1,#3) & HEAD(#2,#4) & DATE(#4))
	ADJMOD(#3, #4).

//:: mehr als jeder dritte
//:: all die schönen Autos
//:: solch ein Aufwand
| #1[predet], det#2 |
	PREDET(#1,#2).

// negated adverb 
| negat#2, adv#1 |
	NEGAT(#1,#2).

// ========================================================================
// noun modifiers

// (1) pre-modifiers: adjectives, numerals, possessive NPs

// ---
// single or multiple adjectives
//:: ein sehr kleiner Junge
//-> NMOD(Junge, kleiner), ADJMOD(klein, sehr)
//:: ein kleiner, blasser Junge
//:: ein kleiner und blasser Junge
//-> NMOD(Junge, kleiner), NMOD(Junge, blasser)

| np#1{?*, npa{ ?*, ap^#2 }} |
if ( HEAD(#1,#3) & HEAD(#2,#4) & #4[attr] )
	NMOD(#3, #4).

//:: ein kleiner blasser Junge
| ap{ adj#1[nagr], adj^#2 } |
if ( NMOD(#4,#2) )
	NMOD(#4,#1).

//NOTE: add plural reading, even if noun is singular
//:: 3 Stück kosten 5 Mark.
//:: Die 2 Stück kosten 3 Euro.
| np#1[pl3=+]{npa{?*, num#2[card,last:~]}} |
if ( HEAD(#1,#3) & HEAD(#2,#4) )
	NMOD[card=+](#3, #4).

//:: die zwei roten und 3 blauen Bälle
| np#1[pl3]{?*, npa{?*, num#2[card,last:~]}} |
if ( HEAD(#1,#3) & HEAD(#2,#4) & ~NMOD(#3,#4) )
	NMOD[card=+](#3, #4).

//:: Hunderte Lehrer und Tausende von Schülern
//-> NMOD(Hunderte,Lehrer), NMOD(Tausende,Schüler)
| np#1[quant];pp#1[quant], np#2;pp#2{prep[lemma:von]} |
 if ( HEAD(#1,#3) & HEAD(#2,#4) )
	NMOD[quant=+](#3,#4).



//:: meines Freundes Onkel
| np#2[gen,nom:~,dat:~,acc:~], np#1  |
if ( HEAD(#1,#3) & HEAD(#2,#4[proper,premod:~]) )
	NMOD[gen=+](#3,#4) .

//:: Familie Maiers Haus
| np#2[name,gen], np#1  |
if ( HEAD(#1,#3) & ~DETERM(#3,#5) & HEAD(#2,#4[premod:~]) )
	NMOD[gen=+](#3,#4) .

//:: in Annas Haus	-> NMOD(Haus,Annas)
| np#1{?*, np#2[marked_gen]} |
if (HEAD(#1,#3) & HEAD(#2,#4) )
	NMOD[gen=+](#3,#4).


// overwrite cardinal reading
//:: der 2006 gewonnenen Pokal
| ap#1[year], ap#2, ?*, noun#3 |
if (HEAD(#1,#4) & HEAD(#2,#5) & ^NMOD[card](#3,#4) & NMOD(#3,#5) )
	ADJMOD[card=~](#5,#4), DATE[year=+](#4).


if ( COORD(#1,#2,#3) & NMOD[!card:!](#4,#3) & ~NMOD(#4,#1) )
	NMOD(#4,#1).

// ----------------------------------------------------------------------------------
// (2) post-modifers of nouns


// Units
//:: 2 Liter Milch
//-> NMOD(Liter, Milch)
| np#1;pp#1, np#2 |
 if ( HEAD(#1,#3) & NMOD[card](#3,#5) & HEAD(#2,#4[postmod:~]) & ~NMOD(#3,#4) )
	NMOD[quant=+](#3,#4).

//:: nichts neues
//-> NMOD(nichts,neues)
| ?#1, np#2[is_neut] |
if ( HEAD(#1,#3[pron,qpron]) & HEAD(#2,#4) )
	NMOD[qpron=+](#3, #4).

//:: wir Kinder 
//:! ich Idiot
| np#1[nom,pl1];np#1[nom,pl2], np#2[nom,pl3] |
if ( HEAD(#1,#3[pron,pers]) & HEAD(#2,#4) & ~DETERM(#4,#5) & #1[case]:#2[case] )
	NMOD[app=+](#3, #4).

| np#1[nom,sg1];np#1[nom,sg2], np#2[nom,sg3] |
if ( HEAD(#1,#3[pron,pers]) & HEAD(#2,#4) & ~DETERM(#4,#5) & #1[case]:#2[case] )
	NMOD[app=+](#3, #4).

//:: sie kommen mit euch Kindern
//:! sie besuchen mit euch München
| np#1; pp#1, np#2 |
if ( HEAD(#1,#3[pron,pers]) & HEAD(#2,#4) & (#3[p1]|#3[p2]) 
	& ~DETERM(#4,#5) & #1[case]:#2[case] & #3[number]:#4[number] & ~NMOD(#3,#4) )
	NMOD2[app=+](#3, #4).


//:: der Sieg Ströbeles
//-> NMOD_GEN(Sige,Ströbeles) 
| ?#1, np#2[gen] |
if ( HEAD(#1,#3[noun]) & HEAD(#2,#4[marked_gen]) )
	NMOD[gen=+](#3, #4).

//:: der Grüne Hans-Christian Ströbele
//:: der Fußballer Michael Ballack
//:: Er wohnt im Kreis Pölten 
//: am Flughafen Gln-Bonn

| np#1;pp#1, np#2[nom]{npa{noun}} |
if ( HEAD(#1,#3[noun]) & HEAD(#2,#4[proper]) & ~NMOD(#4, #3) & ~NMOD(#3, #4))
	NMOD[app=+](#3, #4).


// BUT:
// !! Er gibt das Buch Hans ???


//// possessive PPs
////: der Hut von Klaus
////> NMOD(Hut, von Klaus)
////! possibly ambiguous with subcat: er bekam den Hut von Klaus
//| np#1;pp#2, pp#2{prep[lemma:von], np} |
//if ( HEAD(#1,#3[noun]) & HEAD(#2,#4) & ~POSTMOD(#3, #4))
//	POSTMOD[pp=+](#3, #4).

// genitive 
//: das Auto seines Vaters
| np#1;pp#1, np#2[gen,nom:~,dat:~,acc:~] |
if ( HEAD(#1,#3[pers:~]) & HEAD(#2,#4) & ~NMOD(#3,#4) )
	NMOD[gen=+](#3,#4) .

//: das Auto seiner Mutter
// CHECK!!!!
| np#1;pp#1, np#2[gen] |
if (  HEAD(#1,#3[pers:~]) & HEAD(#2,#4) & DETERM(#4,#5[gen,acc:~]) & ~NMOD(#3,#4) )
	NMOD[gen=+](#3,#4) .



// more relaxed rules for main clauses
//:: Die Organisatoren der Veranstaltung sagen ...
| ?[sc:~]{ (?*, ?[coord]), np#1;pp#1, np#2[gen] } |
if ( HEAD(#1,#3) & HEAD(#2,#4) & DETERM(#2,#5) & ~NMOD(#3,#4) )
	NMOD[gen=+](#3,#4) .

//:: Der Hut von Klaus ist ...
//:: Das Treffen in Berlin war
| ?[sc:~]{ ?*, np#1;pp#1, pp#2, ?*, verb[finite]}|
if ( HEAD(#1,#3[noun]) & ~NMOD(#3,#2) & & HEAD(#2,#4) & ~NMOD(#5,#4) )
	NMOD[pp=+](#3,#2) .


if (NMOD[card](#1,#2) & ^DATE(#2) )
	~.

// ===========================================================================
// COORDINATIONS
// ----------------------------------------------------------------
//AS@08-Nov-2007 : coordinated adjectives
//: ein kleiner, roter Ballon
//: rote, blaue und gelber Ballons
//: kleine und bunte und billige Ballons
//: kleine rote und große blaue Ballons
//: kleine, bunte oder große, rote Ballons
//: 4 rote und 2 blaue Bälle

| ap#1, #2[coord,coord_ap], ap#3 |
if (HEAD(#1,#4) & HEAD(#3,#5) )
 	COORD(#4,#2,#5).


// truncated compounds
//: Arbeits- und Wohngebiet
//:: Kinder-, Alten- und Pflegeheim

| trunc#1, #2[coord], (ap), trunc#3;adj#3;noun#3 |
	COORD(#1,#2,#3), COORD1(#1,#2,#3).

| trunc#1, ?*, #3[last] |
	TRUNC(#1,#3).



// ----------------------------------------------------------------
//AS@08-Nov-2007 :  coordinated PPs
// - sharing one preposition
//: mit Vater und Mutter
//: mit Vater, Mutter, Bruder und Schwester

| pp#1;np#1,  #2[coord_pp], np#3 |
if (HEAD(#1,#4) & HEAD(#3,#5) & ~NMOD[quant](#6,#4) )
	COORD1[pp=+](#1,#2,#3), COORD[pp=+](#4, #2, #5).

| pp#1[quant];np#1[quant], np;pp, #2[coord_pp], np#3 |
if (HEAD(#1,#4) & HEAD(#3,#5) )
	COORD1[pp=+](#1,#2,#3), COORD[pp=+](#4, #2, #5).

// ----------------------------------------------------------------
//AS@08-Nov-2007 :  coordinated NPs

// NOTE: plural is added to NP for subject-verb agreement
| np#1[nom,pl3=+],  #2[coord_np], np#3[nom,pl3=+] |
if (HEAD(#1,#4) & HEAD(#3,#5) ~NMOD[quant](#6,#4) )
	COORD1(#1,#2,#3), COORD[np=+](#4, #2, #5).

| np#1[nom,quant], np;pp, #2[coord_np], np#3 |
if (HEAD(#1,#4) & HEAD(#3,#5) & ~COORD1(#1,#2,#3) )
	COORD1(#1,#2,#3), COORD[np=+](#4, #2, #5).

| np#1,  #2[coord_np], np#3 |
if ( ~COORD1(#1,#2,#3) & HEAD(#1,#4) & HEAD(#3,#5) ~NMOD[quant](#6,#4) )
	COORD1(#1,#2,#3), COORD[np=+](#4, #2, #5).

| np#1[quant], np;pp, #2[coord_np], np#3 |
if ( ~COORD1(#1,#2,#3) & HEAD(#1,#4) & HEAD(#3,#5) & ~COORD1(#1,#2,#3) )
	COORD1(#1,#2,#3), COORD[np=+](#4, #2, #5).

//:: nicht Hans sondern Otto
| negat#5, np#1 |
if (HEAD(#1,#2) & COORD( #2, #3, #4))
	NEGAT(#2,#5).



// =================================================================
// VERB RULES


// auxiliary verbs in infinitive clause
//:: ohne ihn sehen zu wollen
//:: ohne gepielt zu haben
//:: um ihn zu besuchen
//:: ohne geschlagen zu werden
//:: anstatt sitzen zu bleiben
//:: ohne sitzen bleiben zu wollen

| infc{ ?*, verb#1[inf], verb#2[sub_inf] } |
	VSUB(#2,#1).
| infc{ ?*, verb#1[ppast], verb#2[sub_ppast] } |
	VSUB(#2,#1).

| infc{ ?*, verb#1[infzu] }|
	VFIN(#1).


// auxiliary verbs in other subclauses
//:: weil er kommen wird
//:: weil er gekommen ist
//:: er sagt, dass er das Buch kaufen wollen hat. ??
//:: weil er das Buch gekauft haben soll

| sc{ ?*, verb#1[modal,inf], verb#2[sub_ppast] } |
	VSUB(#2,#1).
| sc{ ?*, verb#1[inf], verb#2[sub_inf] } |
	VSUB(#2,#1).
| sc{ ?*, verb#1[ppast], verb#2[sub_ppast] } |
	VSUB(#2,#1).

| sc{ ?*, verb#1[finite,last] } |
	VFIN(#1).

| sc{ ?*, verb#1[finite], conj[coord];pp;ins[last] } |
	VFIN(#1).

// untypical constructions
//:: weil er hat gehen müssen
| sc{ ?*, verb#1[finite,aux], verb#2[inf], verb#3[inf,modal] } |
	VSUB(#1,#3), VSUB(#3,#2), VFIN(#1).

//
// main clauses
//:: Er hat das Buch gestern kaufen [und verschenken] wollen
//:: Es sei Beschwerde eingelegt [und später widerrufen] worden
//:: Er will das Buch morgen kaufen
//:: Er hat das Buch gestern [gesucht und gleich] gekauft
//:: Er wird verraten und verkauft.
//:: Er wird verraten und verkaufen.
//:: Schwimmen werden wir erst morgen
//:: Zu den Fischen gezählt werden auch die Seepferdchen.
//:: Entscheiden muss der Chef
//:: In Kraft treten wird der Vertrag erst morgen
//:: es muss gestohlen worden sein	-> MODAL(muss,sein), AUXIL(sein,worden), AUXIL(worden,gestohlen)

| mc{ ?*, verb#1[finite] } |
	VFIN(#1).

| mc{ ?*, verb#1[modal,inf], ?*, verb#2[sub_ppast] } |
	VSUB(#2,#1).
| mc{ ?*, verb#1[inf], ?*, verb#2[sub_inf] } |
	VSUB(#2,#1).
| mc{ ?*, verb#1[ppast], ?*[sub_ppast:~], verb#2[sub_ppast] } |
	VSUB(#2,#1).

| mc{ ?*, verb#2[sub_ppast], ?*, verb#1[modal,inf] } |
if ( ~VSUB(#2,#3) )
	VSUB(#2,#1).
| mc{ ?*, verb#2[sub_inf], ?*, verb#1[inf] } |
if ( ~VSUB(#2,#3) )
	VSUB(#2,#1).
| mc{ ?*, verb#2[sub_ppast], ?*, verb#1[ppast] } |
if ( ~VSUB(#2,#3) )
	VSUB(#2,#1).

// ---------------------------------------------------------------------------------
// VERB LINKS
// VSUB(aux/modal; verb)

if ( VFIN(#1) & ~VSUB(#1,#2) )
	VMAIN(#1,#1).
if ( VFIN(#1) & VSUB(#1,#2) & ~VSUB(#2,#3) )
	VMAIN(#1,#2).

if ( VFIN(#1) & VSUB(#1,#2) & VSUB(#2,#3) & ~VSUB(#3,#4) )
	VMAIN(#1,#3).

if ( VFIN(#1) & VSUB(#1,#2) & VSUB(#2,#3) & VSUB(#3,#4) )
	VMAIN(#1,#4).
	

// ---------------------------------------------------------------------------------
// specify VSUB
if (^VSUB(#1[modal],#2))
	MODAL(#1,#2).

if (^VSUB(#1[aux],#2))
	AUXIL(#1,#2).

// redefine VMAIN for verbs like "sitzen bleiben", "schwimmen lernen"
// VSUB(bleiben,sitzen) : VMAIN(sitzen) -> VMAIN(bleiben)
if ( VSUB(#1,#2) & ^VMAIN(#3, #2) )
	VMAIN(#3,#1).

if (MODAL(#1,#2) & VSUB(#2,#3) & ^MODAL(#1,#3) )
	~.
if (AUXIL(#1,#2) & VSUB(#2,#3) & ^AUXIL(#1,#3) )
	~.


// ---------------------------------------------------------------------------------
//: Er hat das Buch gekauft.
//> VMAIN(gekauft), AUXIL(hat, gekauft), VPAST(gekauft)
//| verb#2[ppast] |
if (^VMAIN(#3,#2[ppast]) & AUXIL(#1[lemma:haben],#2) )
	VMAIN[past=+](#3,#2).

//: Er ist nach Hause gekommen.
//: Das Buch ist gekauft.	// "static passive"
// | verb#2[ppast] |
if (^VMAIN(#3,#2[ppast]) & AUXIL(#1[lemma:sein],#2) )
	VMAIN[past=+](#3,#2).		// to be refined with subcat info

// passive
//: Das Buch wird gekauft
//| verb#2[ppast] |
if (^VMAIN(#3,#2[ppast]) &  AUXIL(#1[lemma:werden],#2) )
	VMAIN[pass=+](#3,#2).	

//AS@26-Oct-2007
// future tense
//: Er wird das Buch kaufen
if (^VMAIN(#3,#2[inf]) &  AUXIL(#1[lemma:werden],#2) )
	VMAIN[fut=+](#3,#2).	




// negated verb
// er ist nicht_1 [sehr schnell_3]_2
| negat#1, ap#2[pred] |
if (HEAD(#2,#3) & ~NEGAT(#,#1) )
	NEGAT(#3,#1).

// :: Er sieht es nicht
// :: sie will es nicht sehen
// :: er hat_1 es nicht_2 gesehen_3
| MC{?*, verb#1[finite], ?*, negat#2 } |
if (VMAIN(#1,#3) & ~NEGAT(#,#2) )
	NEGAT(#3,#2).	

//:: er ist traurig, da sie nicht kommt oder nicht kommen wird
//:: er sagt, nicht kommen zu wollen
| sc;infc{ ?*, negat#2, verb#1 } |
if (VMAIN(#1,#3) & ~NEGAT(#,#2) )
	NEGAT(#3,#2).

// -------------------------------------------------------------------
// verb with prefix
//:: er kommt an
| verb#1[finite,modal:~, aux:~, v2:~ ], ?*[verb:~, punct:~], ?#2[pref, adv:~] | 
	VPREF(#1, #2).


// ===========================================================================
// verb modifiers

// main clauses
//:: er ist Lehrer in Berlin geworden.
//:: er kommt nächste Woche nach München.
//:: er ist gut in Mathematik
//:: er spielt besser als sein Vorgänger
//:: er singt zusammen mit seinen Freunden Beethoven.
//:: er ist auch nächste Woche noch zu haben
//:: er ist immer gerne hier
| mc{ ?*, verb#2[finite], ?*, ap#1[pred];pp#1;np#1;adv#1;infc#1 } |
if ( VMAIN(#2,#3) )
	VMOD(#3,#1).


// subclauses or topicalised main clauses
//:: weil er Lehrer in Berlin geworden ist.
//:: dass er nächste Woche nach München kommt
//:: Lehrer in Berlin ist er geworden
//:: Nächste Woche kommt er nach München
//:: weil er gut in Mathematik ist
//:: weil er besser als sein Vorgänger spielt.
//:: wenn er mit seinen Freunden spielt.
| np#1;ap#1[pred];pp#1;adv#1;infc#1, ?*, verb#2[finite]  |
if ( VMAIN(#2,#3) )
	VMOD(#3,#1).

// infinital clauses
//:: um Lehrer in Berlin zu werden
//:: ohne nächste Woche nach München kommen zu wollen
| infc{?*, np#1;ap#1[pred];pp#1;adv#1;infc#1, ?*, verb#2[infzu] } |
if ( VMAIN(#2,#3) )
	VMOD(#3,#1).


if ( COORD1(#1,#2,#3) )
	COORD2(#1,#3), COORD2(#3,#1).

// Coordinations
if (VMOD(#1,#2) & COORD1(#2,#3,#4) & ~VMOD(#1,#4) )
	VMOD(#1,#4).


// constituents that where identified as noun modifiers 

if ( ^VMOD(#1,#2) & HEAD(#2,#3) & NMOD(#4,#3) )
        ~.

if ( ^VMOD(#1,#2[pp]) & NMOD(#3,#2) )
        ~.

// =======================================================================
// SUBJECT

// subject must be nominative and agree with finite verb
if ( VMOD(#1,#2[np,nom]) & VMAIN(#3,#1) & (#2[vagr]:#3[vagr]) & ~COORD1[pp](#4,#5,#2) )
	SUBJ1(#1,#2).




// restrict subject readings
// CHECK sub-categorization !!
//:: Das isst sie nicht.	-> SUBJ(sie), OBJ(das)
//!: Das irritiert sie nicht.	-> SUBJ(Das), OBJ(sie)
if ( ^SUBJ1(#1[v_perso],#2) & HEAD(#2,#4[pron,neut,sg]) & SUBJ1(#1,#3) & #2<#3 & ~COORD(#2,#5,#3) )
	~.


//:: Der Mann kauft das Buch
//:: Es wird der ganze Kuchen gegessen!	-> SUBJ_IMPERSO(es), SUBJ(Kuchen)
//!: Einsendeschluss ist der Montag.
if ( SUBJ1(#1[vpred:~],#2[objcase:~]) & ^SUBJ1(#1,#3[objcase]) & HEAD(#3,#4[imperso:~]) )
	~.

//:: Die Männer kaufen das Buch.
if ( SUBJ1(#1,#2) & ^SUBJ1(#1,#3[np,accdat]) & #2<#3 & ~COORD1(#2,#5,#3) )
	~.

//:: Das Buch kauft der Lehrer.
if ( ^SUBJ1(#1,#2[np,accdat]) & SUBJ(#1,#3) & #2<#3 & ~COORD1(#2,#5,#3) )
	~.

//:: Es sind Tische und Stühle da.
//:: Es wurden alle Bücher verkauft.
| mc{ np#2, verb#3[finite,pl] } |
if ( ^VMOD(#1,#2[np,nom]) & HEAD(#2, #4[lemma:es]) & VMAIN(#3,#1) )
	EXPL(#1,#4).


//:: Drei Männer und vier Frauen sind hier.
if (SUBJ1(#1,#2) & COORD2(#2,#3[np,nom]) )
	SUBJ1(#1,#3).

// eliminate VMODs that are identified as subjects
if ( ^VMOD(#1,#2[np]) & SUBJ1(#1,#2) )
	~ .


// -----------------------------------------------------------------------
// FINAL SUBJECTS : head of NPs
if (SUBJ1(#1,#2) & HEAD(#2,#3[!np_type:!]) )
	SUBJ(#1,#3).

//:: es gibt diesen Fall
//:: Diese Lösung gibt es auch noch.
if (^SUBJ(#1,#2) & #1[lemma:geben] & #2[pron,imperso] )
	SUBJ[imperso=+](#1,#2).

//:: es regnet
if (^SUBJ(#1,#2) & #1[imperso] & #2[pron,imperso] )
	SUBJ[imperso=+](#1,#2).


//:: Es ist der Lehrer
if ( ^SUBJ(#1,#2[pron,imperso]) )
	SUBJ[imperso=+](#1,#2).

if (SUBJ(#1[lemma:sein],#2) & ^SUBJ(#1,#3) & #1 < #3 )
	PRED(#1,#3).

//:: er arbeitet als Lehrer und Hausmeister.
if (^SUBJ(#1,#2) & COORD[pp](#2,#3,#1) )
	~.


// -----------------------------------------------------------------------

// predicatives
if ( ^VMOD(#1[vpred],#2[np,nom])  & HEAD(#2,#3) )
	PRED(#1,#3).

if ( ^VMOD(#1[vpred],#2[ap,pred])  & HEAD(#2,#3) )
	PRED(#1,#3).

if ( ^VMOD(#1[vinfc],#2[infc]) )
	PRED(#1,#2).

// temporal expressions
if ( ^VMOD(#1,#2[np,nom]) & HEAD(#2,#3[temporal]))
	VMOD[temp=+](#1,#2).


// OBJECTS
if ( ^VMOD(#1,#2[np,!case:!]) )
	OBJ1(#1,#2).


// mit Eltern und Kindern
if ( ^OBJ1(#1,#2) & COORD1[pp](#3,#4,#2) )
	~.

// coordinated objects
if ( OBJ1[acc:~](#1,#2) & COORD2(#2,#3) & ^OBJ1(#1,#3) )
	OBJ1[acc=~](#1,#3).
if ( OBJ1[dat:~](#1,#2) & COORD2(#2,#3) & ^OBJ1(#1,#3) )
	OBJ1[dat=~](#1,#3).
if ( OBJ1[gen:~](#1,#2) & COORD2(#2,#3) & ^OBJ1(#1,#3) )
	OBJ1[gen=~](#1,#3).


//// if case is ambiguous give preference to accusative, then dative
//if ( ^OBJ1[acc](#1,#2) )
//	OBJ1[nom=~,dat=~,gen=~](#1,#2).
//
//if ( ^OBJ1[dat](#1,#2) )
//	OBJ1[nom=~,gen=~](#1,#2).
//
//if ( ^OBJ1[gen](#1,#2) )
//	OBJ1[nom=~](#1,#2).

if ( ^OBJ1[acc](#1,#2) )
	OBJ1[nom=~,gen=~](#1,#2).

if ( ^OBJ1[dat](#1,#2) )
	OBJ1[nom=~,gen=~](#1,#2).

if ( ^OBJ1[gen](#1,#2) )
	OBJ1[nom=~](#1,#2).



// heads of objects
if (OBJ1[!case:!](#1,#2) & HEAD(#2,#3[!np_type:!]) & ~NMOD(#4,#3) )
	OBJ(#1,#3).





//if ( ^VMOD(#1,#2[np,dat]) & HEAD(#2,#3) & ~OBJ(#1,#3) & ~COORD[pp](#4,#5,#3) )
//	OBJ[dat=+](#1,#3).
//
//if ( ^VMOD(#1,#2[np,gen]) & HEAD(#2,#3) & ~OBJ(#1,#3) & ~COORD[pp](#4,#5,#3) )
//	OBJ[gen=+](#1,#3).

// prepositional 
if ( ^VMOD(#1,#2[pp]) )
	VMOD[pp=+](#1,#2).


if ( VMOD(#1,#2) & COORD1[pp](#2,#5,#3) )
	VMOD[pp=+](#1,#3).



// ----------------------------------------------------------------------------
// REFLEXIVE PRONOUNS - NOT OBJECTS
//
// mich, dich, uns, euch
//:: Ich beeile mich		=> REFLEX(beeile,mich)
//:: Du siehst mich.		=> OBJ(siehst,mich)

| np{pron#1[refl]} |
if ( ^OBJ(#2,#1) & SUBJ(#2,#3) )
	REFLEX(#2, #1).

| np{pron#1[pers,p3:~]} |
if ( ^OBJ(#2,#1) & SUBJ(#2,#3)
   #1[number]:#3[number] & #1[person]:#3[person] )
	REFLEX(#2, #1).

//if (^OBJ(#1,#2) & REFLEX(#1,#2))
//	~.
//
// ----------------------------------------------------------------------------


// Rules for OBJ_SENT
// *** TO TO ***


// time expression or object
//:: er hatte 2004 sein Haus verkauft
if ( DATE[year](#1) & ^OBJ(#2,#1) )
	~.

// passive Subject
// (a) ambiguous:
//: Der Mann wird verraten		-> future or passive
//: Der Mann wird das Geheimnis verraten  -> future only

// remove passive reading when ambiguous with "future" and when direct object is present

if (^VMAIN[pass,fut](#3,#1) & OBJ[acc](#1,#2) )
   VMAIN[pass=~](#3,#1).


if ( ^SUBJ(#2, #1) & VMAIN[pass](#3,#2) )
	SUBJ[pass=+](#2, #1).


// if no subject available
// nominative NP will be the theme

| TOP{?*[finite:~], np#1[nom], ?*[finite:~] } |
if ( HEAD(#1,#4) & ~NMOD(#5,#4) )
	THEMA(#4).


| np#1, pp#2 |
if ( HEAD(#1,#3) & THEMA(#3) & ~NMOD(#3,#2) )
	NMOD[pp=+](#3,#2).

// --------------------------------------------------------------------------------
// expressions "gibt es"
//:: Das_1 gibt_2 es_3 nicht. => SUBJ(#2,#3)
//!: Hans_1 gibt_2 es_3 ihm.  => SUBJ(#2,#1) 

if ( ^SUBJ(#2[lemma:geben],#1) & #1[acc] & ^OBJ[acc](#2,#3[lemma:es,nom]) & ~OBJ[dat](#2,#4) )
	SUBJ[imperso=+,acc=~](#2,#3),
	OBJ[acc=+](#2,#1).


// --------------------------------------------------------------------------------
// coordination and modifiers

// volle Tische und Bänke
// [volle_1 Tische_2]_4 und [Bänke_3]_5
| np#5{npa{noun#3[last]}} |
if (COORD1(#4,#,#5) & HEAD(#4,#2) & NMOD(#2,#1) & #1<#2 )
	NMOD2(#3,#1).

// der Vater_1 [von [Anna_4]]_2 und Otto_3
//
if (COORD(#4,#,#3) & NMOD(#1,#2) & HEAD(#2,#4) & #1<#2 )
	NMOD2(#1,#3).

// er ist sehr schnell und gut
// er ist_5 [sehr schnell_1]_2 und [besonders gut_3]_4
if (COORD1(#2,#,#4) & HEAD(#2,#1) & HEAD(#4,#3) & PRED(#5,#1) )
	PRED(#5,#3).

// --------------------------------------------------------------------------------
// Final cleanup

// negation "nicht mehr"
if (NEGAT(#1[lemma:mehr],#2) & ^VMOD(#3,#1))
   NEGAT(#3, #2).


// simplify VMAIN
if ( ^VMAIN(#2[!tense:!],#2) )
	VMAIN(#2).

if ( ^VMAIN(#1,#2) )
	VMAIN(#2).

if ( ^SUBJ(#1,#2) & TRUNC(#2,#3) )
	~.

// definite determiner if ambiguous with demonstrative pronoun (der,die,das)
if (^DETERM[def,dem](#1,#2))
	DETERM[dem=~](#1,#2).

// SUBJECT or OBJECT (der,die,das)
if (^$1[rel,dem](#1,#2))
	$1[dem=~](#1,#2).


