//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Copyright (c) Xerox Corporation.  All Rights Reserved.
//!
//! File:	script.xip
//! Content:	functions used in German grammar
//!
//! Language:	GERMAN
//!
//! Author:	Anne Schillerel
//!
//! Created: 	17-Sep-2008
//! Updated:	30-Oct-2009
//!
//! ENCODING : UTF-8	[€àâáäã]
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Variables:

  int firstname## =0;
  int lastname## =0;
  int partlastname## =0;


Final:
  cleanAllLemmas ;

// ------------------------------------------------------------------------------
Procedures:

TestAgree(#1,#2) {
  if (#1[invar] | #2[invar] | #1[nagr:~] | #2[nagr:~] | #1[nagr]:#2[nagr] ) { 
	return(1); 
  }
  return(0);
}


// ------------------------------------------------------------------------------



UnifyAgree(#1,#2, #3) {
   	if ( #2<noun,invar,masc> & #1[is_masc] ) {
		#3[nagr] = {#1<is_masc>}; 	
	}
   	if ( #2<noun,invar,fem> & #1[is_fem] ) {
		#3[nagr] = {#1<is_fem>}; 	
	}
   	if ( #2<noun,invar,neut> & #1[is_neut] ) {
		#3[nagr] = {#1<is_neut>}; 	
	}

   	if ( #1[nagr:~] & #2[nagr:~] ) { 
		#3[invar=+];
		return(1); 
  	}
   	if ( #1[nagr:~] ) { 
		#3[nagr]={#2};
		return(1); 
  	}
  	if ( #2[nagr:~] ) { 
		#3[nagr]={#1};
		return(1); 
  	}
  	if ( #1[nagr]:#2[nagr] ) {
		#3[nagr]={#1 & #2} ;
  		return(1);
  	}
  	return(0);
}

// FilterCase

FilterCase(#1,#2) {
// #1 = prep - case
// #2 = np - nagr
	if ( #1[invar] ) {
		return(1);
	}
   	if ( #1[nom:~] ) {
		#2[is_nom=~]; 	
	}
    	if ( #1[gen:~] ) {
		#2[is_gen=~]; 	
	}
    	if ( #1[dat:~] ) {
		#2[is_dat=~]; 
	}
    	if ( #1[acc:~] ) {
		#2[is_acc=~]; 	
	}
	return(1);
}

// CleanupAgr(#1,#2)
// #1 = parent node
// #2 = daughter node
 CleanupAgr(#1,#2) {
	if ( #1[invar] ) {
		return(1);
	}
   	if ( #1[is_nom:~] ) {
		#2[is_nom=~]; 	
	}
    	if ( #1[is_gen:~] ) {
		#2[is_gen=~]; 	
	}
    	if ( #1[is_dat:~] ) {
		#2[is_dat=~]; 	
	}
    	if ( #1[is_acc:~] ) {
		#2[is_acc=~]; 	
	}

   	if ( #1[is_masc:~] ) {
		#2[is_masc=~]; #2<masc:~> ;
	}
    	if ( #1[is_fem:~] ) {
		#2[is_fem=~]; #2<fem:~> ;	
	}
    	if ( #1[is_neut:~] ) {
		#2[is_neut=~]; #2<neut:~> ;	
	}
    	if ( #1[is_sg:~] ) {
		#2[is_sg=~]; 	
	}
    	if ( #1[is_pl:~] ) {
		#2[is_pl=~]; 	
	}
	return(1);
}


FlexMasc(#1) {
	#1[mnomw=+];
	#1[maccw=+];
	#1[mgenw=+];
	#1[mdatw=+];
	return(1);
}
