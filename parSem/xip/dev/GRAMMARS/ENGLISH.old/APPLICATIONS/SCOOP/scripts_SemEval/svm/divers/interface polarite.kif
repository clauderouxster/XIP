use('kifltk');
use("kifliblinear");
use("kifsys");

//This is the actual path of the script file, from which we can derived our accesss to the grammars
//string localpath='/home/brun/parSem/xip/dev/GRAMMARS/ENGLISH/APPLICATIONS/SCOOP/scripts_SemEval/svm';
string localpath=_paths[1]+_sep;

loadin(_paths[1]+_sep+"dictionariesPolarity.kif");
loadin(_paths[1]+_sep+"newterms.kif");


liblinear predFood(localpath+"model_test_food");
liblinear predPrice(localpath+"model_test_price");
liblinear predAmbience(localpath+"model_test_ambience");
liblinear predService(localpath+"model_test_service");
liblinear predMisc(localpath+"model_test_annecdote");

//Global variables
map categmodel={"food":predFood,"price":predPrice,"ambience":predAmbience,"service":predService,"anecdotes/miscellaneous":predMisc};
istreemap polarities={0:"positive",1:"negative",2:"neutral",3:"conflict"};

simap allwordsinstring;
vector OpinionAspectTerm;
map sentimentAndCategory;
ssmap modifiedterms;
map termList;
map termsSansCategorie;
bool dual=true;
bool corrige=true;

//--------------------------------------------------------------------------------------------------


string mainrules=@"
functions:
SENTIMENT-AND-CATEGORY.

dependencyRules:

if (OPINION-ON-ASPECT-TERM[!sentiments:!](#1) & FOOD(#1))
     SENTIMENT-AND-CATEGORY[food=+](#1)

if (OPINION-ON-ASPECT-TERM[!sentiments:!](#1) & SERVICE(#1))
     SENTIMENT-AND-CATEGORY[service=+](#1)

if (OPINION-ON-ASPECT-TERM[!sentiments:!](#1) & PRICE(#1))
     SENTIMENT-AND-CATEGORY[price=+](#1)

if (OPINION-ON-ASPECT-TERM[!sentiments:!](#1) & AMBIENCE(#1))
     SENTIMENT-AND-CATEGORY[ambience=+](#1)


script:

if (FOOD(#1)) {
     addterm(#1);
}
if (SERVICE(#1)) {
     addterm(#1);
}
if (AMBIENCE(#1)) {
     addterm(#1);
}

if (PRICE(#1)) {
     addterm(#1);
}

|#1[punct:~,url:~,terminal,conj:~,det:~]|{
     storewords(#1);
}

if(OPINION-ON-ASPECT-CATEGORY$1(#1,#2)) {
     getdeps($1,kif_exchange_data);
}

if(OPINION-ON-ASPECT-CATEGORY$1(#1)) {
     getdeps($1,kif_exchange_data);
}

if (SENTIMENT$1(#1) | SENTIMENT$1(#1,#2)) {
     getdeps($1,kif_exchange_data);
}

if (SENTIMENT-AND-CATEGORY$1(#1)) {
     getdeps($1,kif_exchange_data);
}

if (OPINION-ON-ASPECT-TERM$1(#1)) {
     getdeps($1,kif_exchange_data);
}


predictforstring(kif_exchange_data);
"@;
//--------------------------------------------------------------------------------------------------
string path;

if (_sep=='/')
     path='/home/brun/parSem/xip/dev/GRAMMARS/ENGLISH/APPLICATIONS/SCOOP/GRMFILES/scoop-restaurant.grm';
else
     path='\\manti\brun\parSem\xip\dev\GRAMMARS\ENGLISH\APPLICATIONS\SCOOP\GRMFILES\scoop-restaurant.grm';

parser p(path);
p.addendum(mainrules,true);
//--------------------------------------------------------------------------------------------------

function storewords(node n) {
     string s=n.lemma().lower();
     allwordsinstring[s]++;
}

function storedepwords(string s) {
     s = s.lower();
     allwordsinstring[s]++;
}


function cle(node n) {
     return (n.surface());
}

svector polaritynames=["POSITIVE","NEGATIVE","NEUTRAL","CONFLICT"];

function getdeps(dependency d,vector infos) {
     svector vfeats=d.features();
     string clef;
     string currentCategory;

     if (infos[0]==true)
          currentCategory=infos[1];

     bool cat_present=false;
     if (d.name()=="SENTIMENT-AND-CATEGORY") {
          if (currentCategory.upper() in vfeats)
               cat_present=true;
     }

     vfeats&=polaritynames;
     string pol;
     if (vfeats.size()==1)
          pol = vfeats[0];
     else
          return;

     switch(d.name()) {
          "OPINION-ON-ASPECT-CATEGORY": {
               if (infos[0]==false) {
                    currentCategory=d.parameters()[0].surface();
                    infos.push(currentCategory);
               }
               else {
                    storedepwords(pol + "_" + currentCategory);
                    storedepwords(pol);
               }
          }
          "SENTIMENT": {
               storedepwords(pol+"_"+currentCategory);
          }
          "OPINION-ON-ASPECT-TERM": {
               clef=cle(d.parameters()[0]);
               termsSansCategorie[clef]=pol.lower();
          }
          "SENTIMENT-AND-CATEGORY": {
               if (cat_present) {
                    clef=cle(d.parameters()[0]);
                    storedepwords(pol+"_"+currentCategory);
                    termList[clef]=pol.lower();
                    if (pol=="NEUTRAL")
                         OpinionAspectTerm.push(clef);
               }
          }
     }
}

function addterm(node n1) {
     string clef=cle(n1);
     termList[clef]="unknown";
}

function predictforstring(vector infos) {
     if (infos[0]==false)
          return;

     vector donnees;
     fvector labels=[0];
     iftreemap imd;
     string str;
     string cat=infos[1];
     string polarity;

     for (str in allwordsinstring) {
          if (allthewords.test(str)) {
               imd[allthewords[str]]=allwordsinstring[str];
          }
     }
     donnees.push(imd);
     float weight=1;
     vector reponse;
     reponse=categmodel[cat].predict(donnees,false,true);
     polarity=polarities[reponse[1]];
     infos.push(polarity);

     if (weight>=0.5) {
          if (polarity!="neutral") {
               //We store this predicted polarity as a feature to this dependency
               for (str in OpinionAspectTerm)
                    modifiedterms[str]=polarity;
          }
     }
     infos.push(modifiedterms);
}

function resetall() {
     termList.clear();
     modifiedterms.clear();
     OpinionAspectTerm.clear();
     allwordsinstring.clear();
}


window w;
editor e;
editor out;

//The bread is top notch as well.
//I have to say they have one of the fastest delivery times in the city.
//Certainly not the best sushi in New York, however, it is always fresh, and the place is very clean, sterile.

function nettoie(map term) {
     string c;
     map res;
     for (c in term) {
          if (term[c]!="unknown")
               res[c]=term[c];
     }
     return(res);
}

function analyse(button b,self o) {
     vector infos;
     resetall();
     infos[0]=false;
     println(p.parse(e.value(),infos));
     infos=infos[1:];
     string s=infos+"\n\n";
     string cat;
     for (cat in infos) {
          resetall();
          vector vinfos;
          vinfos[0]=true;
          vinfos[1]=cat;
          p.parse(e.value(),vinfos);
          s+="Terms:"+nettoie(termList)+"\n";
          if (modifiedterms.size())
               s+="Modified:"+modifiedterms+"\n";
          s+="Result:"+vinfos[1:3]+"\n\n";
     }
     out.value(s);
}

button b with analyse;

w.begin(40,40,1000,800,"Analyse");
e.create(50,50,800,300,"sentence");
out.create(50,400,800,300,"Output");

b.create(860,50,50,30,"Lance");

w.end();
w.run();


