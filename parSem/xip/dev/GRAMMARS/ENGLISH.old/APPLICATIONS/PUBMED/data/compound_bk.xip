//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2006 Xerox Corporation.  All Rights Reserved.
//!
//! --- CONTENTS ---
//!   Project    : English XIP grammar for Pubmed abstracts
//!   filename   : compound_bk.xip
//!   Date       : 20/03/2006
//!   Author     : Agnes Sandor
//!  
//!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



// compound words with special feautures

terms:

1> cross : noun[level=+] = ?, punct, ?[lemme:talk].

// compound words having the same features as simple words

// body of evidence = evidence

1> body : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:evidence].
1> body : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:literature].
1> body : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:work].
1> body : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:information].
1> body : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:knowledge].
1> body : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:data].

// several lines of evidence

1> line : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+,noweak=+] = noun, prep[lemme:of], noun[lemme:evidence].

// research activity

1> research : noun[scope=+,bk=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, noun[lemme:activity].

// number of studies, reports, observations, assumptions

1> number : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:study].

1> number : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:report].

1> number : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:observation].

1> number : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:assumption].

// amount of research, information

1> amount : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:research].

1> amount : noun[scope=+,bk=+,specweak=+,mentsco=+,mentscotime=+,mentscoposs=+] = noun, prep[lemme:of], noun[lemme:information].


// words in negative structures that are equivalent to negative words

1> have : verb[!form:fhave,sg:+,!sc_np_toinf:+,!p_on:+,!auxbh:+,!trans:+,contr=+,bk=+,func=+,timefact=+,mentscotime=+] = verb, ?[form:fnot], ?[lemme:be].

1> not : adj[contr=+,bk=+,sc_pwith=+] = adv[contr=~,func=~,bk=~,speccontr=~], adj[lemme:consistent].
1> no : adj[contr=+,bk=+,sc_pwith=+] = quant[contr=~,func=~,bk=~,speccontr=~], adj[lemme:consistent].

1> not : adv[contr=+,bk=+] = adv[contr=~,func=~,bk=~,speccontr=~], adv[lemme:consistently].
1> no : adv[contr=+,bk=+] = quant[contr=~,func=~,bk=~,speccontr=~], adv[lemme:consistently].

1> not : adj[contr=+,bk=+,know=+,nocomp=+,mental=+,mentsco=+,mentscotime=+,mentscoposs=+] = adv[contr=~,func=~,bk=~,speccontr=~], nadj[lemme:clear].
1> no : adj[contr=+,bk=+,know=+,nocomp=+,mentsco=+,mentscotime=+,mentscoposs=+] = quant[contr=~,func=~,bk=~,speccontr=~], adj[lemme:clear].

1> not : verb[contr=+,bk=+,mental=+,wscope=+,bf=+,!indspeech=+,sc_sentsuj=+,!sc_s=+,sc_pin=+,trans=+] = adv[contr=~,func=~,bk=~,speccontr=~], ?[lemme:confirm].

1> less : adv[contr=+,bk=+,speccontr=+,func=+,nounary=+,mentcont=+] = quant, ?[lemme:well].


1> no : noun[contr=+,bk=+,know=+,scope=+,sc_pin=+,nocomp=+,mentsco=+,mentscotime=+,mentscoposs=+] = quant[contr=~,func=~,bk=~,speccontr=~], noun[lemme:study,mental=~,art=~].

1> no : noun[contr=+,bk=+] = quant[contr=~,func=~,bk=~,speccontr=~], noun[lemme:correlation].


1> shed : verb[features:!,bk=+,change=+,know=+] = verb[!features:!], (?), noun[lemme:light].

1> shine : verb[features:!,bk=+,change=+,know=+] = verb[!features:!], (?), noun[lemme:light].

1> so : adv[timefact=+,bk=+,mentscotime=+] = adv, adv[lemme:far].
1> thus : adv[timefact=+,bk=+,mentscotime=+,bkbk=+] = adv, adv[lemme:far].

1> long : nadj[timefact=+,bk=+,mentscotime=+] = nadj, punct, ?[lemme:stand].
1> long : nadj[timefact=+,bk=+,mentscotime=+] = nadj, punct, ?[lemme:standing].

1> at : adv[timefact=+,bk=+,mentscotime=+] = prep, nadj[lemme:present].


1> counter : adj[contr=+,bk=+] = ?, punct, ?[lemme:intuitive].
1> counter : adv[contr=+,bk=+] = ?, punct, ?[lemme:intuitively].

1> no : adv[contr=+,bk=+,nounary=+] = ?, ?[lemme:long,compar:+].

1> take : adv[art=+] = verb[form:ftake], ?[lemme:together].
1> all : adv[art=+] = ?, ?[lemme:together].


// up to now

1> up : adv[timefact=+,bk=+,mentscotime=+] = ?, ?[form:finfto], adv[lemme:now].

//re-evaluate, re-evaluation

1> re : verb[contr=+,bk=+,bkbk=+] = prep, punct, verb[lemme:evaluate].

1> re : noun[contr=+,bk=+,bkbk=+] = prep, punct, noun[lemme:evaluation].

// driving force

1> drive : noun[level=+] = verb[vprog], noun[lemme:force].

// model system is a term, not interesting for us

1> model : noun = ?, ?[lemme:system].

// in contrast to -> contr

1> in : prep[contr=+,bk=+] = prep[form:fin], (?[adj]), ?[lemme:contrast,contr=~,bk=~,nonot=~,noweak=~,func=~], prep.

// in contrast -> however

1> in : adv[contr=+,bk=+,speccontr=+,func=+,however=+] = prep[form:fin], ?[lemme:contrast,contr=~,bk=~,nonot=~,noweak=~,func=~].

// to date

//1> to : adv[contr=+,bk=+,speccontr=+,func=+,however=+] = ?, ?[lemme:date].
1> to : adv[timefact=+,bk=+] = ?, ?[lemme:date].

// not sufficient

1> not : adj[logic=+,contr=+,weak=+] = ?, ?[level,strong].

1> no : adj[logic=+,contr=+,weak=+] = ?, ?[level,strong].

1> nor : adj[logic=+,contr=+,weak=+] = ?, ?[level,strong].

1> neither : adj[logic=+,contr=+,weak=+] = ?, ?[level,strong].

1> never : adj[logic=+,contr=+,weak=+] = ?, ?[level,strong].

// "first time" is never part of a longer NP "first time expressiosn" is considered an NP, "first time is always a pearl

1> first : noun[bkbk=+,form_bk:ffirst] = ?, ?[lemme:time].
1> one : noun[bkbk=+,form_bk:ffirst] = ?, ?[lemme:time].

// large-scale

1> large : adj = ?, punct, ?[lemme:scale].

// cutting-edge

1> cut : adj[bkbk=+,bk=+] = ?, ?[lemme:edge].

1> cut : adj[bkbk=+,bk=+] = ?, ?[punct], ?[lemme:edge].
