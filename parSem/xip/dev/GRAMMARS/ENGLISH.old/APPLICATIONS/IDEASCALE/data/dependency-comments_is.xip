Variables:

xml nd;
xml anc;
string namexmlnd;

Procedures:

testcomment() {
   @_xtd()->Set(nd);
   xmltag(nd,namexmlnd);
//   printerr("Testcomment 1:",namexmlnd,"\n");
   xmlparent(nd,anc);
   xmltag(anc,namexmlnd);
//   printerr("Testcomment 2:",namexmlnd,"\n");
   if (namexmlnd: "comment") {
//      printerr("Trouve\n");
      return(1);
   }
//   printerr("Echec...\n");
   return(0);
}
  


Script:

iftest(@_xtd.title->Test())  { print("<title>\n");}
iftest(@_xtd.idea->Test())  { print("<idea>\n");}
iftest(@_xtd.date->Test())  { print("<date>\n");}
iftest(@_xtd.id->Test())  { print("<id>\n");}
iftest(@_xtd.nr->Test())  { print("<nr>\n");}
iftest(@_xtd.author->Test())  { print("<author>\n");}
iftest(@_xtd.email->Test())  { print("<email>\n");}
iftest(@_xtd.comment->Test())  { print("<comment>\n");}




DependencyRules:

| TOP#1{?+} |
if ( ~SENT(#1) )
   SENT(#1).



// Partnerhsip with RiseSmart is complete and this service offering has been marketed/launched.
//DETD(offering,this)

| #1[idea=+] |
if (DETD(#1,#2[lemme:this]) )
   ~.

| PRON#1[idea=+]{?[lemme:this], ?[lemme:one]} |
  ~.

| #1[lemme:this,idea=+,start,first,last] |
  ~.

| #1[lemme:these,idea=+,start,first,last] |
  ~.

//makes sense
//OBJ_POST(makes,sense)

| #1[pos-qual=+] |
if ( OBJ[post](#1,#2[lemme:sense]) )
   ~.


//////////////////////////////////////////////////////////////////////////////
////////////////////////  PRIOR ART  /////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////


////////////// IDEA is underway /////////////////

//this effort is underway in many different formats .
//MANNER_POST(is,underway)
//SUBJ_PRE(is,effort)

if ( SUBJ(#1,#2[idea]) & ^MANNER(#1,#3[lemme:underway]) )
   MANNER[pra=+](#1,#3).

////////////// this idea is done /////////////

//This tool is also built into Office 2010 .
//OBJ-N(built,tool)
//DETD(tool,This)


if ( ^OBJ-N(#1,#2[idea]) & DETD(#2,#3[lemme:this]) )
   OBJ-N[pra=+](#1,#2).

////////////////////////// Similar ... /////////////

| #1[pra,start] |
if ( ^SENT(#2) )
   SENT[pra=+](#2).

//////////////////////////// already /////////////////////////////////

//In TBO we already have the Career Path Framework and L&D team works on creating the frame work.

//MOD(have,already)

if ( ^MOD(#1,#2[lemme:already]) )
   MOD[pra=+](#1,#2).

//////////////////////////// also /////////////////////////////////

//Verint also offers screen/voice/data capture.
//MOD_PRE(offers,also)

if ( ^MOD[pre](#1[p3,pres],#2[lemme:also]) )
   MOD[pra=+](#1,#2).


/////////////////////////// PERFECT + SUBJ (sy has done)  //////////////////

//Apart from SLAM, a tool that can capture this requirement also apart from activities has been developed by F&A ACS called 'Executive Dashboard and Reengineering tool'.

//VDOMAIN_PERFECT_PASSIVE(developed,has)
//SUBJ-N(developed,A ACS)

if ( ^VDOMAIN[perfect,modal:~](#1,#2) & SUBJ-N(#1,?) )
   VDOMAIN[pra=+](#1,#2).

//Audit Data (SMF Records) has been collected already for the two Genworth mainframe systems being evaluated (SYS6, SYSB).

//VDOMAIN_PERFECT_PASSIVE(collected,has)
//SUBJ_PRE(has,Data)

if ( ^VDOMAIN[perfect,modal:~](#1[lemme:~be],#2) & SUBJ(#2,?) & ~VDOMAIN[pra](#1,#2) )
   VDOMAIN[pra=+](#1,#2).

///////////////////////////// IDEA + PERF (sg has been done to the idea) /////

//I believe you idea has been addressed by SPARKS ITS.

//SUBJ_PRE(has,idea)
//NUCL_VLINK_PERFECT(has,been)

if ( ^SUBJ(#1[lemme:have],#2[idea]) & NUCL[vlink,perfect](#1,#3) )
   SUBJ[pra=+](#1,#2).


///////////////////////////// IDEA + PRIOR ART /////////////////////////////

//I think the following companies (Some with patents pending) are related to this idea:
//NFV{related} PP{to NP{this idea}}

| nfv{#1[lemme:relate]}, pp{?,np{?*,#2[last,idea]}} |
if ( ~MOD(#1,#2) )
  MOD[pra=+](#2,#1).

//Please take a look at the related topic already created.

//MOD_PRE(topic,related)

if ( ^MOD[pre](#1[idea],#2[pra]) )
   MOD[pra=+](#1,#2).

//There is another idea very similar to this one.

if ( DETD(#1[idea],#2[pra]) )
   DETD[pra=+](#1,#2).

//MOD_POST(ADJ:similar,PRON_IDEA:+:this_IDEA:+ one)

if ( ^MOD[post](#1[pra],#2[idea]) )
   MOD[pra=+](#1,#2).

//I think this is related:
//SUBJ_PRE(is,this)
//NUCL_VLINK_PASSIVE(is,related)

if ( SUBJ(#1,#2[idea]) & NUCL(#1,#3[pra]) )
   DEP[pra=+](#2,#3).


//WE do exactly same here in Kochi every bi-week to analyze all our errors in last 15 days.
//OBJ_POST(do,same)
//SUBJ_PRE(do,WE)

if ( ^$1(#1,#2[pra]) & SUBJ(#1,#3[lemme:we]) )
   $1[pra=+](#1,#2).

//This is just the same as Idea# 575 of having a Subject Matter Expert Concept.
//SUBJATTR(This,same)

if ( ^SUBJATTR(#1[idea],#2[pra]) )
   SUBJATTR[pra=+](#1,#2).

///////////////////////////// COMPANY + PRIOR ART /////////////////////////////

//I have seen other companies who offered variations on tuition assistance to increase their call center retention metrics.
//MOD_PRE(companies,other)

if ( ^MOD[pre](#1[prd],#2[pra]) )
   MOD[pra=+](#1,#2).

///////////////////////////// USED TO /////////////////////////////

//DC used to be weekly and is now daily so this has precedent.
//SUBJ_PRE(used,DC)
//OBJ_POST_INFINIT(used,be)

if ( ^SUBJ[pre](#1[lemme:use],#2) & OBJ[post,infinit](#1,#3) )
   SUBJ[pra=+](#1,#2).


///////////////////////////// PAST + PAST TEMPEXR /////////////////////

//Form the learning perspective I can tell you that companies like UPS and Federal Express do driver training and it quite effective - they implemented this years ago.

//TEMP_POST_T_RELAT(implemented,years ago)

if ( ^TEMP[post,t_relat](#1[past],#2) & ~NUCL(?,#1) )
   TEMP[pra=+](#1,#2).

////////////////////////// WE/ACS/I + PAST ///////////////////////

//Ravi, Not sure if you are aware, but we started to resell a solution like this last year - we have branded it ACS power management solutions.
//SUBJ-N_PRE(started,we)
//SUBJ-N_PRE(branded,we)

if ( ^SUBJ-N[pre](#1[past],#2[lemme:we]) & ~$SUBJ-N[pra](#1,#2) )
   SUBJ-N[pra=+](#1,#2)

//ACS has adopted the Xerox Glyph barcode reader from Xerox to be used as Patch separator.

if ( ^SUBJ-N[pre](#1[past],#2[lemme:AC,pl:+]) & ~$SUBJ-N[pra](#1,#2) )
   SUBJ-N[pra=+](#1,#2)

////////////////////////// WE/ACS/I do ///////////////////////

if ( SUBJ(#1[surface:do],#2[lemme:we]) )
   SUBJ[pra=+](#1,#2).

///////////////////////// IDEA exists ///////////////////////////

//This solution exists within BPS.
//SUBJ_PRE(exists,solution)

if ( ^SUBJ(#1[pres,lemme:exist],#2[idea]) & ~SUBJ[pra](#1,#2) )
    SUBJ[pra=+](#1,#2). 

//There are financial programs in several european countries for Green IT efforts of companies.

//LOC_PRE(are,There)

if ( ^LOC[pre](#1[inf:~],#2[lemme:there,start]) )
   LOC[pra=+](#1,#2). 

////////////////////// IT IS GOING ON ///////////////////////////////

//The CCG group within BPS is migrating to Verint for digital recording, screen capture, and speech analytics.

//NUCL_VLINK_PROGRESS(is,migrating)

if ( ^NUCL[vlink,progress](#1[inf:~,contr_neg:~,pres],#2[lemme:~go]) & SUBJ(#1,#3[lemme:we]) )
   NUCL[pra=+](#1,#2).

if ( ^NUCL[vlink,progress](#1[inf:~,contr_neg:~,pres],#2[lemme:~go]) & SUBJ(#1,#3[proper]) )
   NUCL[pra=+](#1,#2).

if ( ^NUCL[vlink,progress](#1[inf:~,contr_neg:~,pres],#2[lemme:~go]) & SUBJ(#1,#3[toutmaj,lemme:~I]) )
   NUCL[pra=+](#1,#2).

////////////////////// IDEA is currently  ///////////////////////////////

//This service is currently provided by ACS .
//MANNER_PRE(#1provided,#2currently)
//NUCL_VLINK_PASSIVE(#3is,#1provided)
//SUBJ_PRE(#3is,#4service)

if ( ^MANNER(#1[lemme:provide],#2[lemme:currently]) )
   MANNER[pra=+](#1,#2).

// exceptions:

//We are looking for savings and revenue ideas so I will be closing this .
//NUCL_PRA_VLINK_PROGRESS(are,looking)
//MOD_POST(looking,savings)
//PREPD(savings,for)


if ( ^NUCL[pra,progress](#1,#2[lemme:look]) & MOD[post](#2,#3) & PREPD(#3,#4[lemme:for]) )
   NUCL[pra=~](#1,#2).

if ( ^NUCL[pra,progress](#1,#2[surface:reading]) )
   NUCL[pra=~](#1,#2).


if ( ^NUCL[pra,progress](#1,#2[lemme:talk]) )
   NUCL[pra=~](#1,#2).

if ( ^NUCL[pra,progress](#1,#2[lemme:search]) )
   NUCL[pra=~](#1,#2).

if ( ^NUCL[pra,progress](#1,#2[lemme:miss]) )
   NUCL[pra=~](#1,#2).


///////////////// exceptions ///////////////////////////

//subject you, (s)he, we, who

if ( ^$1[pra](#1,#2) & SUBJ(#1,#3[lemme:I]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#2,#3[lemme:I]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#1,#3[lemme:she]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#2,#3[lemme:she]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#1,#3[lemme:he]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#2,#3[lemme:he]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#1,#3[lemme:you]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#2,#3[lemme:you]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#1,#3[lemme:who]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#2,#3[lemme:who]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#1,#3[lemme:which]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#2,#3[lemme:which]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#1,#3[lemme:one]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1,#2) & SUBJ(#2,#3[lemme:one]) )
   $1[pra=~](#1,#2).

//verb "progress"

//This idea has been reviewed by Mike Eralie.
//VDOMAIN_PRA_PERFECT_PASSIVE(reviewed,has)
//SUBJ_PRA_PRE(has,idea)

if ( $1[pra](#1[pro],#2) & ^SUBJ[pra](#2,#3[idea]) )
   SUBJ[pra=~](#2,#3).


if ( ^$1[pra](#1[pro],#2) | ^$1[pra](#1,#2[pro]) )
   $1[pra=~](#1,#2).

if ( ^$1[pra](#1[agree],#2) | ^$1[pra](#1,#2[agree]) )
   $1[pra=~](#1,#2).




///////////////////////////////////////////////////////////////////////////////
/////////////ADDITIONAL THOUGHTS/ADVICE TO IDEA_OWNER WRT THE IDEA ///////////
////////////-> ADDITIONAL INFORMATION////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

//I am posting some additional information provided to me by Marlene .

if ( ^MOD(#1[lemme:information],#2[lemme:additional]) )
   MOD[addid=+](#1,#2).

//It would be nice ...
//SUBJ_PRE(would,It)
//SUBJATTR(It,nice)

if ( SUBJ(#1[lemme:would],#2) & ^SUBJATTR(#2,#3[pos-qual-wi]) )
   SUBJATTR[addid=+](#2,#3)

//We can extend this to cover the Electronic forms idea posted recently .

if ( OBJ(#1[lemme:extend],#2[idea]) )
   OBJ[addid=+](#1,#2).

//this idea is better addressed by HRS-IT.
//MOD_PRE(addressed,better)
//OBJ-N(addressed,idea)

if ( ^MOD(#1,#2[compar]) & OBJ-N(#1,#3[idea]) )
   MOD[addid=+](#1,#2).

//Current positioning of SyncHRO no longer supports this idea.

| #4[lemme:no], #2[compar] | 
if ( ^MOD[addid](#1,#2[compar]) & OBJ-N(#1,#3[idea]) )
   MOD[addid=~,reject=+](#1,#2).

/////////////////////// should, could //////////////////////////////

| #1[surface:could] |
if ( ^$1(#1,#2) )
   $1[addid=+](#1,#2).

| #1[surface:should] |
if ( ^$1(#1,#2) )
   $1[addid=+](#1,#2).

////////////////////// you can //////////////////////////////

//you can also choose Rational Clear Case an IBM Tool for the same purpose.
//SUBJ_PRE(can,you)

if ( ^SUBJ(#1[lemme:can],#2[lemme:you,start]) )
   SUBJ[addid=+](#1,#2).

////////////////////// idea needs //////////////////

//This idea needs more detail to define the innovative solution.
//SUBJ-N_PRE(needs,idea)

if ( ^SUBJ-N(#1[lack],#2[idea]) )
   SUBJ-N[addid=+](#1,#2).

////////////////////// you/we need /////////////////////

if ( ^SUBJ-N(#1[lack],#2[lemme:we]) )
   SUBJ-N[addid=+](#1,#2).

if ( ^SUBJ-N(#1[lack],#2[lemme:you]) )
   SUBJ-N[addid=+](#1,#2).

// need only when it is an auxiliary
//OBJ_POST_INFINIT(need,approach)
//SUBJ-N_ADDID_PRE(need,we)

if ( ^$1[addid](#1[lemme:need],#2) & ~OBJ[post,infinit](#1[lemme:need],#3) )
   $1[addid=~](#1,#2).

//////////////////// I suggest ///////////////////////

if ( ^SUBJ-N(#1[suggest],#2[lemme:I]) )
   SUBJ-N[addid=+](#1,#2).

if ( ^DETD(#1[suggest],#2[lemme:I]) )
   DETD[addid=+](#1,#2).

| #1[suggest,start] |
if ( ^$1(#1,#2)  & ~$2[addid](?,?) )
   $1[addid=+](#1,#2).

| #1[suggest,start] |
if ( ^$1(#2,#1)  & ~$2[addid](?,?) )
   $1[addid=+](#2,#1).

//I would like to add that 
//SUBJ_PRE_NFINIT(add,I)
if ( ^SUBJ[nfinit](#1[suggest],#2[lemme:I]) )
   SUBJ[addid=+](#1,#2).


//////////////////// X suggests ///////////////////////

//Mike Eralie suggests that Chris Bradshaw is invited to collaborate (HRS-IT).

if ( ^SUBJ-N(#1[suggest,p3],#2) )
   SUBJ-N[addid=+](#1,#2).

//////////////////// I would ///////////////////////

//I would not justify or recommend a given technology just because it is OpenSource.
//SUBJ_PRE(would,I)

if ( ^SUBJ(#1[lemme:would],#2[lemme:I]) )
   SUBJ[addid=+](#1,#2).

if ( ^SUBJ[addid](#1,#2) & NUCL[vlink,modal](#1,#3[agree]) )
   SUBJ[addid=~](#1,#2).

if ( ^SUBJ[addid](#1,#2) & NUCL[vlink,modal](#1,#3[disagree]) )
   SUBJ[addid=~](#1,#2).

if ( ^SUBJ[addid](#1,#2) & NUCL[vlink,modal](#1,#3[lemme:like]) )
   SUBJ[addid=~](#1,#2).

if ( ^SUBJ[addid](#1,#2) & NUCL[vlink,modal](#1,#3[lemme:love]) )
   SUBJ[addid=~](#1,#2).


//////////////////// you may want ///////////////////////

//For processes that require electronic signature you may want to look at Xerox Docushare + Compliance Module http://docushare.
//SUBJ_PRE(may,you)
//NUCL_VLINK_MODAL(may,want)

if ( ^SUBJ(#1[lemme:may],#2[lemme:you]) & NUCL[modal](#1,#3[lemme:want]) )
   SUBJ[addid=+](#1,#2)


//////////////////// ACS does ///////////////////////

//ACS GLS uses a website called SharePoint where all project particpants and view and workshop all project documents.
//SUBJ-N_PRE(use,AC)


if ( ^SUBJ(#1,#2[lemme:AC]) & ~$1[pra](?,?) )
   SUBJ[addid=+](#1,#2).


////////////////// please //////////////////

| #1[lemme:please] |
if ( ^$1(#1,#2) & ~$2[addid](?,?)  )
   $1[addid=+](#1,#2).

| #1[lemme:please]  |
if ( ^$1(#2,#1) & ~$2[addid](?,?) )
   $1[addid=+](#2,#1).

////////////////// http(s) //////////////////

| #1[lemme:http?*] |
  LIXO(#1).

| #1[lemme:www?*] |
  LIXO(#1).

////////////////// attach //////////////////

| #1[lemme:attach] |
  LIXO(#1).

| #1[lemme:attachment] |
  LIXO(#1).

////////////////// link //////////////////

| #1[lemme:link,noun] |
  LIXO(#1).

////////////////// question //////////////////

| #1[form:fquest] |
  LIXO(#1).

////////////////// what about //////////////////

| ADV{#1[lemme:what], #2[lemme:about]} |
  LIXO(#1).

////////////////// another //////////////////

| #1[lemme:another,start] |
  LIXO(#1).




///////////////// Imperative ///////////////////

| fv{#1[start,bf,agree:~,disagree:~,pos-qual:~]} |
  LIXO(#1).

if ( ^LIXO(#1[lemme:be]) )
   ~.

if ( ^LIXO(#1[lemme:have]) )
   ~.

if ( ^LIXO(#1[lemme:need]) )
   ~.

if ( ^LIXO(#1[lemme:hello]) )
   ~.

if ( ^LIXO(#1[lemme:like]) )
   ~.

if ( ^LIXO(#1[lemme:love]) )
   ~.

if ( ^LIXO(#1[lemme:recommend]) )
   ~.

if ( ^LIXO(#1[lemme:thank]) )
   ~.

if ( ^LIXO(#1[lemme:yes]) )
   ~.

if ( ^LIXO(#1[lemme:yeah]) )
   ~.

if ( ^LIXO(#1[aux]) )
   ~.

| fv{#1[start,bf,agree:~,disagree:~,pos-qual:~,lemme:do]} |
  LIXO(#1).

if ( ^LIXO(#1[form:fcan]) )
   ~.

if ( LIXO(#1[form:fquest]) & ^LIXO(#2[bf]) )
   ~.

//////////////// If ... //////////////////

//If we are automating OPC submission then even if the job triggers at 7:00 PM i think its fine.

| #1[lemme:if,start] |
  LIXO(#1).

//////////////// perhaps //////////////////

| #1[lemme:perhaps] |
  LIXO(#1).


if ( LIXO(#2) & ^SENT(#1) )
   SENT[addid=+](#1).

if ( ^LIXO(#2) & SENT[addid](#1) )
   ~.

//////////////// this can/could //////////////////

//SUBJ_PRE(could,This)

if ( ^SUBJ(#1[lemme:could],#2[lemme:this]) )
   SUBJ[addid=+](#1,#2).

if ( ^SUBJ(#1[lemme:can],#2[lemme:this]) )
   SUBJ[addid=+](#1,#2).

//////////////// as I understand/see //////////////////

//As I understand this, we could take, for example, the Microsoft Office Suite and convert it for use on a mobile device (something that Microsoft and Nokia are now doing).
//CONNECTOR_SUBORD(understand,As)

if ( ^CONNECTOR[subord](#1[lemme:understand],#2[lemme:as]) )
     CONNECTOR[addid=+](#1,#2).

if ( ^CONNECTOR[subord](#1[lemme:see],#2[lemme:as]) )
     CONNECTOR[addid=+](#1,#2).

////////////////// suggest you //////////////////

//FV{recommend} NP{you}
| fv{#1[suggest]}, np{#2[lemme:you]} |
if ( ^SENT(#3) )
   SENT[addid=+](#3)



//////////////////////////////////////////////////////////////////////////////
/////////////////////////// AGREE ///////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

| #1[agree,verb] | 
if ( ^$1(#1,#2) & ~$2[agree](?,?) )
   $1[agree=+](#1,#2).

| #1[lemme:support] | 
if ( ^$1(#1,#2[lemme:I]) )
   $1[agree=+](#1,#2).

if ( ^SUBJATTR(#1,#2[agree]) )
   SUBJATTR[agree=+](#1,#2).

//you are right

if ( ^MOD(#1[surface:are],#2[agree]) )
   MOD[agree=+](#1,#2).


//absolutely, yes
   
| #1[lemme:absolutely,start] |
  LIXO(#1).

| #1[lemme:absolutely,start], np{?[lemme:no], ?} |
if ( ^LIXO(#1) )
   ~.

| #1[lemme:exactly,start] |
  LIXO(#1).

if ( LIXO(#2) & ^SENT(#1) )
   SENT[agree=+](#1).

if ( ^LIXO(#2) )
   ~.  

| #1[lemme:yes,start] |
  LIXO(#1).

| #1[lemme:yeah,start] |
  LIXO(#1).

| #1[lemme:wow,start] |
  LIXO(#1).

if ( LIXO(#2) & ^SENT(#1) )
   SENT[agree=+](#1).

if ( ^LIXO(#2) )
   ~.  


//////////////////////////////////////////////////////////////////////////////
/////////////////////////// POSITIVE QUALIFICATION //////////////////////////
////////////////////////////////////////////////////////////////////////////

//what a ...!
//BG{what} NP{an idea sirjee}

| BG{#1[lemme:what]}, NP{#2[indef,det], ?+} |
  LIXO(#1).

//good quality words


| #1[pos-qual,maj:~] |
  LIXO(#1).

| #1[pos-qual,maj,start,lemme:bravo] |
  LIXO(#1).

| #1[pos-qual-wi,start] |
  LIXO(#1).


//not only

//I think this will not only help in reducing manual work but also many issues faced by associates because of lack communication on rosters.
//ADV{not only}

| adv{#1[lemme:not], #2[lemme:only]} |
  LIXO(#1).

//like/love

| fv#2{#1[lemme:like,verb,pres]} |
if ( ~NEGAT(#2) )
  LIXO(#1).

| fv#2{#1[lemme:love,verb,pres]} |
if ( ~NEGAT(#2) )
  LIXO(#1).


// thank you
//| #1[lemme:thank] |
//  LIXO(#1).

//| #1[lemme:thanks] |
//  LIXO(#1).


// change polarity

//The most difficult part of the valuation is not projecting benefits .
//MOD_NEG(#2projecting,not)
//OBJ_POST(#2projecting,#1benefits)
//LIXO(#1benefits)

if ( ^LIXO(#1) & OBJ(#2,#1) & NEGAT(#2) )
   ~.

//Ed, Frozen plans could have limited value.
//OBJ_POST(limited,value)

if ( $1(#1[change-qual],#2[pos-qual]) & ^LIXO(#3) )
   LIXO[reject=+](#3).

//I am closing this idea as it does not align with the definition of Innovations .
//MOD_NEG(#1align,#2not)
//MOD_POST(#1align,#3definition)
//MOD_POST(#3definition,#4Innovations)

if ( MOD[neg](#1,#2) & $1(#1,#3) & $2(#3,#4) & ^LIXO(#4) )
   LIXO[reject=+](#4).

//I don't see the benefit .
//NUCL_VLINK_INSIST(don't,see)
//OBJ_POST(see,benefit)

if ( NUCL[insist](#1[contr_neg],#2) & $1(#2,#3) & ^LIXO(#3) )
   LIXO[reject=+](#3).

//This is not an innovation .
//NEGAT(is)
//NUCL_SUBJCOMPL(is,innovation)

if ( NEGAT(#1) & NUCL(#1,#2) & ^LIXO(#2) )
   LIXO[reject=+](#2).

// At first glance, some people seem to love this idea, or hate it.
//MOD_POST_INFINIT(seem,love)

if ( MOD(#1[lemme:seem],#2) & ^LIXO(#2) )
   LIXO[reject=+](#2).

if ( LIXO[reject](#2) & ^SENT(#1) )
   SENT[reject=+](#1).

if ( ^LIXO[reject](#1) )
   ~.


if ( LIXO(#2) & ^SENT(#1) )
   SENT[pos-qual=+](#1).

if ( ^LIXO(#1) )
   ~.


//I understand the solution
//OBJ_POST(understand,solution)
//SUBJ_PRE(understand,I)


if ( SUBJ(#1[lemme:understand],#2[lemme:I]) & OBJ(#1,#3[idea]) & ^SENT(#4) )
   SENT[pos-qual=+](#4).
   


//NP{Two thumbs} up 

| np{?*, #1[lemme:thumb]}, #2[lemme:up] |
if ( ^SENT(#3) )
   SENT[pos-qual=+](#3).
  

//Quick Win Idea :
//ADJ{Quick win}

| adj{#1[lemme:quick], #2[lemme:win]} |
if ( ^SENT(#3) )
   SENT[pos-qual=+](#3).

//I see your point 
//DETD(point,your)
//OBJ_POST(see,point)

if ( DETD(#1[lemme:point],#2[lemme:you]) & OBJ(#3[lemme:see],#1) &  ^SENT(#4) )
   SENT[pos-qual=+](#4).
     



//This is certainly an idea I can get behind .
//certainly NP{an idea}

| #1[lemme:certainly], NP{#2[indef], ?+} |
if ( ^SENT(#3) )
   SENT[pos-qual=+](#3).

// good + idea

if ( ^$1(#1[idea],#2[pos-qual-wi]) | ^$1(#1[pos-qual-wi],#2[idea]) )
   $1[pos-qual=+](#1,#2).

if ( $1[pos-qual](#1,#2) & ^$2[pos-qual](#1,#2) )
   ~.

//You had me at hello .
//PREPD(hello,at)

if ( ^$1(#1[lemme:hello],#2[lemme:at]) )
   $1[pos-qual=+](#1,#2).

//A good suggestion vimal.
//TOP{NP{A AP{good} suggestion vimal} .}

| ap{#1[pos-qual-wi]}, #2[idea] |
  MOD[pos-qual=+](#2,#1).

//This would be a perfect fit in HRS Portal- under the community pages.
//SUBJATTR(This,fit)
//MOD_PRE(fit,perfect)

if ( ^SUBJATTR(#1[idea],#2) & MOD[pre](#2,#3[pos-qual-wi]) & ~CONNECTOR[subord](#4,#5[lemme:if]) & NUCL[subjcompl](#4,#2) )
   SUBJATTR[pos-qual=+](#1,#2).



//I think your idea has merit.
//SUBJ_PRE(has,idea)
//OBJ_POST(has,merit)

if ( SUBJ(#1,#2[idea]) & OBJ(#1,#3[pos-qual-wi]) )
   DEP[pos-qual=+](#2,#3).


//makes sense
//I think the concept makes sense and could definitely work.

//sounds good

| NP{#1[lemme:sound]}, NP{#2[pos-qual-wi]} |
   MOD[pos-qual=+](#1,#2).

| NP{?*,#1[lemme:sound]}, AP{?*,#2[pos-qual-wi]} |
   MOD[pos-qual=+](#1,#2).

| NP{?*,#1[lemme:sound]}, ?*, GV{#2[pos-qual-wi]} |
   MOD[pos-qual=+](#1,#2).

if ( ^MOD[pre](#1[pos-qual-wi],#2[lemme:sound]) )
   MOD[pos-qual=+](#1,#2).

if ( ^MOD[pre](#1[pos-qual-wi],#2[lemme:Sound]) )
   MOD[pos-qual=+](#1,#2).

//we need
//This is something we absolutely need, and will need to have a few sets of tools, based on platform, client size, etc.

if ( ^SUBJ(#1[lemme:need],#2[lemme:we]) & ~OBJ[post,infinit](#1,#3) )
   SUBJ[pos-qual=+](#1,#2).

//this program/we will

//This program will offer Default Prevention services directly to schools in an effort to proactively reduce the schools Cohort Default rate.
//SUBJ_PRE(will,program)

if ( ^SUBJ(#1[lemme:will],#2[idea]) & ~VDOMAIN[modal,passive](#3[pro],#1) )
   SUBJ[pos-qual=+](#1,#2)

if ( ^SUBJ(#1[lemme:allow],#2[idea]) )
   SUBJ[pos-qual=+](#1,#2)

//We are very much interested in testing the iPhone 
//NUCL_VLINK_PASSIVE(are,interested)

if ( ^NUCL[passive](#1,#2[lemme:interest,past]) )
   NUCL[pos-qual=+](#1,#2).

// Mark sentences with "not only": they are always pos-qual, even if they have "but"

//is a great X
//Yeah, we were using the same in our previous organization and it's really a great tool.
//OBJ_POST('s,tool)
//QUALIF(tool,great)

if ( $1(#1[form:fbe,pres],#2) & ^QUALIF(#2,#3[pos-qual-wi]) & #1 < #2 & ~$1[pos-qual](#2,#3) & ~CONNECTOR[subord](#1,#4[lemme:if]) & ~SUBJ[pre,relativ](#1,#4[lemme:which]) )
   QUALIF[pos-qual=+](#2,#3).

//I think an app for employees would be great.
//SUBJ_PRE(would,app)
//NUCL_VLINK_MODAL(would,be)
//NUCL_SUBJCOMPL(be,great)

if ( SUBJ(#1[lemme:would],#2[prd]) & NUCL[vlink,modal](#1,#3) & NUCL[subjcompl](#3,#4[pos-qual-wi]) )
   DEP[pos-qual=+](#2,#4).


// final

| adv{#1[lemme:not], #2[lemme:only]} | 
if ( ^SENT[pos-qual](#3) )
   SENT[notonly=+](#3)

//////////////////////////////////////////////////////////////////////////////
/////////////////////////// REJECTION  //////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

//This would not necessarily increase quality scores.
//MOD_NEG(increase,not)
//SUBJ-N_PRE(increase,This)

if ( ^SUBJ-N(#1[lemme:~seem],#2[idea]) & MOD[neg](#1,#3) )
   SUBJ-N[reject=+](#1,#2).

//Your idea is not actionable.
//SUBJATTR(idea,actionable)
//NUCL_SUBJCOMPL(is,actionable)
//NEGAT(is)


if ( ^SUBJATTR(#1[idea],#2) & NUCL[subjcompl](#3,#2) & NEGAT(#3) )
   SUBJATTR[reject=+](#1,#2).


//With the changes that all but eliminated new loan originations, this doesn't seem likely to be pursued.
//MOD_PRE(#2seem,#4this)
//NUCL_VLINK_INSIST(#1doesn't,#2seem)
//NEGAT(#3seem)
//IV{seem} 

if( ^NUCL[vlink,insist](#1,#2) & NEGAT(#2) & MOD(#2,#4[idea]) )
    NUCL[reject=+](#1,#2).

//Not a revenue generating idea.
//TOP{Not NP{a revenue AP{generating} idea} .}

| #1{?[lemme:not,start], np} |
  LIXO(#1).

//Not for HRO.
//Not PP{for NP{HRO}}

| #1{?[lemme:not,start], pp} |
  LIXO(#1).

//Not applicable to our discipline .
//Not AP{applicable}

| #1{?[lemme:not,start], ap} |
  LIXO(#1).



//I don't
//I don't think this is a new idea or an innovation .
//{SC{NP{I} FV{don't}}

| np[start], fv{#1[contr_neg]} |
  LIXO(#1).

| np{#2[lemme:I]}, fv{#1[contr_neg]} |
if (~LIXO(#1) )
  LIXO(#1).


//not sure
//I am not sure how cost effective this idea would be, keeping the returns in mind.
//not sure

| #1[lemme:not], #2[lemme:sure] |
  LIXO(#1).

if ( LIXO(#2) & ^SENT[pos-qual:~](#1) )
   SENT[reject=+](#1).

if ( ^LIXO(#2) )
   ~.

if ( LIXO(#2) & ^SENT[pos-qual](#1) )
   SENT[pos-qual=~,reject=+](#1).

if ( ^LIXO(#1) )
   ~.

//Sorry to say
//MOD_POST_INFINIT(Sorry,say)

if ( ^MOD[post,infinit](#1[lemme:sorry],#2[lemme:say]) )
   MOD[reject=+](#1,#2).


//@David, I believe you are wrong there, OpenOffice uses StarBasic as it's macro language which is syntactically the same as MS VBA.
//SUBJATTR(you,wrong)

if ( ^SUBJATTR(#1[lemme:you],#2[neg-qual] ) )
   SUBJATTR[reject=+](#1,#2).
   
 


//////////////////////////////////////////////////////////////////////////////
/////////////////////////// YES AND NO //////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


| #1[lemme:however] |
  LIXO(#1).

| #1[lemme:but] |
if ( ~SENT[notonly](#2) )
  LIXO(#1).

| BG{#1}, #2[lemme:rather] |
if ( ^LIXO(#3) )
   ~.


| #1[lemme:all], #2[lemme:but] |
if ( ^LIXO(#2) )
   ~.

| #1[lemme:although] |
  LIXO(#1).

| #1[lemme:while,start] |
  LIXO(#1).

| TOP#1{?+} |
if ( ( ^SENT[agree](#1) | ^SENT[pos-qual](#1) | ^SENT[reject](#1) ) & LIXO(#2) )
   SENT[yes-no=+](#1).

if ( ( ^$1[agree](#1,#2) | ^$1[pos-qual](#1,#2) | ^$1[addid](#1,#2) ) & SENT[yes-no](#3) )
   $1[agree=~,pos-qual=~,addid=~](#1,#2).

if ( ( $1[agree](#1,#2) | $1[pos-qual](#1,#2) | $1[addid](#1,#2) ) & LIXO(#3) & ^SENT(#4) )
   SENT[yes-no=+](#4).

if ( ( ^$1[agree](#1,#2) | ^$1[pos-qual](#1,#2) | ^$1[addid](#1,#2) ) & LIXO(#3) & SENT[yes-no](#4) )
   $1[agree=~,pos-qual=~,addid=~](#1,#2).

if ( ^LIXO(#1) )
   ~.

//exception
//Not only is this a good idea, but is eco-friendly, conservation-minded and gives me a great idea to save money at my own home!
//MANNER_PRE(is,only)
//MOD_PRE_NEG(is,Not)
//FV{Not only is}
//SUBJ_PRE(is,idea)
//SENT_YES-NO(Not only is)

| FV{#1[lemme:not], #2[lemme:only], #3[lemme:be]} |
if ( ^SENT[yes-no](#4) )
   ~.

if ( ( ^$1[agree](#1,#2) | ^$1[pos-qual](#1,#2) | ^$1[addid](#1,#2) ) & SENT[yes-no](#3) )
   $1[agree=~,pos-qual=~,addid=~](#1,#2).

if ( ^SENT[yes-no](#1) )
   SENT[agree=~,pos-qual=~,addid=~](#1).

if ( ^SENT[agree](#1) & SENT[yes-no](#1) )
   ~.

if ( ^SENT[pos-qual](#1) & SENT[yes-no](#1) )
   ~.

if ( ^SENT[addid](#1) & SENT[yes-no](#1) )
   ~.


//////////////////////////////////////////////////////////////////////////////
/////////////////////////// PROCESS /////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

| #1[lemme:send,pro=+] |
if ( $1(#1,#2[idea]) | $1(#2,#1[idea]) )
   ~.

| #1[lemme:send,pro=+] |
if ( SUBJ(#1,#2[lemme:I]) )
   ~.

///////////////// (I) will PROCESS /////////////////////

if ( ^SUBJ-N(#1[pro],#2[lemme:I]) )
   SUBJ-N[pro=+](#1,#2).

| #1[pro,start] |
  LIXO(#1).

//IV{to forward}

| #1[pro,verb,start] |
if ( ~SUBJ-N(#1,#2) )
  LIXO(#1).

///////////////// forward to /////////////////////

//IV{to forward} PP{to NP{NOUN{Mary Rowe}}} 

| iv{?*, #1[lemme:forward]}, pp{#2[lemme:to], ?+} |
  LIXO(#1).

| #1[lemme:forward], pp{#2[lemme:to], ?+} |
  LIXO(#1).


/////////////// PastPart[start] ///////////////

| #1[partpas,start,pro] |
  LIXO(#1).

| #1[partpas,start,prowi] |
  LIXO(#1).

| #1[partpas,start,interact] |
  LIXO(#1).

//Ranking

| #1[lemme:rank,vprog] |
  LIXO(#1).


// Will get input from Jim Adams.

| #1[lemme:will,start] |
  LIXO(#1).

| #1[lemme:Will,start] |
  LIXO(#1).


if ( LIXO(#2) & ^SENT(#1) )
  SENT[pro=+](#1).

if ( ^LIXO(#1) )
   ~.

///////////////// BE PROCESSed /////////////////////

//This idea will be sent to GY DVP, Shannon Battaglia for comments and/or follow up.
//VDOMAIN_MODAL_PASSIVE(sent_PRO:+,will)

if ( ^VDOMAIN[modal,passive](#1[pro],#2) )
   VDOMAIN[pro=+](#1,#2).
   
//this idea was reviewed by Mike Eralie.
//NUCL_VLINK_PASSIVE(was,reviewed)
if ( ^NUCL[vlink,passive](#1,#2[pro]) )
   NUCL[pro=+](#1,#2).

//Idea forwarded to Teri Morse, Tower Lead for HRO Recruiting Services.
//SUBJ-N_PRE(forwarded,Idea)

if ( ^SUBJ-N(#1[pro],#2[idea]) )
   SUBJ-N[pro=+](#1,#2).

///////////////// in progress /////////////////////

//PREPD(Progress,In)

if ( ^PREPD(#1[lemme:progress],#2[lemme:in]) )
   PREPD[pro=+](#1,#2).

///////////////// in progress /////////////////////

//PREPD(review,Under)

if ( ^PREPD(#1[lemme:review],#2[lemme:under]) )
   PREPD[pro=+](#1,#2).

if ( ^PREPD(#1[lemme:review],#2[lemme:in]) )
   PREPD[pro=+](#1,#2).

/////////////// I am Xing this ///////////////

//I am changing this to TBO.
//SUBJ-N_PRE(changing,I)
//OBJ_POST(changing,this)

if ( ^SUBJ-N(#1[prowi],#2[lemme:I]) & OBJ[post](#1[prowi],#3[idea]) )
   SUBJ-N[pro=+](#1,#2).

/////////////// Xing/Xed PREP ///////////////

//TOP{GV{Sending} PP{to 

| TOP{GV, pp, ?+} |
if ( ^SENT(#1) )
   SENT[pro=+](#1).

| TOP{sc{fv{#2[past]}}, pp, ?+} |
if ( ^SENT(#1) )
   SENT[pro=+](#1).

| #2[lemme:ask,start,vprog] |
if ( ^SENT(#1) )
   SENT[pro=+](#1).


| #2[lemme:send,start,vprog] |
if ( ^SENT(#1) )
   SENT[pro=+](#1).


/////////////// I will ///////////////

//I think this belongs in HRO so I will be changing the category.
//SUBJ_PRE(will,I)


if ( ^SUBJ(#1[lemme:will],#2[lemme:I]) )
   SUBJ[pro=+](#1,#2).

///////////////// X has done /////////////////////

//TOP{SC{NP{NOUN{Teri Morse}}

| TOP{SC{NP{NOUN#1},?+}} |
if ( PERSON(#1) & ^SENT(#2) )
   SENT[pro=+](#2).


///////////////// X reviewed /////////////////////

//Mike Eralie reviewed.
//SUBJ_PRE(reviewed,Eralie)
//PERSON(Mike Eralie)
//HEAD(Eralie,Mike Eralie)
//NP{NOUN{Mike Eralie}}

| #4np{noun#3}} |
if ( ^SUBJ(#1[pro],#2) & HEAD(#2,#4) & PERSON(#3) )
   SUBJ[pro=+](#1,#2).

///////////////// schedule meeting /////////////////////

if ( ^$1(#1[lemme:schedule],#2[lemme:meet]) | ^$1(#1[lemme:meet],#2[lemme:schedule]) )
   $1[pro=+](#1,#2).

///////////////// owner, vetter /////////////////////

| #1[lemme:owner,start] |
if ( ^SENT(#2) )
   SENT[pro=+](#2).

| #1[lemme:vetter,start] |
if ( ^SENT(#2) )
   SENT[pro=+](#2).

| #1[lemme:Vetter,start] |
if ( ^SENT(#2) )
   SENT[pro=+](#2).

| #1[lemme:pipeline] |
if ( ^SENT(#2) )
   SENT[pro=+](#2).

///////////////// in stage /////////////////////

if ( PREPD(#1[lemme:stage],#2[lemme:in]) & SENT(#3) )
   SENT[pro=+](#3).

//PP{in NP{stage 5}}

| pp{#1[lemme:in], np{#2[lemme:stage], ?*}} |
if ( ^SENT(#3) )
   SENT[pro=+](#3).

///////////////// rating /////////////////////

| #1[lemme:rate] |
if ( ^SENT(#2) )
   SENT[pro=+](#2).

///////////////// on hold /////////////////////

| #1[lemme:on_hold] |
if ( ^SENT(#2) )
   SENT[pro=+](#2).

| NOUN{#1[lemme:status], #2[lemme:update]} |
if ( ^SENT(#3) )
   SENT[pro=+](#3).
   
///////////////// emailed /////////////////////

| #1[surface:emailed] |
if ( ^SENT(#2) )
   SENT[pro=+](#2).

| #1[surface:Emailed] |
if ( ^SENT(#2) )
   SENT[pro=+](#2).

//////////////////////////////////////////////////////////////////////////////
/////////////////////////// MARK SENTENCES //////////////////////////////////
////////////////////////////////////////////////////////////////////////////


if ( ^$1[agree](#1,#2) & ^SENT[agree:~](#3) )
   SENT[agree=+](#3)

if ( ^$1[pra](#1,#2) & ^SENT[pra:~](#3) )
   SENT[pra=+](#3)

if ( ^$1[pro](#1,#2) & ^SENT[pro:~](#3) )
   SENT[pro=+](#3)

if ( ^$1[addid](#1,#2) & ^SENT[addid:~](#3) )
   SENT[addid=+](#3)

if ( ^$1[pos-qual](#1,#2) & ^SENT[pos-qual:~](#3) )
   SENT[pos-qual=+](#3)

if ( ^$1[reject](#1,#2) & ^SENT[reject:~](#3) )
   SENT[reject=+](#3)

if ( ^$1[yes-no](#1,#2) & ^SENT[yes-no:~](#3) )
   SENT[yes-no=+](#3)

if ( ^SENT[reject,yes-no](#1) )
   SENT[reject=~](#1).


////////////////////////////////////
/////////ONLY IN COMMENTS/////////////
////////////////////////////////////

if ( testcomment() & ^SENT[pra](#1) )
   COMMENT[pra=+](#1).

if ( testcomment() & ^SENT[pro](#1) )
   COMMENT[pro=+](#1).

if ( testcomment() & ^SENT[agree](#1) )
   COMMENT[agree=+](#1).

if ( testcomment() & ^SENT[yes-no](#1) )
   COMMENT[pro-con=+](#1).

if ( testcomment() & ^SENT[reject](#1) )
   COMMENT[neg-att=+](#1).

if ( testcomment() & ^SENT[pos-qual](#1) )
   COMMENT[pos-att=+](#1).

if ( testcomment() & ^SENT[addid](#1) )
   COMMENT[addid=+](#1).


if ( testcomment() & ^SENT(#1) )
   COMMENT(#1).