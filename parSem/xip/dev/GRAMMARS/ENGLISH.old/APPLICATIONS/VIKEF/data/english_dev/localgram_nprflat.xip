//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2003 Xerox Corporation.  All Rights Reserved.
//!
//! --- CONTENTS ---
//!   Project    : English XIP grammar
//!   filename   : localgram_npr.xip
//!   Date       : 10/02/2003
//!   Author     : Caroline Brun
//!  
//!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Sequence:

// Special VIKEF
// WARNING : a context should be stated 

//Rule 1
1> noun[mwe=+,proper=+,person=+] @= | ?[firstname:~]| noun*[title:+,titlepost:~], noun+[proper,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,title:~,initial:~], noun*[particlename:+] ,  noun[proper,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,title:~],  punct[comma], noun*[firstname:+], (noun[let,maj];noun[initial,maj]), noun [firstname:+,cr:~,cr2:~]  | | .

//Rule 2
1> noun[mwe=+,proper=+,person=+] @= | ?[firstname:~]| noun*[title:+,titlepost:~], (noun+[particlename:+]),  noun+[proper,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,title:~,initial:~], punct[comma], noun*[firstname:+], (noun[let,maj];noun[initial,maj]), noun [firstname:+,cr:~,cr2:~]  | | .

//Rule 3
1> noun[mwe=+,proper=+,person=+] @= | ?[firstname:~]|  noun*[title:+,titlepost:~,alphanum:~],(noun[particlename:+,alphanum:~]),  noun+[firstname:~,proper,let:~,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,title:~,alphanum:~], punct[comma], noun*[firstname:+,alphanum:~], (noun[let,maj,alphanum:~];noun[initial,maj,alphanum:~]), noun [firstname:+,cr:~,cr2:~,alphanum:~]  | ?[initial:~,let:~,maj:~] | .

//Rule 4
1>  noun[mwe=+,proper=+,person=+] @= | ?[firstname:~]| noun*[title:+,titlepost:~],(noun[particlename:+]), noun+[proper,mwe:~,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,bus:~,title:~,initial:~], punct[comma], (noun[firstname:+]), (noun[let,maj];noun[initial,maj]),  noun[let,maj,cr:~,cr2:~];noun[initial,cr:~,cr2:~] |?[compend:~] |.

//Rule 5
1>  noun[mwe=+,proper=+,person=+] @= | ?[firstname:~]| noun*[title:+,titlepost:~],(noun[particlename:+]), noun+[proper,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,bus:~,title:~,initial:~], punct[comma], (noun[firstname:+]), (noun[let,maj];noun[initial,maj]),  noun[let,maj,cr:~,cr2:~];noun[initial,maj,cr:~,cr2:~] | |.

// idem with empty left context
//Rule 6
1> noun[mwe=+,proper=+,person=+] @= | | noun*[title:+,titlepost:~], noun+[proper,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,title:~], noun*[particlename:+] ,  noun[proper,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,title:~],  punct[comma], noun*[firstname:+], (noun[let,maj];noun[initial,maj]), noun [firstname:+,cr:~,cr2:~]  | | .

//Rule 7
1> noun[mwe=+,proper=+,person=+] @= | | noun*[title:+,titlepost:~], (noun+[particlename:+]),  noun+[proper,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,title:~], punct[comma], noun*[firstname:+], (noun[let,maj];noun[initial,maj]), noun [firstname:+,cr:~,cr2:~]  | | .

//Rule 8
1> noun[mwe=+,proper=+,person=+] @=| |  noun*[title:+,titlepost:~],(noun[particlename:+]),  noun+[person:~,firstname:~,proper,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,title:~], punct[comma], noun*[firstname:+], (noun[let,maj];noun[initial,maj]), noun [firstname:+,cr:~,cr2:~]  | ?[initial:~,let:~,maj:~] | .

//Rule 9
1>  noun[mwe=+,proper=+,person=+] @= | | noun*[title:+,titlepost:~],(noun[particlename:+]), noun+[proper,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,title:~], punct[comma], (noun[firstname:+]), (noun[let,maj];noun[initial,maj]),  noun[let,maj,cr:~,cr2:~];noun[initial,cr:~,cr2:~] |?[compend:~] |.

//Rule 10
1>  noun[mwe=+,proper=+,person=+] @= | | noun*[title:+,titlepost:~],(noun[particlename:+]), noun+[proper,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,place:~,bus:~,title:~], punct[comma], (noun[firstname:+]), (noun[let,maj];noun[initial,maj]),  noun[let,maj,cr:~,cr2:~];noun[initial,maj,cr:~,cr2:~] | |.

IDrules:

//PERSON NAMES :

2> noun[mwe=+,proper=+,person=+] -> noun[title:+,titlepost:~,first],noun*[title:+,titlepost:~],
                                                       noun*[firstname],
                                                       noun*[let,maj],
                                                       noun*[maj,initial,bus:~], 
                                                       noun*[particlename],
                                                       (prep[form:fof]),
                                                       noun+[proper,person:~,particlename:~,orghead:~,orgend:~,locpost:~,locpre:~,eventmod:~,orgmod:~,title:~],
                                                       (punct[comma:+]), 
                                                       noun[titlepost:+,last].


2> noun[mwe=+,proper=+,person=+] -> noun[firstname,first],noun*[firstname],
                                                       noun*[let,maj],
                                                       noun*[maj,initial,bus:~], 
                                                       noun*[particlename], (prep[form:fof]),
                                                       noun+[proper,person:~,particlename:~,orghead:~,orgend:~,locpost:~,locpre:~,eventmod:~,orgmod:~,title:~],
                                                       (punct[comma:+]), 
                                                       noun[titlepost:+,last].


2> noun[mwe=+,proper=+,person=+] -> noun[title:+,titlepost:~,first],noun*[title:+,titlepost:~],
                                                       noun*[firstname],
                                                       noun*[let,maj],
                                                       noun*[maj,initial,bus:~], 
                                                       noun*[particlename],(prep[form:fof]),
                                                       noun*[proper,person:~,particlename:~,orghead:~,orgend:~,locpost:~,locpre:~,eventmod:~,orgmod:~,firstname:~,title:~], 
                                                       noun+[proper,person:~,particlename:~,orghead:~,orgend:~,locpost:~,locpre:~,eventmod:~,orgmod:~,firstname:~,last,title:~] . 

2> noun[mwe=+,proper=+,person=+] -> noun[firstname,first,toutmaj:~],
                                                       noun*[firstname],
                                                       noun*[let,maj],
                                                       noun*[maj,initial,bus:~], 
                                                       noun*[particlename],(prep[form:fof]),
                                                       noun*[maj,person:~,particlename:~,orghead:~,orgend:~,locpost:~,locpre:~,eventmod:~,firstname:~,place:~,bus:~,orgmod:~,title:~],
                                                       noun[proper,person:~,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,firstname:~,place:~,bus:~, last,title:~].


// Noun starting with initial (or letter)

2> noun[mwe=+,proper=+,person=+] ->noun[let,maj,first], noun*[let,maj],
                                                      noun*[initial,maj],
                                                      noun*[maj,person:~,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,firstname:~,place:~,bus:~,title:~],
                                                      noun+[proper,person:~,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,firstname:~,place:~,bus:~,last,title:~].

 
2> noun[mwe=+,proper=+,person=+] -> noun[initial,first,maj],  noun*[initial,maj],
                                                      noun*[let,maj],
                                                      noun*[maj,toutmaj:~,person:~,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,firstname:~,place:~,bus:~],
                                                      noun[proper,person:~,toutmaj:~,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,firstname:~,place:~,bus:~, last,title:~].


2> noun[mwe=+,proper=+,person=+] -> noun[initial,first,maj],  noun*[initial,maj],
                                                      noun*[let,maj],
                                                      noun*[maj,toutmaj:~,person:~,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,firstname:~,place:~,bus:~],
                                                      noun[proper,person:~,toutmaj:~,particlename:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,firstname:~,place:~,last,title:~].



2> noun[mwe=+,proper=+,person=+] ->noun+[let,maj,first], 
                                                      noun*[initial,maj],
                                                      noun+[proper,particlename:~,person:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,firstname:~,place:~,bus:~],
                                                      (punct[comma:+]), 
                                                       noun[titlepost:+,last].


2> noun[mwe=+,proper=+,person=+] -> noun+[initial,maj,first], 
                                                      noun*[let,maj],
                                                      noun+[proper,particlename:~,person:~,orghead:~,orgmod:~,orgend:~,locpost:~,locpre:~,eventmod:~,firstname:~,place:~,bus:~],
                                                      (punct[comma:+]), 
                                                      noun[titlepost:+,last].


//Queen Elisabeth II 


2> noun[mwe=+,proper=+,person=+] -> noun[title:+,titlepost:~,first],
                                                       noun*[let,maj],
                                                       noun*[maj,initial,bus:~,person:~,title:~], 
                                                       noun+[firstname],
                                                       dig[rom,last].
//Elisabeth II
2> noun[mwe=+,proper=+,person=+] -> noun+[firstname,first],
                                                       noun*[let,maj],
                                                       noun*[maj,initial,bus:~,person:~], 
                                                       dig[rom,last].
//Queen Elisabeth 
2> noun[mwe=+,proper=+,person=+] -> noun[title:+,titlepost:~,first],
                                                       noun*[let,maj],
                                                       noun*[maj,initial,bus:~,person:~,title:~], 
                                                       noun*[firstname],
                                                       noun[firstname,last].


LPrules:
//to avoid herve gallaire herve gallaire
2> [firstname:+] <  [proper:+,firstname:~].



Sequence: 

// initial with firstname following not catched before

3> noun[mwe=+,proper=+,person=+] @= noun[initial,maj],  noun+[firstname:+] | ?[proper:~] |.

3> noun[mwe=+,proper=+,person=+] @= noun[initial,maj],  noun+[firstname:+] |  |.

3> noun[mwe=+,proper=+,person=+] @= noun[firstname:+], noun+[firstname:+].


// Elisabeth II of England 
4>  noun[mwe=+,proper=+,person=+] = noun[person:+], prep[form:fof];noun[particlename],   noun[place:+].

// professions and family links as context

4> noun[person:+,mwe:+,proper:+] @= | noun[prof:+,maj:~] |  noun[proper,toutmaj:~,bus:~,org:~] , noun[proper,toutmaj:~,celeb:~,orghead:~,orgend:~,orgmod:~,maj,locpost:~,particlename:~,locpre:~] .


4> noun[person:+,mwe:+,proper:+] @= | noun[famlink:+,maj:~] |  noun[proper,toutmaj:~,time:~] , noun[proper,toutmaj:~,celeb:~,orghead:~,orgend:~,orgmod:~,maj,locpost:~,particlename:~,locpre:~,time:~] .

//2> noun[person:+,mwe:+,famlink:+,proper:+] @= (noun+[title:+]),  noun[proper,toutmaj:~] , noun[proper,toutmaj:~,celeb:~] | noun[famlink:+] |.

//Proper particle Proper :

5>  noun[person:+,mwe:+,proper:+] @= |noun[orghead:~] | noun+[maj,orghead:~,orgmod:~,orgend:~], noun[particlename], noun+[maj,proper].

5>  noun[person:+,mwe:+,proper:+] @= noun[particlename], noun+[maj,proper] | noun[orghead:~] | .

//Romano Prodi

5> noun[person:+,mwe:+,proper:+] @= noun+[proper,orghead:~,orgend:~], noun[celeb]. 




// ********************************** PLACES *******************************************************************************
// Adresses 
// 111, Wisconsin Avenue NE , Washington DC  10001

6> noun[mwe:+,place:+,address:+] @= dig,  (punct[comma:+]),  noun+[proper,address:~], (dig[ord]), noun[locpost:+,address:+], (?[lemme:NE];?[lemme:SE];?[lemme:NW];?[lemme:SW]), (punct[comma:+]), noun[city:+], punct[comma:+], noun[usastate:+], (dig)  .

6> noun[mwe:+,place:+,address:+] @= dig,  (punct[comma:+]),  noun+[proper,address:~], (dig[ord]), noun[locpost:+,address:+], (?[lemme:NE];?[lemme:SE];?[lemme:NW];?[lemme:SW]), (punct[comma:+]), noun[city:+], (dig)  .

6> noun[mwe:+,place:+,address:+] @=   noun+[proper,address:~], (dig[ord]), noun[locpost:+,address:+], (?[lemme:NE];?[lemme:SE];?[lemme:NW];?[lemme:SW]), (punct[comma:+]), noun[city:+], punct[comma:+], noun[usastate:+], (dig)  .

6> noun[mwe:+,place:+,address:+] @=   noun+[proper,address:~], (dig[ord]), noun[locpost:+,address:+], (?[lemme:NE];?[lemme:SE];?[lemme:NW];?[lemme:SW]), (punct[comma:+]), noun[city:+], (dig).

6> noun[mwe:+,place:+,address:+] @= dig,  (punct[comma:+]),  noun+[proper,address:~], noun[locpost:+,address:+].

// The Russian village of Barenstburg

6>noun[proper:+,place:+,mwe:+]@=  (adj[country];nadj[country]), noun[locpost], prep[form:fof],  noun[place:+];noun[guess:+,propag=+].

6>noun[proper:+,place:+,mwe:+,city:+] @= |det[def], (?[adj:+,country:~]) , (adj[country];nadj[country]) , noun[lemme:city];noun[lemme:town];noun[lemme:island];noun[lemme:village],  prep[form:fof] | noun+[guess,propag=+].


//6>noun[proper:+,place:+,mwe:+] @= (adj[country];nadj[country]) , noun[lemme:city];noun[lemme:town];noun[lemme:island];noun[lemme:village],  prep[form:fof] , noun[place:+];noun[guess,propag=+].

// Federal Republic of Germany

//German Republic

6>  noun[proper:+,place:+,mwe:+,country:+]  @= nadj[country];adj[country], (nadj[maj];adj[maj]), noun[orgcountry].

6> noun[proper:+,country:+,place:+,mwe:+]  @= (nadj[maj,guess:~];adj[maj,guess:~]),  noun[orgcountry], prep[form:fof], noun[proper,country].

6> noun[proper:+,place:+,mwe:+]  @=  (nadj[maj,guess:~];adj[maj,guess:~]),  noun[orgcountry], prep[form:fof], noun[proper,place].

// Some modifiers like Greater London

6> noun [proper:+,city:+,place:+,mwe:+] @= adj[maj], noun[city].
                   
//Lower Saxony

6> noun[proper:+,place:+,mwe:+,features:!] @= ?[lemme:Lower];?[lemme:lower];?[lemme:upper];?[lemme:middle], noun[place:+,!features:!].


// Southern Africa, South of Andalusia
6> noun[proper:+,place:+,features:!,mwe:+] @=  ?[modloc:+],  noun[place:+,!features:!].

6> noun[proper:+,place:+,features:!,mwe:+] @=  ?[modloc:+], prep[form:fof], noun[place:+,!features:!].

3> noun[proper:+,place:+,city:+] @= noun[city:+,ambig=~], punct[comma:+], noun[usastate:+,city:~];noun[state:+,city:~].

//other cases : (?)
3> noun[proper:+,mwe:+,place:+,features:!] @= noun[place:+,!features:!,usastate:~,city:~,country:~], punct[comma:+], noun[usastate:+].

// Canari Islands; Grimsburry Castle

3> noun[place:+,mwe:+] @=  adj[maj];nadj[maj];noun[place] , noun[proper,firstname:~,month:~], (nadj;adj), noun[locpost:+].

3> noun[place:+,mwe:+] @=  adj[maj];nadj[maj];noun[place] , noun[maj,firstname:~,month:~], (nadj;adj),noun[locpost:+].

3> noun[place:+,mwe:+] @=   noun[proper,firstname:~,month:~];noun[maj,firstname:~,month:~] , (part),(nadj;adj), noun[locpost:+].


3> noun[place:+,mwe:+] @=   nadj[maj,cardpoint] ,  noun[locpost:+].

// Victoria Land ????
3> noun[place:+,mwe:+] @=   noun[maj,firstname,ambig], (nadj;adj),noun[locpost:+].


// Iberian Peninsula 
3> noun[place:+,org:!]  @= (nadj[modloc];adj[modloc];noun[lemme:"sub"]), (punct[form:fhyph]) , nadj[country:+];adj[country:+], noun[locpost:+];noun[country,!org:!];noun[contin,!org:!].

//Hui Sui Road : Several (2 for the moment ?) nouns/adj allowed when they are NOT places : previous rule for places


// Camp David ; Rio Grande
7>  noun[place:+] @=  noun[locpre:+];noun[lemme:River], noun[proper,orghead:~,orgend:~,orgmod:~] .

// Territory of the US.
7> noun[proper:+,place:+,mwe:+] @= noun[locpost:+], prep[form:fof], (det[def]),  noun[place];noun[place].

// TEST

8> noun[proper:+,place:+,mwe:+]  @= | prep[form:fbetween], (det[def]), noun[proper,place],  conj[coord], (det[def]) |  noun[maj,org:~].

8> noun[proper:+,place:+,mwe:+]  @= | prep[form:fbetween], (det[def])  | noun*[maj], noun[maj,org:~] | conj[coord], (det[def]), noun[proper,place] |.

8> noun[proper:+,place:+,mwe:+,bus:+,city:+]  @= noun[city] , punct[comma:+],  noun[country].


//London's Victoria Station


//5> noun[place:+,mwe:+] @= noun[country];noun[city], part, noun[proper,let:~,pl:~,firstname:~];adj[maj];nadj[maj], (noun[proper,let:~,pl:~];adj[maj];nadj[maj]),(noun[proper,let:~,pl:~,firstname:~];adj[maj];nadj[maj]),   noun[locpost:+].
9>  noun[proper:+,place:+,mwe:+,!bus,!org] @= noun[country];noun[city],  part, noun[place:+,city:~.country:~,!bus:!,!org:!].


// CPO POSTAL CODES 

9> dig[inpostcode=+] @= noun+[inpostcode:+]. 

10> dig @= dig, (punct[form:fhyph]),  dig;noun[lemme:"BT"] |noun[city]|.

Marker:

11> dig[postalcode=+], noun[city].


Tagging:

//when using context and in case of only one name to avoid a double noun tree

21> noun[maj:+,firstname:~,fam:~,person:~,guess:+]  %= |noun[lemme:town];noun[lemme:city], prep[form:fof] |  noun[maj:+,city:+,place:+,propag:+] .



21>  noun[proper:+,guess:+] %= | noun[lemme:resident], prep[form:fof] |  noun[proper:+,place:+,propag:+] .

21>  noun[proper,toutmaj:~,celeb:~,bus:~,org:~] %= | noun[prof:+,maj:~] | noun[person:+,mwe:+,propag:+,proper:+].

21>  noun[proper,time:~,toutmaj:~,celeb:~,misc:~,bus:~,org:~] %= | noun[famlink:+,maj:~] | noun[person:+,mwe:+,propag:+,proper:+].

21>  noun[proper,toutmaj:~,celeb:~,misc:~,bus:~,org:~] %= noun[person:+,mwe:+,propag:+,proper:+]  | noun[famlink:+,maj:~] |.

21>  noun[proper,toutmaj:~,celeb:~,bus:~,org:~] %= noun[person:+,propag:+,proper:+,lastname=+]  |  (punct[comma:+]) , noun[lemme:"et_al."] |.

21> noun[proper:+,guess:+] %=  |nadj[prepers:+]| noun[person:+,mwe:+,propag:+,proper:+].

22>  noun[proper:+,guess:+] %= |noun[lemme:town];noun[lemme:city], prep[form:fof] , noun[city:+] , punct[comma] | noun[proper:+,place:+,mwe:+,org:+,city:+,propag:+] |conj |.

23>  noun[proper:+,guess:+] %= |noun[lemme:town];noun[lemme:city], prep[form:fof] , (noun[city:+] , punct[comma]) , noun[city:+], conj | noun[proper:+,place:+,mwe:+,org:+,city:+,propag:+] .


//23 >  noun<proper:+> = | noun{noun[title:+],noun[proper:+]} , conj | noun[proper=+,person=+].






/////////////////////////////////////////////////////////////////////////
// ADDITIONS, by Salah

Sequence: 

// When a lastname occurs alone

40> NOUN[maj=+,proper=+,person=+] @= NOUN[proper:+,lastname:+,person].

// Corrections

// "Blanco Lezcano, Lisette" analysis is: 
// NP{ NOUN[lastname]{Blanco} NOUN[lastname]{Lezcano} , NOUN{Lisette} }
// need to put all the lastname parts under a SINGLE lastname node (NOUN)

Reshuffling:

50> NOUN#1[title:~,abr:~],NOUN#2,PUNCT#3[comma],NOUN#4[fstnameinvert] =  NOUN[lastname=+]{#1,#2},#3,#4 .

// 50> NOUN#1[title:~,abr:~],NOUN#2,PUNCT#3[comma],NOUN#4[fstnameinvert] = NOUN[lastname=+]{#1,#2},#3,#4 .


// "van Assem" should be under a unique NOUN node
//50> NOUN#1[particlename:+],NOUN#2[maj,proper] = //NOUN[maj=+,proper=+,lastname=+]{#1,#2}.

// "Ramanathan V. Guha" gives a NOUN only for "V. Guha"


