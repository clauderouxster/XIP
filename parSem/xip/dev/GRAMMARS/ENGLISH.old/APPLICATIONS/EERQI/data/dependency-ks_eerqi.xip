//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2009 Xerox Corporation.  All Rights Reserved.
//!
//! --- CONTENTS ---
//!   Project    : English XIP grammar for EERQI
//!   filename   : dependency-impsent_eerqi.xip
//!   Date       : 2009
//!   Author     : Agnes Sandor
//!  
//!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



////////////////////////Before updating the grammar this file needs to be checked!!!!!!!!!!!!!!!

DependencyRules:



if ( ^VDOMAIN(?,?))
	~.

if ( ^HEAD(#1,#2) )
	~.

if ( ^HEAD2(#1,#2) )
	~.
/
// transferred to add-feature_eerqi.xip

// create a dependency between a the negative word and a subject complement

if ( MOD(#1,#2[form:fnot]) & NUCL(#1,#3) )
	MOD[negative=+](#3,#2).


//IV{not primarily to generalize}

| IV{#1[lemme:not], ?*, #2[last]} |
  DEP[negative=+](#2,#1).

| NFV{#1[lemme:not], ?*, #2[last]} |
  DEP[negative=+](#2,#1).

\


//Firstly, the issue is of general importance, and the fact that attempts are commonly made in corporate insolvencies to rely on this form of liability, makes a proper understanding of the second limb important, lest its application prove unjust.
//ARGUMENT(#1is,#2importance)
//ARGUMENT(#1is,#3issue)
//PREPD(#2importance,#4of)

if ( ARGUMENT(#1,#2) & ARGUMENT(#1,#3) & PREPD(#2,#4[lemme:of]) & ~$1(#3,#2) )
   DEP(#3,#2).

////////////////////////////////////////////////////////////
//KSWDEP
////////////////////////////////////////////////////////////


/////////////////////

// has not previously been demonstrated

| #1[ksw,adv], #2[form:fbe], #3[ksw] |
	MOD(#1,#3).



| #1[ksw],#2[ksw] |
//if ( ~$1(#1,#2) | ~$2(#2,#1) | ~$3(#1,#3[ksw]) | ~$4(#3[ksw],#1) | | ~$5(#2,#3[ksw]) | ~$4(#3[ksw],#2) )
if ( ~$1(#1,#2) | ~$2(#2,#1) )
	LIXO(#1,#2).

if (^LIXO(#1,#2) & $3(#1,#3[ksw]) | $4(#3[ksw],#1) | $5(#2,#3[ksw]) | $4(#3[ksw],#2) )
	~.

if ( ^LIXO(#1,#2))
	MOD(#1,#2).

| #1noun{#2,#3} |
if ( ^MOD(#3,#2) | ^MOD(#2,#3) )
   ~.

//critical to furthering our understanding
//MOD_SUBCAT_GRPR(critical,furthering)
//OBJ-N(furthering,understanding)

if ( MOD[subcat](#1[ksw],#2) & OBJ-N(#2,#3[ksw]) & ~MOD(#1,#3) )
   MOD(#1,#3).

// basic dependency 1 

if ( $1(#1[ksw],#2[ksw]) )
        $1[ksw=+](#1,#2).

if ( ^$1[ksw](#1,#2) & $2[ksw](#2,#1) )
   $1[ksw=~](#1,#2).
   
if ( ^$1[ksw](#1,#2) & $2[ksw](#1,#2) )
   $1[ksw=~](#1,#2).

/////////////////////////
/////////////////////////
////////////////////////




// wscope: if the word having this feature appears with a word that does not have the feature "scope", the dependency is removed. However, if it also appears with a contr word, the ksw is kept

if ( ^$1[ksw](#1[wscope],#2[scope]) )
	$1[wscope=+](#1,#2).

if ( ^$1[ksw](#1[scope],#2[wscope]) )
	$1[wscope=+](#1,#2).


if ( $1[ksw,wscope](#1[wscope],#2[scope]) & ^$2[ksw](#1[wscope],#3[contr] ))
	$2[wscope=+](#1,#3).

if ( $1[ksw,wscope](#1[wscope],#2[scope]) & ^$2[ksw](#3[contr],#1[wscope] ))
	$2[wscope=+](#3,#1).

if ( $1[ksw,wscope](#2[scope],#1[wscope]) & ^$2[ksw](#1[wscope],#3[contr] ))
	$2[wscope=+](#1,#3).

if ( $1[ksw,wscope](#2[scope],#1[wscope]) & ^$2[ksw](#3[contr],#1[wscope] ))
	$2[wscope=+](#3,#1).


| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~,mentsco=~] |
if ( ~$1[ksw,wscope](#1,#2) | ~$1[ksw,wscope](#2,#1) )
   ~.

/

| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~,mentsco=~] |
if ( ^$1[ksw,wscope:~](#1[wscope],#2) )
	$1[ksw=~](#1,#2).

| #2[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~,mentsco=~] |
if ( ^$1[ksw,wscope:~](#1,#2[wscope]) )
	$1[ksw=~](#1,#2).

if ( $1[wscope](#1[wscope],#2) & ^$2(#3[contr],#1) )
   $2[contr=+,ksw=+](#3,#1).

if ( $1[wscope](#1[wscope],#2) & ^$2(#1,#3[contr]) )
   $2[contr=+,ksw=+](#1,#3).

if ( $1[wscope](#1,#2[wscope]) & ^$2(#3[contr],#2) )
   $2[contr=+,ksw=+](#3,#2).

if ( $1[wscope](#1,#2[wscope]) & ^$2(#2,#3[contr]) )
   $2[contr=+,ksw=+](#2,#3).

\

if ( ^$1[wscope](#1,#2) )
	$1[wscope=~](#1,#2).

// wwidescope: if the word having this feature appears with a word that does not have the feature "widescope", the dependency is removed

if ( ^$1[ksw](#1[wwidescope],#2[widescope]) )
	$1[wwidescope=+](#1,#2).

if ( ^$1[ksw](#1[widescope],#2[wwidescope]) )
	$1[wwidescope=+](#1,#2).

if ( $1[ksw,wwidescope](#1[wwidescope],#2[widescope]) & ^$2[ksw](#1[wwidescope],#3[contr] ))
	$2[wwidescope=+](#1,#3).

if ( $1[ksw,wwidescope](#1[wwidescope],#2[widescope]) & ^$2[ksw](#3[contr],#1[wwidescope] ))
	$2[wwidescope=+](#3,#1).

if ( $1[ksw,wwidescope](#1[widescope],#2[wwidescope]) & ^$2[ksw](#3[contr],#2[wwidescope] ))
	$2[wwidescope=+](#3,#2).

if ( $1[ksw,wwidescope](#1[widescope],#2[wwidescope]) & ^$2[ksw](#2[wwidescope],#3[contr] ))
	$2[wwidescope=+](#2,#3).


| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~,mentsco=~] |
if ( ~$1[ksw,wscope](#1,#2) | ~$1[ksw,wscope](#2,#1) )
   ~.



/

| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw,wwidescope:~](#1[wwidescope],#2)  )
	~.

| #2[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw,wwidescope:~](#1,#2[wwidescope]) )
	~.


if ( $1[wwidescope](#1[wwidescope],#2) & ^$2(#3[contr],#1) )
   $2[contr=+,ksw=+](#3,#1).

if ( $1[wwidescope](#1[wwidescope],#2) & ^$2(#1,#3[contr]) )
   $2[contr=+,ksw=+](#1,#3).

if ( $1[wwidescope](#1,#2[wwidescope]) & ^$2(#3[contr],#2) )
   $2[contr=+,ksw=+](#3,#2).

if ( $1[wwidescope](#1,#2[wwidescope]) & ^$2(#2,#3[contr]) )
   $2[contr=+,ksw=+](#2,#3).
\

if ( ^$1[wwidescope](#1,#2) )
	$1[wwidescope=~](#1,#2).



// wtime

if ( ^$1[ksw](#1[wtime],#2[timefact,verb:~]) ) 
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[timefact,verb:~],#2[wtime]) )
	$1[ksw=+,weak=+](#1,#2) .

| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw,weak:~](#1[wtime],#2 ) )
	~ .

| #2[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw,weak:~](#1,#2[wtime]) )
	~ .

//wcontr

| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw](#1[wcontr],#2[contr:~]) )
     	$1[ksw=~](#1,#2).

| #2[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw](#1[contr:~],#2[wcontr]) )
	$1[ksw=~](#1,#2).


| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw](#1[wcontr],#2[contr,noun:~]) )
	$1[ksw=~](#1,#2).

if ( ^$1[ksw](#1[contr,noun:~],#2[wcontr]) )
	$1[ksw=+](#1,#2).

| #2[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1(#1[wcontr],#2[contr,noun,noweak]) )
	$1[ksw=+](#1,#2).

if ( ^$1[ksw](#1[contr,noun,noweak],#2[wcontr]) )
	$1[ksw=+](#1,#2).


// wneg: positive words that make up a contr dependency when negated

if ( $1(#1,#2[form:fnot,toutmaj:~]) & $2(#1,#3[wneg]) )
	KSWDEP[weak=+](#2,#3).


// wment


if ( ^$1[ksw](#1[wment],#2[mental]) )
	$1[wment=+](#1,#2).

if ( ^$1[ksw](#1[mental],#2[wment]) )
	$1[wment=+](#1,#2).

if ( $1[ksw,wment](#1[wment],#2[mental]) & ^$2(#1[wment],#3[contr] ))
	$2[wment=+](#1,#3).

| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw,wment:~](#1[wment],#2) )
	$1[ksw=~](#1,#2).

| #2[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw,wment:~](#1,#2[wment]) )
	$1[ksw=~](#1,#2).

if ( $1[wment](#1[wment],#2) & ^$2(#3[contr],#1) )
   $2[contr=+,ksw=+](#3,#1).

if ( $1[wment](#1[wment],#2) & ^$2(#1,#3[contr]) )
   $2[contr=+,ksw=+](#1,#3).

if ( $1[wment](#1,#2[wment]) & ^$2(#3[contr],#2) )
   $2[contr=+,ksw=+](#3,#2).

if ( $1[wment](#1,#2[wment]) & ^$2(#2,#3[contr]) )
   $2[contr=+,ksw=+](#2,#3).

if ( ^$1[wment](#1,#2) )
	$1[wment=~](#1,#2).


// wknow

| #1[ksw=~] |
if ( ^$1[ksw](#1[wknow],#2[know:~]) )
	~ .

| #2[ksw=~] |
if ( ^$1[ksw](#1[know:~],#2[wknow]) )
	~ 

// wmentsco

| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw](#1[wmentsco,deict:~],#2[mentsco:~]) )
	~ .

| #2[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw](#1[mentsco:~],#2[wmentsco,deict:~]) )
	~ .

if ( ^$1[ksw](#1[wmentsco],#2[mentsco]) )
	$1[wmentsco=+](#1,#2).

if ( ^$1[ksw](#1[mentsco],#2[wmentsco]) )
	$1[wmentsco=+](#1,#2).

if ( $1[ksw,wmentsco](#1[wmentsco],#2[mentsco]) & ^$2(#1[wmentsco],#3[contr] ))
	$2[wmentsco=+](#1,#3).

| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw,wmentsco:~](#1[wmentsco],#2) )
	$1[ksw=~](#1,#2).

| #2[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw,wmentsco:~](#1,#2[wmentsco]) )
	$1[ksw=~](#1,#2).

if ( $1[wmentsco](#1[wmentsco],#2) & ^$2(#3[contr],#1) )
   $2[contr=+,ksw=+](#3,#1).

if ( $1[wmentsco](#1[wmentsco],#2) & ^$2(#1,#3[contr]) )
   $2[contr=+,ksw=+](#1,#3).

if ( $1[wmentsco](#1,#2[wmentsco]) & ^$2(#3[contr],#2) )
   $2[contr=+,ksw=+](#3,#2).

if ( $1[wmentsco](#1,#2[wmentsco]) & ^$2(#2,#3[contr]) )
   $2[contr=+,ksw=+](#2,#3).

if ( ^$1[wmentsco](#1,#2) )
	$1[wmentsco=~](#1,#2).

// wmentscopubl

| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw](#1[wmentscopubl,deict:~],#2[mentscopubl:~]) )
	~ .

| #2[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw](#1[mentscopubl:~],#2[wmentscopubl,deict:~]) )
	~ .

if ( ^$1[ksw](#1[wmentscopubl],#2[mentscopubl]) )
	$1[wmentscopubl=+](#1,#2).

if ( ^$1[ksw](#1[mentscopubl],#2[wmentscopubl]) )
	$1[wmentscopubl=+](#1,#2).

if ( $1[ksw,wmentscopubl](#1[wmentscopubl],#2[mentscopubl]) & ^$2(#1[wmentscopubl],#3[contr] ))
	$2[wmentscopubl=+](#1,#3).

| #1[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw,wmentscopubl:~](#1[wmentscopubl],#2) )
	$1[ksw=~](#1,#2).

| #2[ksw=~,attitude=~,change=~,contr=~,mental=~,new=~,scope=~,timefact=~] |
if ( ^$1[ksw,wmentscopubl:~](#1,#2[wmentscopubl]) )
	$1[ksw=~](#1,#2).

if ( $1[wmentscopubl](#1[wmentscopubl],#2) & ^$2(#3[contr],#1) )
   $2[contr=+,ksw=+](#3,#1).

if ( $1[wmentscopubl](#1[wmentscopubl],#2) & ^$2(#1,#3[contr]) )
   $2[contr=+,ksw=+](#1,#3).

if ( $1[wmentscopubl](#1,#2[wmentscopubl]) & ^$2(#3[contr],#2) )
   $2[contr=+,ksw=+](#3,#2).

if ( $1[wmentscopubl](#1,#2[wmentscopubl]) & ^$2(#2,#3[contr]) )
   $2[contr=+,ksw=+](#2,#3).

if ( ^$1[wmentscopubl](#1,#2) )
	$1[wmentscopubl=~](#1,#2).

//////////////////

//////////////////
// 2 keywords that are not potential kswdeps
//////////////////


// Basic dependency 2: Words that cannot build unary dependencies are possible KSWDEPs when in relationship with importance and attitude words. Importance words can also make a potential kswdep with scope words
// weak added 28.1.10.

| #2[ksw=+] |
if ( ^$1(#1[nounary],#2[importance]) )
        $1[ksw=+,weak=+](#1,#2).

| #2[ksw=+] |
if ( ^$1(#1[nounary],#2[attitude]) )
        $1[ksw=+,weak=+](#1,#2).

| #2[ksw=+] |
if ( ^$1(#1[mentsco],#2[importance]) )
        $1[ksw=+,weak=+](#1,#2).

| #2[ksw=+] |
if ( ^$1(#1[noun,know],#2[importance]) )
        $1[ksw=+,weak=+](#1,#2).

| #2[ksw=+] |
if ( ^$1(#1[contr],#2[importance]) )
        $1[ksw=+,weak=+](#1,#2).

| #1[ksw=+] |
if ( ^$1(#1[importance],#2[contr]) )
        $1[ksw=+,weak=+](#1,#2).

if ( ^$1(#1[contr],#2[deict]) )
        $1[ksw=+,weak=+](#1,#2).

if ( ^$1(#1[deict],#2[contr]) )
        $1[ksw=+,weak=+](#1,#2).


//////////

| #1[ksw=+] |
if ( ^$1(#1[importance],#2[nounary]) )
        $1[ksw=+,weak=+](#1,#2).

| #1[ksw=+] |
if ( ^$1(#1[attitude],#2[nounary]) )
        $1[ksw=+,weak=+](#1,#2).

| #1[ksw=+] |
if ( ^$1(#1[importance],#2[mentsco]) )
        $1[ksw=+,weak=+](#1,#2).

| #1[ksw=+] |
if ( ^$1(#1[importance],#2[noun,know]) )
        $1[ksw=+,weak=+](#1,#2).


///////// eliminate duplicates

if ( ^$1[ksw,weak](#1,#2) & $2[ksw,weak](#1,#2) )
   $1[ksw=~,weak=~](#1,#2).

if ( ^$1[ksw,weak](#1,#2) & $2[ksw,weak](#2,#1) )
   $1[ksw=~,weak=~](#1,#2).



//////////////////
// dependency types that don't allow the feature ksw
//////////////////

// AJCOORD

if ( ^AJCOORD[ksw](#1,#2) )
	~.

// NCOORD

if ( ^NCOORD[ksw](#1,#2) )
	~.

// VCOORD

if ( ^VCOORD[ksw](#1,#2) )
	~.

//////////////////

// indirect dependencies

// "it has been done" the parser links "it has" and "has been done"


//if ( SUBJ(#1,#2[ksw]) & OBJ(#1,#3[ksw]) )
//	OBJ[ksw=+](#2,#3).

if ( SUBJ(#1,#2[ksw]) & NUCL[subjcompl:~](#1,#3[ksw]) & ~KSWDEP(#2,#3) )
	SUBJ[ksw=+](#2,#3).

//COORD
//COORD(and,issues)
//COORD(and,themes)
//QUALIF_KSW(themes,critical)

if ( COORD(#1,#2[ksw]) & COORD(#1,#3[ksw]) & $(#3[ksw],#4[ksw]) & ~KSWDEP(#2,#4) & #2~:#4 )
  KSWDEP(#2,#4).

if ( COORD(#1,#2[ksw]) & COORD(#1,#3[ksw]) & $(#4[ksw],#3[ksw]) & ~KSWDEP(#4,#2) & #2~:#4 )
  KSWDEP(#4,#2).


//"In contrast to what was generally believed"

if ( $1(#1[mental],#2[form:fwhat]) & PREPD(#2,#3[contr]) )
	CONTR[ksw=+](#3,#1).

// dependency with the same lemma is not a potential KSWDEP

if ( ^$1(#1,#2) & #1[lemme]::#2[lemme] )
//	$1[ksw=~](#1,#2).
	~.



////////////////////////
//idiosyncrasies
////////////////////////


// certain words (wseem) when they are in a dependency with "seem", are KSWDEPs

if ( $1(#1[form_ksw:fseem],#2[wseem]) )
	KSWDEP(#1,#2).

if ( $1(#1[wseem],#2[form_ksw:fseem]) )
	KSWDEP(#1,#2).

// first time
// This rule has been transferred to the compounds

//if ( QUANTD(#1[form_ksw:ftime],#2[change,form:fone]) )
//	QUANTD[ksw=+](#1,#2).

// first report

if ( QUANTD(#1[publ,noun,notfirsttime:~],#2[change,form:fone]) )
	QUANTD[ksw=+](#1,#2).

//hitherto, debate, questions

| #1[ksksw] |
	KSWDEP(#1).

// Restrictions on the cooccurence



// the challenge was examined

if ( ^$1(#1[form_ksw:fchallenge],#2[methodology]) | ^$1(#1[methodology],#2[form_ksw:fchallenge]) )
	$1[ksw=~](#1,#2).




// "first" + verb

if ( ^$1[ksw](#1[verb,form_ksw:~fevidence],#2[form_ksw:ffirst]) )
	~.

if ( ^$1[ksw](#1[verb,form_ksw:~fevidence],#2[form:fone,ord]) )
	~.

if ( ^$1[ksw](#1[form:fone,ord],#2[verb,form_ksw:~fevidence]) )
	~.

// "recognition" is very ambiguous. It is accepepted only in a dependency with a word that has the feature "incr" or "timefact"

if ( ^$1[ksw](#1[form_ksw:frecognition],#2) | ^$1[ksw](#1,#2[form_ksw:frecognition]) )
	~.


if ( ^$1(#1[form_ksw:frecognition],#2[incr]) | ^$1(#1[incr],#2[form_ksw:frecognition]) )
	$1[ksw=+](#1,#2).

if ( ^$1(#1[form_ksw:frecognition],#2[timefact]) | ^$1(#1[timefact],#2[form_ksw:frecognition]) )
	$1[ksw=+](#1,#2).

//"accumulate" is a "change" word, but it can only be coupled with words that can "grow":

if ( ^$1[ksw](#1[nogrow],#2[wnogrow]) )
	~.

if ( ^$1[ksw](#1[wnogrow],#2[nogrow]) )
	~.





//////////////////

// Unary dependencies: for important words for which either no dependency is calculated in the general grammar or are in relationship with a non-marked word

| #1[contr,form:~fnot,toutmaj:~,form:~fno,form_ksw:~flittle,wscope:~,nounary:~] |
if ( ~$1[ksw](#1[contr,form:~fnot,toutmaj:~,form:~fno,form_ksw:~flittle],?) & ~$2[ksw](?,#1[contr,form:~fnot,toutmaj:~,form:~fno]) )
	MAIN[ksw=+,weak=+](#1).
	
//| #1[attitude,nounary:~,last] |
//if ( ~$1[ksw](#1[attitude],?) & ~$2[ksw](?,#1[attitude]) )
//	MAIN[ksw=+,weak=+](#1).

| #1[form:fwhile,contr,func:~,wment:~] |
	MAIN[ksw=+,weak=+](#1).
/
// challenge when it is vprog

| #1[form_ksw:fchallenge,vprog,last] |
if ( ~$1[ksw](#1[form_ksw:fchallenge,vprog],?) & ~$2[ksw](?,#1[form_ksw:fchallenge,vprog]) )
	MAIN[ksw=+,weak=+](#1).
\
| #1{ ?* }|
if ( ^MAIN[ksw,weak](#1) )
   ~.

// exceptions wscope

if ( ^$1[ksw](#1[wscope]) )
	~ .

// exceptions wment

if ( ^$1[ksw](#1[wment]) )
	~ .

// If a word consituting a unary dependency is an argument in a dependency, the unary dependency is deleted

if (^MAIN[ksw,weak](#1) & $1[ksw](#1,#2) )
	~.

if (^MAIN[ksw,weak](#2) & $1[ksw](#1,#2) )
	~.

if ( ^MAIN(#1) & HEAD(?,#1) )
   ~.



// If a sentence just contains a dependency with 1 importance argument and one uanry dependency, it is not a potential weak kswdep

if ( ^$1[ksw](#1[importance,ksw:~],#2[contr:~]) & $2[ksw](#3) & ~$3[ksw](#4[importance:~],#5) )
	$1[ksw=~](#1,#2).

if ( ^$1[ksw](#1[contr:~],#2[importance,ksw:~]) & $2[ksw](#3) & ~$3[ksw](#4,#5[importance:~]) )
	$1[ksw=~](#1,#2).

if ( ^$1[ksw](#1[importance,ksw:~],#2[contr,func]) & $2[ksw](#3) & ~$3[ksw](#4[importance:~],#5) )
	$1[ksw=~](#1,#2).

if ( ^$1[ksw](#1[contr,func],#2[importance,ksw:~]) & $2[ksw](#3) & ~$3[ksw](#4,#5[importance:~]) )
	$1[ksw=~](#1,#2).

// an administrator must know what - if the contr word is an auxiliary, the verb must have a mentsco dependency

if ( ^NUCL[ksw](#1,#2) & ~$1(#2,#3[mentsco]) )
   NUCL[ksw=~](#1,#2).

////////////////////

// weak KSWDEP

// just "possibility"

if ( ^$1[ksw](#1[possibility],#2) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1,#2[possibility]) )
	$1[ksw=+,weak=+](#1,#2) .

// dependency with arguments of the same type

if ( ^$1[ksw](#1[scope],#2[scope]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^MOD[ksw,weak](#1[scope],#2[scope]) )
   MOD[ksw=~,weak=~](#1,#2).
	
if ( ^QUALIF[ksw,weak](#1[scope],#2[scope]) )
   QUALIF[ksw=~,weak=~](#1,#2).
	
if ( ^$1[ksw](#1[timefact],#2[timefact]) )
	$1[ksw=+,weak=+](#1,#2) .
	
if ( ^$1[ksw](#1[change],#2[change]) )
	$1[ksw=+,weak=+](#1,#2) .
	
if ( ^$1[ksw](#1[mental],#2[mental]) )
	$1[ksw=+,weak=+](#1,#2) .
	
if ( ^$1[ksw](#1[mental],#2[mental]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[weak](#1[deict:~],#2[contr]) | ^$1[weak](#1[contr],#2[deict:~]) )
   $1[weak=~](#1,#2) .
  
	
if ( ^$1[ksw](#1[contr,mental:~,change:~,know:~],#2[contr,mental:~,change:~,know:~]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[contr],#2[importance]) | ^$1[ksw](#1[importance],#2[contr]) )
	$1[weak=+](#1,#2) .

if ( ^$1[ksw](#1[contr],#2[attitude]) | ^$1[ksw](#1[attitude],#2[contr]) )
	$1[weak=+](#1,#2) .




// subject dependencies with arguments of the same kind are not potential KSWDEPs


if ( ^SUBJ[ksw,weak](#1[scope],#2[scope]) )
	SUBJ[ksw=~,weak=~](#1,#2) .
	
if ( ^SUBJ[ksw,weak](#1[timefact],#2[timefact]) )
	SUBJ[ksw=~,weak=~](#1,#2) .
	
if ( ^SUBJ[ksw,weak](#1[change],#2[change]) )
	SUBJ[ksw=~,weak=~](#1,#2) .
	
if ( ^SUBJ[ksw,weak](#1[mental],#2[mental]) )
	SUBJ[ksw=~,weak=~](#1,#2) .
	
if ( ^SUBJ[ksw,weak](#1[contr],#2[contr]) )
	SUBJ[ksw=~,weak=~](#1,#2) .

if ( ^SUBJATTR[ksw,weak](#1[scope],#2[scope]) )
	SUBJATTR[ksw=~,weak=~](#1,#2) .
	
if ( ^SUBJATTR[ksw,weak](#1[timefact],#2[timefact]) )
	SUBJATTR[ksw=~,weak=~](#1,#2) .
	
if ( ^SUBJATTR[ksw,weak](#1[change],#2[change]) )
	SUBJATTR[ksw=~,weak=~](#1,#2) .
	
if ( ^SUBJATTR[ksw,weak](#1[mental],#2[mental]) )
	SUBJATTR[ksw=~,weak=~](#1,#2) .

if ( ^SUBJATTR[ksw,weak](#1[contr],#2[contr]) )
	SUBJATTR[ksw=~,weak=~](#1,#2) .

// certain couples of dependencies

if ( ^$1[ksw](#1[mental],#2[scope]) )
	$1[ksw=+,weak=+,mentsco=+](#1,#2) .

if ( ^$1[ksw](#1[scope],#2[mental]) )
	$1[ksw=+,weak=+,mentsco=+](#1,#2) .

if ( ^$1[ksw](#1[mental],#2[publ]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[publ],#2[mental]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[mentsco,weak](#1[contr],#2) )
   $1[mentsco=~,weak=~](#1,#2).

if ( ^$1[mentsco,weak](#1,#2[contr]) )
   $1[mentsco=~,weak=~](#1,#2).



if ( ^$1[ksw](#1[change],#2[timefact]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[timefact],#2[change]) )
	$1[ksw=+,weak=+](#1,#2) .

//if ( ^$1[ksw](#1[scope],#2[timefact]) )
//	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[timefact],#2[scope]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[scope],#2[timefact]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[timefact],#2[mental]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[mental],#2[timefact]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[timefact],#2[publ]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[publ],#2[timefact]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[contr,noun:~,mental:~],#2[timefact]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[timefact],#2[contr,mental:~,noun:~]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[timefact,adj],#2[attitude]) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1[mental,know,contr:~],#2[question,contr]) || ^$1(#1[question,contr],#2[mental,know,contr:~]) )
	$1[ksw=+,weak=+](#1,#2) .

// specweak: no evidence/role

if ( ^$1[ksw](#1[specweak],#2[form:fno,toutmaj:~]) )
	$1[ksw=+,weak=+](#1,#2) .

// "recent results may"

if ( ^$1[ksw](#1[possibility],#2[scope]) & $2[ksw](#2[scope],#3[timefact]) )
	$1[weak=+](#1,#2).

if ( $1[ksw](#1[possibility],#2[scope]) & ^$2[ksw](#2[scope],#3[timefact]) )
	$2[weak=+](#2,#3).

//(may_KSW:+_MENTSCOPOSS:+_POSSIBILITY:+,results_KSW:+_MENTSCOPOSS:+_MENTSCOTIME:+_MENTSCO:+_SCOPE:+)
//(results_KSW:+_MENTSCOPOSS:+_MENTSCOTIME:+_MENTSCO:+_SCOPE:+,Recent_KSW:+_MENTSCOTIME:+_TIMEFACT:+)


// "no contradiction" - not a KSWDEP, and the other dependencies with "contradiction" don't count either

| ?{#1[contr,form:fno,toutmaj:~],?*,#2[contr,noun]} |
if ( ^$1[ksw](?,#2) )
	~ .

| ?{#1[contr,form:fno,toutmaj:~],?*,#2[contr,noun]} |
if ( ^$1[ksw](#2,?) )
	~ .

// if one argument of the dependency has the feature "weak", the dependency becomes weak

if ( ^$1[ksw](#1[weak],#2) )
	$1[ksw=+,weak=+](#1,#2) .

if ( ^$1[ksw](#1,#2[weak]) )
	$1[ksw=+,weak=+](#1,#2) .

// exception: amazing discovery

if ( ^$1[ksw,weak](#1[attitude],#2[widescope]) | ^$1[weak](#1[widescope],#2[attitude]) )
	$1[ksw=+,weak=~](#1,#2) .
	

// if a sentence contains just 1 negation with "not", the dependency is weak

if ( ^$1[ksw](#1,#2[form:fnot,toutmaj:~]) )
	$1[ksw=+,weak=+](#1,#2) .



//////////////////////////////
// noweak
////////////////////////////

// If an argument of a weak dependency has the feature "noweak", the 
// dependency is not weak any more. If 1 of the arguments of a KSWDEP has the feature noweak, and the other argument is a possibility, the dependency is still weak.


if ( ^$1[weak](#1[noweak],#2[possibility:~]) | ^$1[weak](#1[possibility:~],#2[noweak]) )
	$1[weak=~](#1,#2).





/////////////////////////////////////
// Marking KSWDEP's
/////////////////////////////////////



// If besides a weak dependency, a sentence just contains a dependency
// whose only argument has the feature "attitude", both dependencies
// will be KSWDEPs, and get the feature "attitude"

if ( $1[weak](#1) & ^$2(#2[attitude]) & ~$1[ksw,weak:~](#3,#4))
	$2[attitude=+,weak=~](#2).

if ( $1[weak](#1) & ^$2(#2[attitude]) & ~$1[ksw,weak:~](#3))
	$2[attitude=+,weak=~](#2).

if ( ^$1[weak](#1) & $2(#2[attitude]) & ~$1[ksw,weak:~](#3,#4) )
	$1[attitude=+,weak=~](#1).

if ( ^$1[weak](#1) & $2(#2[attitude]) & ~$1[ksw,weak:~](#3) )
	$1[attitude=+,weak=~](#1).

if ( $1[weak](#1,#2) & ^$2(#3[attitude]) & ~$1[ksw,weak:~](#4,#5) )
	$2[attitude=+,weak=~](#3).

if ( $1[weak](#1,#2) & ^$2(#3[attitude]) & ~$1[ksw,weak:~](#4) )
	$2[attitude=+,weak=~](#3).

if ( ^$1[weak](#1,#2) & $2(#3[attitude]) & ~$1[ksw,weak:~](#4,#5) )
	$1[attitude=+,weak=~](#1,#2).

if ( ^$1[weak](#1,#2) & $2(#3[attitude]) & ~$1[ksw,weak:~](#4) )
	$1[attitude=+,weak=~](#1,#2).

if ( $1[attitude](#1) )
	KSWDEP[attitude=+](#1).

if ( $1[attitude](#1,#2) )
	KSWDEP[attitude=+](#1,#2).

//if ( ^KSWDEP[attitude](#1) & $1[attitude:~,ksw](#2) )
//	~.

//if ( ^KSWDEP[attitude](#1) & $1[attitude:~,ksw](#2,#3) )
//	~.

//if ( ^KSWDEP[attitude](#1,#2) & $1[attitude:~,ksw](#3) )
//	~.

//if ( ^KSWDEP[attitude](#1,#2) & $1[attitude:~,ksw](#3,#4) )
//	~.

//We have identified in recent years an unusual number of reports that consumers do not really care about the ethical policies of businesses.
//MOD_PRE(number of reports_KSW:+,unusual_KSW:+)

if ( $1(#1[mentsco],#2[surprise]) )
    KSWDEP[surprise=+](#1,#2).

if ( $1(#1[surprise],#2[mentsco]) )
    KSWDEP[surprise=+](#1,#2).



// if 2 importance words are syntactic relationship, the dependency gets the feature attitude

if ( $1(#1[importance],#2[importance]) )
	KSWDEP[attitude=+](#1,#2).


// if the sentence contains other ksw-dependencies besides a weak one, the sentence is selected

//a) if the sentence contains a non-weak ksw dependency, the sentence is selected

if ($1[ksw,weak:~](#1,#2) & ~KSWDEP(#1,#2) )
	KSWDEP(#1,#2).

if (^$1[ksw,weak](#1,#2) & KSWDEP(#3,#4) & ~KSWDEP(#1,#2) )
	KSWDEP[weak=~,ksw=~](#1,#2).

if (^$1[ksw,weak](#1) & KSWDEP(#3,#4) & #1~:#3 & #1~:#4 & ~KSWDEP(#1) )
	KSWDEP[weak=~,ksw=~](#1).

if (^$1[ksw,weak](#1,#2) & KSWDEP(#3) & ~KSWDEP(#1,#2) )
	KSWDEP[weak=~,ksw=~](#1,#2).

if (^$1[ksw,weak](#1) & KSWDEP(#2) & ~KSWDEP(#1) )
	KSWDEP[weak=~,ksw=~](#1).


// b) if the sentence contains several weak dependencies, the sentence is selected

/
if (~KSWDEP(#1,#2) & $1[ksw,weak](#1,#2) & $2[ksw,weak](#3,#4) &  (#1 < #3 | #3 < #1 | #2 < #4 | #4 < #2 ) & ( #1~:#4 & #2~:#3 & #1~:#3 ) )
	KSWDEP(#1,#2).

if (~KSWDEP(#3,#4) & $1[ksw,weak](#1,#2) & $2[ksw,weak](#3,#4) &  (#1 < #3 | #3 < #1 | #2 < #4 | #4 < #2) & ( #1~:#4 & #2~:#3 & #1~:#3 ) )
	KSWDEP(#3,#4).
\


if (~KSWDEP(#1,#2) & $1[ksw,weak](#1,#2) & $2[ksw,weak](#3,#4) )
	KSWDEP(#1,#2).

if (~KSWDEP(#3,#4) & $1[ksw,weak](#1,#2) & $2[ksw,weak](#3,#4) )
	KSWDEP(#3,#4).

if (~KSWDEP(#1,#2) & $1[ksw,weak](#1,#2) & $2[ksw,weak](#3) & (#1<#3 | #3<#1 | #2<#3 | #3<#2 ))
	KSWDEP(#1,#2).

if (~KSWDEP(#3) & $1[ksw,weak](#1,#2) & $2[ksw,weak](#3) & (#1<#3 | #3<#1 | #2<#3 | #3<#2 ) )
	KSWDEP(#3).

if (~KSWDEP(#1) & $1[ksw,weak](#1) & $2[ksw,weak](#2) & (#1<#2 | #2<#1) )
	KSWDEP(#1).

if (~KSWDEP(#2) & $1[ksw,weak](#1) & $2[ksw,weak](#2) & (#1<#2 | #2<#1) )
	KSWDEP(#2).


/////////////////////////////////////

// if the sentence contains KSWDEP's that only contain "mental" and "scope" arguments, the sentence is not selected


if ( ^KSWDEP(#1[mentsco],#2[mentsco]) )
	KSWDEP[mentsco=+](#1,#2).

if ( ^KSWDEP(#1[mentsco],#2[deict]) )
	KSWDEP[mentsco=+](#1,#2).

if ( ^KSWDEP(#1[deict],#2[mentsco]) )
	KSWDEP[mentsco=+](#1,#2).

if ( ^KSWDEP[mentsco](#1,#2) &  KSWDEP[mentsco:~](?,?) )
	KSWDEP[mentsco=~](#1,#2) .

if ( ^KSWDEP[mentsco](#1,#2) &  KSWDEP[mentsco:~](?) )
	KSWDEP[mentsco=~](#1,#2) .

if ( ^KSWDEP[mentsco](#1[contr],#2) |KSWDEP[mentsco](#1,#2[contr]) )
     KSWDEP[mentsco=~](#1,#2).

if ( ^KSWDEP[mentsco](#1,#2) & ~KSWDEP[mentsco:~](?,?) )
	~ .

if ( ^KSWDEP(#1[mentscopubl],#2[mentscopubl]) )
	KSWDEP[mentscopubl=+](#1,#2).

if ( ^KSWDEP[mentscopubl](#1,#2) &  KSWDEP[mentscopubl:~](?,?) )
	KSWDEP[mentscopubl=~](#1,#2) .

if ( ^KSWDEP[mentscopubl](#1,#2) &  KSWDEP[mentscopubl:~](?) )
	KSWDEP[mentscopubl=~](#1,#2) .

if ( ^KSWDEP[mentscopubl](#1[contr],#2) |KSWDEP[mentscopubl](#1,#2[contr]) )
     KSWDEP[mentscopubl=~](#1,#2).

if ( ^KSWDEP[mentscopubl](#1,#2) & ~KSWDEP[mentscopubl:~](?,?) )
	~ .

// if the sentence contains KSWDEP's that only contain "mental" and "contr" arguments, the sentence is not selected


if ( ^KSWDEP(#1[mentcont,func],#2[mentcont,func:~]) )
	KSWDEP[mentcont=+](#1,#2).

if ( ^KSWDEP(#1[mentcont,func:~],#2[mentcont,func]) )
	KSWDEP[mentcont=+](#1,#2).

if ( ^KSWDEP[mentcont](#1,#2) &  KSWDEP[mentcont:~](?,?) )
	KSWDEP[mentcont=~](#1,#2) .

if ( ^KSWDEP[mentcont](#1,#2) &  KSWDEP[mentcont:~](?) )
	KSWDEP[mentcont=~](#1,#2) .


if ( ^KSWDEP[mentcont](#1,#2) )
	~ .


// If a sentence contains KSWDEP's that only contain CONTR arguments that have the feature FUNC, the sentence is not selected

if ( ^KSWDEP(#1[func,mental:~,change:~]) )
	KSWDEP[contr=+](#1).

if ( ^KSWDEP[contr](#1) & KSWDEP[contr:~](#2,#3) )
	KSWDEP[contr=~](#1).

if ( ^KSWDEP[contr](#1) & KSWDEP[contr:~](#2) & ~KSWDEP[contr](#2) )
	KSWDEP[contr=~](#1).

if ( ^KSWDEP[contr](#1) )
	~ .




// If a sentence besides unary contr+func dependencies only contains dependencies that contain an argument with the "possibility" feature, the sentence is not selected


if ( ^KSWDEP(#1[possibility],#2) & KSWDEP(#3[contr,func]) )
	KSWDEP[test=+](#1,#2).


if ( ^KSWDEP(#1,#2[possibility]) & KSWDEP(#3[contr,func]) )
	KSWDEP[test=+](#1,#2).

if ( ^KSWDEP[test](#1,#2) & KSWDEP(#3,#4) )
	KSWDEP[test=~](#1,#2).


if ( ^KSWDEP[test](#1,#2) & KSWDEP(#3[contr:~,func:~]) )
	KSWDEP[test=~](#1,#2).

if ( ^KSWDEP[test](#1,#2) )
	~ .



/////////////////////////////////////
// Giving features to change of direction sentences
/////////////////////////////////////


// A KSWDEP that has an "importance" argument gets the feature "emph"

if ( ^KSWDEP(#1[contr:~],#2[importance]) | ^KSWDEP(#1[importance],#2[contr:~])   )
	KSWDEP[emph=+](#1,#2).

if ( ^KSWDEP(#1[contr,func],#2[importance]) | ^KSWDEP(#1[importance],#2[contr,func])   )
	KSWDEP[emph=+](#1,#2).

if ( ^KSWDEP(#1[contr,func:~],#2[importance]) | ^KSWDEP(#1[importance],#2[contr,func:~])   )
	KSWDEP[emph=+](#1,#2).

// more complicated than previously thought - must be refined

//| #5[form_ksw:fthan] |
//if ( KSWDEP(#1[old],#2) | KSWDEP(#1,#2[old]) | $1(#1[old],#2[publ]) | $1(#1[publ],#2[old]) & MOD[pre](#3[partpas],#4[compar]) & #4<#5 )
//	KSWDEP(#3,#4,#5).

//| #5[form_ksw:fthan] |
//if ( KSWDEP(#1[old],#2) | KSWDEP(#1,#2[old]) | $1(#1[old],#2[publ]) | $1(#1[publ],#2[old]) & MOD[pre](#3[partpas],#4[compar]) & #4<#5 )
//	KSWDEP(#1,#2).


//| #5[form_ksw:fthan] |
//if ( KSWDEP(#1[old],#2) | KSWDEP(#1,#2[old]) | $1(#1[publ],#2[old]) | $1(#1[old],#2[publ]) & MOD[pre](#3[adv],#4[compar]) & #4<#5 )
//	KSWDEP(#3,#4,#5).

//| #5[form_ksw:fthan] |
//if ( KSWDEP(#1[old],#2) | KSWDEP(#1,#2[old]) | $1(#1[publ],#2[old]) | $1(#1[old],#2[publ]) & MOD[pre](#3[adv],#4[compar]) & #4<#5 )
//	KSWDEP(#1,#2).


//| #5[form_ksw:fthan] |
//if ( KSWDEP(#1[old],#2) | KSWDEP(#1,#2[old]) | $1(#1[publ],#2[old]) | $1(#1[old],#2[publ]) & MOD[pre](#3[adj],#4[compar]) & #4<#5 )
//	KSWDEP(#3,#4,#5).

//| #5[form_ksw:fthan] |
//if ( KSWDEP(#1[old],#2) | KSWDEP(#1,#2[old]) | $1(#1[publ],#2[old]) | $1(#1[old],#2[publ]) & MOD[pre](#3[adj],#4[compar]) & #4<#5 )
//	KSWDEP(#1,#2).


//| #1[compar] |
//if ( ~MOD[pre](#2,#1[compar]) )
//	MAIN(#1).

//| #3[form_ksw:fthan] |
//if ( MAIN(#4[compar]) & KSWDEP(#1[old],#2) | KSWDEP(#1,#2[old]) | $1(#1[publ],#2[old]) | $1(#1[old],#2[publ]) & #4<#3 )
//	KSWDEP(#4,#3).

//| #3[form_ksw:fthan] |
//if ( MAIN(#4[compar]) & KSWDEP(#1[old],#2) | KSWDEP(#1,#2[old]) | $1(#1[publ],#2[old]) | $1(#1[old],#2[publ]) & #4<#3 )
//	KSWDEP(#1,#2).

//if ( ^MAIN(#1[compar]) )
//	~.
	


/////////////////////////////////////
// 1. Sentences containing dependencies having words with the feature "old" 
// express a change of direction if they also contain dependencies with
// the features "contr", "change" or "attitude". If this is not the case
// the sentence is marked "OLD". Such sentences are potentially
// change of direction sentences, but it is less probable than the
// sentences that contain the above-mentioned features
//////////////////////////////////////

if ( ^KSWDEP(#1[old,contr:~,change:~,attitude:~],#2[contr:~,change:~,attitude:~]) | ^KSWDEP(#1[contr:~,change:~,attitude:~],#2[old,contr:~,change:~,attitude:~]) )
	KSWDEP[old=+](#1,#2).

if ( ^KSWDEP[old](#1,#2) & KSWDEP(#3[attitude]) | KSWDEP(#3,#4[attitude]) | KSWDEP(#3[attitude],#4) | KSWDEP(#3[contr]) | KSWDEP(#3,#4[contr]) | KSWDEP(#3[contr],#4) | | KSWDEP(#3,#4[change]) | KSWDEP(#3[change],#4) )
	KSWDEP[old=~](#1,#2).



////////////////////////////////////
// 2. Sentences containing dependencies having words with no other features
// than "mental", "scope" and "timefact", are marked TEMPSTAT, since they 
// are probably just statements about some past, present or current 
// hypotheses.
////////////////////////////////////

if ( ^KSWDEP(#1[old,mental],#2) | ^KSWDEP(#1,#2[old,mental]) )
	KSWDEP[tempstat=+](#1,#2).



if ( ^KSWDEP(#1[timefact],#2[mentscotime]) | ^KSWDEP(#1[mentscotime],#2[timefact]) )
	KSWDEP[tempstat=+](#1,#2).

if ( KSWDEP[tempstat](#1,#2) & ^KSWDEP[tempstat:~](#3[mentscotime],#4[mentscotime]) )
	KSWDEP[tempstat=+](#3,#4).

// TEMPSTAT_OLD

if ( ^KSWDEP[tempstat](#1[old],#2) | ^KSWDEP[tempstat](#1,#2[old]) )
	KSWDEP[old=+](#1,#2).

if ( ^KSWDEP[tempstat,old](#1,#2) & ^KSWDEP[tempstat,old:~](#1,#3) )
	KSWDEP[old=+](#1,#3).

if ( ^KSWDEP[tempstat,old](#1,#2) & ^KSWDEP[tempstat,old:~](#3,#1) )
	KSWDEP[old=+](#3,#1).

if ( ^KSWDEP[tempstat,old](#1,#2) & ^KSWDEP[tempstat,old:~](#2,#3) )
	KSWDEP[old=+](#2,#3).

if ( ^KSWDEP[tempstat,old](#1,#2) & ^KSWDEP[tempstat,old:~](#3,#2) )
	KSWDEP[old=+](#3,#2).

////////////////////////////////////
// 2.a "However+KSWDEP[tempstat]" 
////////////////////////////////////

if ( ^KSWDEP[tempstat](#1,#2) & KSWDEP[tempstat:~](#3[however]) & ~KSWDEP[tempstat:~](#4,#5) )
	KSWDEP[tempstat=+,contr=+](#1,#2).	

if ( KSWDEP[tempstat](#1,#2) & ^KSWDEP[tempstat:~](#3[however]) & ~KSWDEP[tempstat:~](#4,#5) )
	KSWDEP[tempstat=+,contr=+](#3).	

if ( KSWDEP[tempstat](#1,#2) & ^KSWDEP[tempstat:~](#3,#4[however]) & ~KSWDEP[tempstat:~](#4,#5) )
	KSWDEP[tempstat=+,contr=+](#3,#4).	

//if ( KSWDEP[tempstat](#1,#2) & ^KSWDEP[tempstat](#3[mental,old],#4[however]) & ~KSWDEP[tempstat:~](#4,#5) )
//	KSWDEP[tempstat=+,contr=+](#3,#4).	

////////////////////////////////////
// end 
////////////////////////////////////

if ( ^KSWDEP[tempstat](#1,#2) & KSWDEP[tempstat:~,emph:~](#3,#4) | KSWDEP[tempstat:~](#5) )
	KSWDEP[tempstat=~,contr=~](#1,#2).
	
if ( ^KSWDEP[tempstat](#1) & KSWDEP[tempstat:~,emph:~](#2,#3) | KSWDEP[tempstat:~](#4) )
	KSWDEP[tempstat=~,contr=~](#1).


	
////////////////////////////////////
// 3. Sentences containing dependencies having words with no other features
// than "mental", "scope" and "possibility", are marked POSTAT, since they 
// are probably just statements about some past, present or current 
// hypotheses.
////////////////////////////////////

if ( ^KSWDEP(#1[possibility],#2[mentscoposs]) | ^KSWDEP(#1[mentscoposs],#2[possibility]))
	KSWDEP[postat=+](#1,#2).

if ( KSWDEP[postat](#1,#2) & ^KSWDEP[postat:~,emph:~](#3[mentscoposs],#4[mentscoposs]) )
	KSWDEP[postat=+](#3,#4).

if ( KSWDEP[postat](#1,#2) & ^KSWDEP[postat:~,emph:~](#3[mental],#4[func,contr]) )
	KSWDEP[postat=+](#3,#4).

if ( KSWDEP[postat](#1,#2) & ^KSWDEP[postat:~,emph:~](#3[func,contr],#4[mental]) )
	KSWDEP[postat=+](#3,#4).

if ( KSWDEP[postat](#1,#2) & ^KSWDEP(#3[func,contr]) )
	KSWDEP[postat=+](#3).

if ( ^KSWDEP[postat](#1,#2) & KSWDEP[postat:~,emph:~,tempstat:~,old:~](#3,#4) | KSWDEP[postat:~](#3) )
	KSWDEP[postat=~](#1,#2).

// open possibility

if ( ^KSWDEP(#1[p_open],#2[possibility]) | ^KSWDEP(#1[possibility],#2[p_open]) )
	KSWDEP[postat=+](#1,#2).


////////////////////////////////////
// 4. Some sentences just draw our attention to the fact that a
// phenomenon is unknown. In this case the sentence is marked NOSTAT.
////////////////////////////////////

////////////////////////////////////
// 4.a. dependency type: SUBJ or SUBJATTR(scope,know+contr)
////////////////////////////////////

if ( ^KSWDEP(#1[scope],#2[know,contr]) & SUBJ[pre](#1[scope],#2[know,contr]) | SUBJATTR(#1[scope],#2[know,contr]) | MOD[pre](#1[scope],#2[know,contr]) | NUCL[pre](#1[scope],#2[know,contr]) )
	KSWDEP[nostat=+](#1,#2).


if ( ^KSWDEP(#1[know,contr:~,partpas],#2[form:fnot,toutmaj:~]) )
	KSWDEP[nostat=+](#1,#2).
	

////////////////////////////////////
// 4.b. dependency type: KSWDEP(cop+timefact,know+contr/mental+contr)
////////////////////////////////////

if ( ^KSWDEP(#1[cop,timefact],#2[know,contr]) )
	KSWDEP[nostat=+](#1,#2).

if ( ^KSWDEP(#1[cop,timefact],#2[mental,contr]) )
	KSWDEP[nostat=+](#1,#2).


////////////////////////////////////
// 4.c. dependency type: KSWDEP(scope;mental,fno) (no evidence)
////////////////////////////////////

if (^KSWDEP(#1[scope],#2[form:fno,toutmaj:~]) | ^KSWDEP(#1[noun,mental],#2[form:fno,toutmaj:~]))
	KSWDEP[nostat=+](#1,#2).


////////////////////////////////////
// 4.d. dependency type: KSWDEP(know,nocompl) (no studies)
////////////////////////////////////

if ( ^KSWDEP(#1[know,nocomp]) )
	KSWDEP[nostat=+](#1).

if ( ^KSWDEP(#1[know,nocomp],#2) )
	KSWDEP[nostat=+](#1,#2).

if ( ^KSWDEP(#1,#2[know,nocomp]) )
	KSWDEP[nostat=+](#1,#2).

if ( ^KSWDEP(#1[know,nocomp]) & ~KSWDEP(#1[know,nocomp]) & #1::#1)
	KSWDEP[nostat=+](#1).

if ( ^KSWDEP(#1[know,nocomp],#2) & ~KSWDEP(#1[know,nocomp],#2) & #1::#1 & #2::#2 )
	KSWDEP[nostat=+](#1,#2).

if ( ^KSWDEP(#1,#2[know,nocomp]) & ~KSWDEP(#1,#2[know,nocomp]) & #1::#1 & #2::#2 )
	KSWDEP[nostat=+](#1,#2).
////////////////////////////////////
// 4.e. dependency type: KSWDEP(scope,form_ksw:flittle) 
////////////////////////////////////

if ( ^KSWDEP(#1[scope],#2[form_ksw:flittle]) )
	KSWDEP[nostat=+](#1,#2).

// Although the effects of temperature are known (Nelson and Moser, 1994; Van Soest, 1994), there is little published information about the influence of monthly fluctuations in forage composition and digestion rates on animal performance (Tedeschi et al., 1999).

//NFV{little published}

| ?{#1[form_ksw:flittle],#2[scope]} |
  KSWDEP[nostat=+](#1,#2).

////////////////////////////////////
// 4.f. dependency type: KSWDEP(form_ksw:flittle,know) 
////////////////////////////////////

if ( ^KSWDEP(#1[form_ksw:flittle],#2[know]) )
	KSWDEP[nostat=+](#1,#2).

if ( ^KSWDEP(#1[know],#2[form_ksw:flittle]) )
	KSWDEP[nostat=+](#1,#2).

////////////////////////////////////
// 4.g. dependency type: KSWDEP(mentscotime,mentscotime) KSWDEP(know,contr)
////////////////////////////////////

if ( ^KSWDEP(#1[mentscotime],#2[mentscotime]) & KSWDEP(#3[know,contr]) )
	KSWDEP[nostat=+](#1,#2).
	
if ( KSWDEP(#1[mentscotime],#2[mentscotime]) & ^KSWDEP(#3[know,contr]) )
	KSWDEP[nostat=+](#3).

if ( ^KSWDEP[nostat:~](#1[mentscotime],#2[mentscotime]) & KSWDEP[nostat](#3,#4) )
	KSWDEP[nostat=+](#1,#2).

////////////////////////////////////
// 4.h. dependency type: KSWDEP(know) KSWDEP(know,contr,adv) "poorly understood"
////////////////////////////////////

if ( ^KSWDEP(#1[know],#2[know,contr,adv]) )
	KSWDEP[nostat=+](#1,#2).

if ( ^KSWDEP(#1[know,contr,adv],#2[know]) )
	KSWDEP[nostat=+](#1,#2).

////////////////////////////////////
// 4.h. dependency type: KSWDEP(know;mental;contr,~contr) " largly uncharacterized"
////////////////////////////////////

if ( ^KSWDEP(#1[mental,know,contr],#2[contr:~]) || ^KSWDEP(#1[contr:~],#2[mental,know,contr]) )
	KSWDEP[nostat=+](#1,#2).



////////////////////////////////////
// 4.h. "However ... unknown" dependency type: KSWDEP(know+contr); 
// KSWDEP(however) 
////////////////////////////////////

if ( ^KSWDEP(#1[contr,know]) & KSWDEP(#2[however]) )
	KSWDEP[nostat=+,contr=+](#1).
	
if ( KSWDEP(#1[contr,know]) & ^KSWDEP(#2[however]) )
	KSWDEP[nostat=+,contr=+](#2).

////////////////////////////////////
// 4.i. nostat + KSWDEP(mentscotime,mentscotime)
//////////////////////////////////////

if (KSWDEP[nostat](#1,#2) & ^KSWDEP(#3[mentscotime],#4[mentscotime]) )
	KSWDEP[nostat=+](#3,#4).


////////////////////////////////////
// 5. staknow: sentences that indicate the state of knowledge at a 
// certain time. Dependency type: KSWDEP(know;time,old:~)
////////////////////////////////////


if (^KSWDEP[old:~](#1[know],#2[timefact,old:~]) )
	KSWDEP[statknow=+](#1,#2).

if (^KSWDEP[old:~](#1[timefact,old:~,form:fhave],#2[know]) )
	KSWDEP[statknow=+](#1,#2).

//if ( KSWDEP[statknow](#1,#2) & ^KSWDEP[statknow:~](#3) )
//	KSWDEP[statknow=+](#3).

//if ( KSWDEP[statknow](#1,#2) & ^KSWDEP[statknow:~](#3,#4) )
//	KSWDEP[statknow=+](#3,#4).


////////////////////////////////////
//6. KSWDEP_with_feature+however: If a sentence contains one or several
// featured KSWDEPs, plus "however", and no other KSWDEPs, "however" should
// also get the feature, and all the dependencies should also get the
// feature "contr"
////////////////////////////////////


////////////////////////////////////
// 6.a "However+KSWDEP[nostat]" 
////////////////////////////////////

if ( ^KSWDEP[nostat](#1,#2) & KSWDEP[nostat:~](#3[however]) )
	KSWDEP[nostat=+,contr=+](#1,#2).	

if ( KSWDEP[nostat](#1,#2) & ^KSWDEP[nostat:~](#3[however]) )
	KSWDEP[nostat=+,contr=+](#3).	

if ( ^KSWDEP[nostat](#1,#2) & KSWDEP[nostat:~](#3,#4[however]) )
	KSWDEP[nostat=+,contr=+](#1,#2).	

if ( KSWDEP[nostat](#1,#2) & ^KSWDEP[nostat:~](#3,#4[however]) )
	KSWDEP[nostat=+,contr=+](#3,#4).	

if ( ^KSWDEP[nostat](#1) & KSWDEP[nostat:~](#2[however]) )
	KSWDEP[contr=+](#1).

if ( KSWDEP[nostat](#1) & ^KSWDEP[nostat:~](#2[however]) )
	KSWDEP[contr=+,nostat=+](#2).

if ( KSWDEP[nostat](#1) & ^KSWDEP[nostat:~](#2,#3[however]) )
	KSWDEP[contr=+,nostat=+](#2,#3).

if ( ^KSWDEP[nostat](#1) & KSWDEP[nostat:~](#2,#3[however]) )
	KSWDEP[contr=+](#1).

if ( ^KSWDEP(#1[know,contr]) & KSWDEP(#2,#3[however]) )
	KSWDEP[nostat=+,contr=+](#1).

if ( KSWDEP(#1[know,contr]) & ^KSWDEP(#2,#3[however]) )
	KSWDEP[nostat=+,contr=+](#2,#3).

if ( ^KSWDEP[nostat](#1,#2) & KSWDEP[nostat,contr](#3) )
	KSWDEP[contr=+](#1,#2).

if ( ^KSWDEP[nostat,contr](#1,#2) & KSWDEP[nostat:~,emph:~](#3,#4) )
	KSWDEP[nostat=~,contr=~](#1,#2).

if ( ^KSWDEP[nostat,contr](#1,#2) & KSWDEP[nostat:~](#3) )
	KSWDEP[nostat=~,contr=~](#1,#2).

if ( ^KSWDEP[nostat,contr](#1) & KSWDEP[nostat:~,emph:~](#2,#3) )
	KSWDEP[nostat=~,contr=~](#1).

if ( ^KSWDEP[nostat,contr](#1) & KSWDEP[nostat:~](#2) )
	KSWDEP[nostat=~,contr=~](#1).

// if a dependency like "previously[timefact,old] unknown[know,contr]" gets the feature nostat, it should be deleted

if ( ^KSWDEP[nostat](#1[timefact,old],#2[know,contr]) | ^KSWDEP[nostat](#1[know,contr],#2[timefact,old]) )
	KSWDEP[nostat=~](#1,#2).

// If besides "nostat" dependencies a sentence only contains an "attitude"
// dependency that just has 1 argument, all the dependencies get the feature
// "nostat" and "attitude"

if ( ^KSWDEP[nostat](#1,#2) & KSWDEP(#3[attitude]) )
	KSWDEP[attitude=+](#1,#2).

if ( KSWDEP[nostat](#1,#2) & ^KSWDEP(#3[attitude]) )
	KSWDEP[nostat=+,attitude=+](#3).

if ( ^KSWDEP[nostat](#1) & KSWDEP(#2[attitude]) )
	KSWDEP[attitude=+](#1).

if ( KSWDEP[nostat](#1) & ^KSWDEP(#2[attitude]) )
	KSWDEP[nostat=+,attitude=+](#2).

//surprise


if ( ^KSWDEP[attitude](#1[surprise],#2) )
    KSWDEP[surprise=+](#1,#2)

if ( ^KSWDEP[attitude](#1,#2[surprise]) )
    KSWDEP[surprise=+](#1,#2)

if ( ^KSWDEP[attitude](#1[surprise]) )
    KSWDEP[surprise=+](#1)



// If a sentence only contains dependecies that have an argument whose feature is FUNC, and the other argument of the dependency is not WIDESCOPE, the sentence should not be selected


if ( ^KSWDEP(#1[func],#2[widescope:~]) | ^KSWDEP(#1[know:~,widescope:~],#2[func]) )
	KSWDEP[test=+](#1,#2).

if ( ^KSWDEP(#1[func]) )
	KSWDEP[test=+](#1).

if ( ^KSWDEP[test](#1,#2) & KSWDEP[test:~](#3,#4) )
	KSWDEP[test=~](#1,#2).


if ( ^KSWDEP[test](#1,#2) & KSWDEP[test:~](#3) )
	KSWDEP[test=~](#1,#2).


if ( ^KSWDEP[test](#1) & KSWDEP[test:~](#2,#3) )
	KSWDEP[test=~](#1).


if ( ^KSWDEP[test](#1) & KSWDEP[test:~](#2) )
	KSWDEP[test=~](#1).

if ( ^KSWDEP[test](#1,#2) )
	~.

if ( ^KSWDEP[test](#1) )
	~.


// If a sentence contains just 1 KSWDEP(scope,change) or 1 KSWDEP(change,scope),
// it gets the feature GROW

if ( ^KSWDEP(#1[scope],#2[incr,know:~]) | ^KSWDEP(#1[incr,know:~],#2[scope]) )
	KSWDEP[grow=+](#1,#2).

if ( ^KSWDEP(#1[mental],#2[incr,know:~]) | ^KSWDEP(#1[incr,know:~],#2[mental]) )
	KSWDEP[grow=+](#1,#2).

if ( KSWDEP[grow](#1,#2) & ^KSWDEP[grow:~](#3,#4) )
	KSWDEP[grow=+](#3,#4).

if ( KSWDEP[grow](#1,#2) & ^KSWDEP[grow:~](#3) )
	KSWDEP[grow=+](#3).

// If a sentence contains just 1 KSWDEP and it contains the word "first", the
// KSWDEP gets the feature "first"

if ( ^KSWDEP(#1,#2[form_ksw:ffirst]) | ^KSWDEP(#1,#2[form:fone, numer,change]) )
	KSWDEP[first=+](#1,#2).

// The compound "first time" turns the sentence into a "first"

if ( ^$1(#1[ksksw,form_ksw:ffirst]) )
	KSWDEP[first=+](#1).

// No idea why these 2 rules were made:

//if ( ^KSWDEP[first](#1,#2) & KSWDEP[first:~](#3,#4) )
//	KSWDEP[first=~](#1,#2).

//if ( ^KSWDEP[first](#1,#2) & KSWDEP[first:~](#3) )
//	KSWDEP[first=~](#1,#2).


// If a KSWDEP sentence contains a contradiction that is weaker than a change of direction, it is marked WEAKCONTR. These sentences have dependencies that contain a mental and a scope argument, as well as a cont,func


if ( KSWDEP(#1[mental],#2[scope]) & ^KSWDEP(#3[contr,func]) )
	KSWDEP[weakcontr=+](#3).

if ( ^KSWDEP(#1[mental],#2[scope]) & KSWDEP(#3[contr,func]) )
	KSWDEP[weakcontr=+](#1,#2).


if ( KSWDEP[weakcontr:~,emph:~](#1,#2) & ^KSWDEP[weakcontr](#3) )
	KSWDEP[weakcontr=~](#3).


if ( KSWDEP[weakcontr:~,emph:~](#1,#2) & ^KSWDEP[weakcontr](#3,#4) )
	KSWDEP[weakcontr=~](#3,#4).


if ( ^KSWDEP[weakcontr](#1,#2) & KSWDEP[weakcontr:~](#3) )
	KSWDEP[weakcontr=~](#1,#2).


if ( ^KSWDEP[weakcontr](#1) & KSWDEP[weakcontr:~](#2) )
	KSWDEP[weakcontr=~](#1).

// If a sentence just contains unary dependencies and one of them is contr, the dependecy is weakcontr

if ( ^KSWDEP(#1[contr]) & KSWDEP(#2[ksksw:~]) & #1~:#2 )
	KSWDEP[weakcontr=+](#1).

if ( KSWDEP[weakcontr](#1[contr]) & ^KSWDEP(#2[ksksw:~]) & #1~:#2 )
	KSWDEP[weakcontr=+](#2).

if ( ^KSWDEP[weakcontr](#1) & KSWDEP[weakcontr:~,emph:~](#2,#3) )
	KSWDEP[weakcontr=~](#1).

if ( ^KSWDEP[weakcontr](#1) & KSWDEP[weakcontr:~](#2) )
	KSWDEP[weakcontr=~](#1).

// if a sentence does not contain KSWDEP with 2 arguments, it is not selected

if ( ^KSWDEP(#1) & ~KSWDEP(?,?) )
   ~.

// Give the feature "novstat" to sentences that just speak about a novelty

if ( ^KSWDEP(#1[new],#2) )
	KSWDEP[novstat=+,tempstat=~](#1,#2).

if ( ^KSWDEP(#1,#2[new]) )
	KSWDEP[novstat=+,tempstat=~](#1,#2).

if ( KSWDEP[novstat](#1,#2) & ^KSWDEP[novstat:~](#3,#4) )
	KSWDEP[novstat=+,tempstat=~](#3,#4).

if ( KSWDEP[novstat](#1,#2) & ^KSWDEP[novstat:~](#3) )
	KSWDEP[novstat=+,tempstat=~](#3).


////////////////////////////////////////////////////////////
//Relevant sentences: titles, synthetic sentences, last sentences
////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////       CONTRIBUTION         ////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

| TOP#1{ ?+ } |
if ( contributionsent:1 )
	SUMMARY[contribution=+](#1).

| TOP#1{ ?+ } |
if ( _nextanalyse:1 & _nextanalyse=0 )
//if ( _nextanalyse:1 )
	SUMMARY[contribution=+](#1).

//Script:

//_nextanalyse=0;


// provide evidence is publ:+ : We provide evidence

Script:

iftest ( OBJ(#1[form_ksw:fprovide],#2[form_ksw:fevidence]) ) { #1[publ=+];}

DependencyRules:

//this not deict: NP{this} PP{with NP{reference}} 

| np{#1[deict=~]}, pp{#2,#3{?*,#4[ksw,last]}} |
  if ( $1(#1,#4) )
  ~.

// add the feature synth to sentences that contain 2 marked words

if ( ^$1(#1[publ],#2[deict])  )
        $1[contribution=+](#1,#2).

// exception
//Several courts in Australia have embraced social media to achieve this educative purpose.
//DETD_CONTRIBUTION(purpose,this)

// only "our purpuse" would be CONTRIBUTION

if ( ^$1[contribution](#1[relmark],#2[wmentsco:~]) )
    $1[contribution=~](#1,#2).


if ( ^$1(#1[deict],#2[publ]) )
        $1[contribution=+](#1,#2).

if ( ^SUBJ(#1[publ],#2[mentscopubl] ) & DETD(#2,#3[def]) )
   SUBJ[contribution=+](#1,#2).

if ( ^$1(#1[relmark],#2[ksw] ) & $2(#2,#3[deict]) )
   $1[contribution=+](#1,#2).

if ( ^$1(#1[ksw],#2[relmark] ) & $2(#1,#3[deict]) )
   $1[contribution=+](#1,#2).

//////////////////////
// contribution not necessarily of the current article
//////////////////////

//the aim of the article


if ( ^$1(#1[relmark],#2[ksw] ) & DETD(#2,#3[def]) )
   $1[contribution=+,any-author=+](#1,#2).

if ( ^$1(#1[ksw],#2[relmark] ) & DETD(#1,#3[def]) )
   $1[contribution=+,any-author=+](#1,#2).

// the article describes

if ( ^SUBJ[ksw](#1[mentscopubl],#2[publ]) &  DETD(#2,#3[def]) )
   SUBJ[contribution=+,any-author=+](#1,#2).

if ( ^SUBJ-N[ksw](#1[mentscopubl],#2[publ]) &  DETD(#2,#3[def]) )
   SUBJ-N[contribution=+,any-author=+](#1,#2).


//is advanced here.
//MOD_POST(advanced,here)
//NUCL_GRPR_VLINK_PASSIVE(is,advanced)

if ( ^$1[contribution:~](#1[mental],#2[lemme:here]) & NUCL[passive](#3,#1) )
   $1[contribution=+](#1,#2).
 
//The contribution here is 
//MOD_PRE(is,here)
//LOC_POST(contribution,here)

if ( $1(#1[form:fbe],#2[lemme:here]) & ^$2[contribution:~](#3[mentsco],#2) )
   $2[contribution=+](#3,#2).

//The propositions developed here
//MOD_POST(developed,here)

if ( ^$1[contribution:~](#1[mentscopubl],#2[lemme:here]) )
   $1[contribution=+](#1,#2).
   
if ( ^$1[contribution](#1[mentscopubl],#2[lemme:here]) & SUBJ(#1,#3[deict:~]) )
   $1[contribution=~](#1,#2).

// discussed in the following sections

if ( $1[contribution](?,?) & $2[ksw,weak,contr:~](#1,#2) )
   $2[contribution=+](#1,#2).

if ( $1[contribution](?,?) & $2[ksw,weak,contr](#1,#2) )
   KSWDEP[contr=+](#1,#2).

//////////////////////////////////////////////////////////

if ( ^$1[contribution](#1[other],#2) | ^$1[contribution](#1,#2[other]) )
   $1[contribution=~](#1,#2).

//if $1[contribution](#1,#2)

//if ( NUCL[passive](#1,#2[publ,ksw]) )
//	NUCL[contribution=+](#1,#2).

// we will discuss

| TOP#4{ ?+ } |
if ( SUBJ(#1,#2[deict]) & NUCL(#1,#3[publ,ksw]) )
	SUMMARY[contribution=+](#4).

// taken together/altogether/all together + scope -> synth (These results, taken together)

| #1[adv,publ] |
	MAIN(#1).

| TOP#4{ ?+ } |
if ( MAIN(#1[adv,publ]) & SUBJ(#2,#3[scope,ksw]) )
	SUMMARY[contribution=+](#4).

| TOP#4{ ?+ } |
if ( MAIN(#1[adv,publ]) & SUBJ(#2[mental,ksw],#3[deict]) )
	SUMMARY[contribution=+](#4).

if ( MAIN(#1[adv,publ]) )
	~ .

| TOP#3{ ?+ } |
if ( $1[contribution](#1) & ~SUMMARY(#2) )
	SUMMARY[contribution=+](#3).

| TOP#3{ ?+ } |
if ( $1[contribution](#1,#2) & ~SUMMARY(#4) )
	SUMMARY[contribution=+](#3).

if ( ^SUMMARY[contribution](#1) & $1[contribution,any-author](#2,#3) )
   SUMMARY[any-author=+](#1)

//In conclusion

| TOP#3{ ?+ } |
if ( $1(#1[relword],#2[prep,maj]) )
	SUMMARY[contribution=+](#3).

| TOP#3{ ?+ } |
if ( ^$1(#1[relword],#2[prep,maj]) & SUMMARY[contribution](#3) )
   $1[contribution=+](#1,#2).


////////////////////////

// Marking vis: KSWDEPS without a feature of with "first" or "change"

// delete KSWDEP's  with the same arguments

if ( ^KSWDEP(#1,#2) & KSWDEP(#2,#1) )
   ~.

///////////////////


if ( ^KSWDEP[contribution:~, mentsco=~, old:~,tempstat:~,postat:~,nostat:~,weakcontr:~,statknow:~,contr:~,attitude:~,surprise:~,emph:~,question:~,deict:~,weak:~](#1,#2) )
	KSWDEP[vis=+](#1,#2).


if ( ^KSWDEP[contribution:~, old:~,tempstat:~,postat:~,nostat:~,weakcontr:~,statknow:~,contr:~,attitude:~,surprise:~,question:~,weak:~](#1) )
	KSWDEP[vis=+](#1).

// Surprisingly , this paper reports 

if ( $1[contribution](#1,#2) & $2(#3[attitude]) )
	KSWDEP[vis=+](#3).
	
| TOP#3{ ?+ } |
if ( KSWDEP(#1) & ~IMPSENT(#2) )
	IMPSENT(#3).
	
| TOP#3{ ?+ } |
if ( KSWDEP(#1,#2) & ~IMPSENT(#4) )
	IMPSENT(#3).


// Give features to IMPSENT

// If a sentence has a vis KSWDEP, the IMPSENT is a vis

if ( KSWDEP[vis](#1,#2) & ^IMPSENT(#4) & ~IMPSENT[vis](#5) )
	IMPSENT[vis=+](#4).

if ( KSWDEP[vis](#3) & ^IMPSENT(#4) & ~IMPSENT[vis](#5) )
	IMPSENT[vis=+](#4).

// contrast: the best viss

// a. contr+scope

if ( ^KSWDEP(#1[contr,question:~],#2[scope]) & IMPSENT[vis](#3) )
	KSWDEP[contrast=+](#1,#2). 

if ( ^KSWDEP(#1[scope],#2[contr,question:~]) & IMPSENT[vis](#3) )
	KSWDEP[contrast=+](#1,#2). 

// b. mental+contr_scope

| #1[scope] |
if ( KSWDEP(#1[scope],#2) | KSWDEP(#2,#1[scope]) )
	LIXO(#1).

if ( ^KSWDEP(#1[mental],#2[contr,question:~]) & LIXO(#4) & IMPSENT[vis](#3) )
	KSWDEP[contrast=+](#1,#2). 

if ( ^KSWDEP(#1[contr,question:~],#2[mental]) & LIXO(#4) & IMPSENT[vis](#3) )
	KSWDEP[contrast=+](#1,#2).

if ( LIXO(#1) )
	~.

// c. scope+attitude_time 

| #1[timefact] |
if ( KSWDEP(#1[timefact],#2) | KSWDEP(#2,#1[timefact]) )
	LIXO(#1).

if ( ^KSWDEP(#1[scope],#2[attitude]) & LIXO(#4) & IMPSENT[vis](#3) )
	KSWDEP[contrast=+](#1,#2). 

if ( ^KSWDEP(#1[attitude],#2[scope]) & LIXO(#4) & IMPSENT[vis](#3) )
	KSWDEP[contrast=+](#1,#2).

if ( LIXO(#1) )
	~.

// d. scope+old_contr

| #1[contr] |
if ( KSWDEP(#1[contr,question:~],#2) | KSWDEP(#2,#1[contr,question:~]) | KSWDEP(#1[contr]) )
	LIXO(#1).

if ( ^KSWDEP(#1[scope],#2[old]) & LIXO(#4) & IMPSENT[vis](#3) )
	KSWDEP[contrast=+](#1,#2). 

if ( ^KSWDEP(#1[old],#2[scope]) & LIXO(#4) & IMPSENT[vis](#3) )
	KSWDEP[contrast=+](#1,#2).

if ( LIXO(#1) )
	~.

// If a IMPSENT contains a dependency with contrast, it gets the feature contrast

if ( KSWDEP[contrast](#1,#2) & ^IMPSENT[vis](#3) )
	IMPSENT[contrast=+](#3)

// Other features

if ( KSWDEP[tempstat](#1,#2) & ^IMPSENT[vis:~](#3) )
	IMPSENT[tempstat=+](#3).

if ( KSWDEP[old](#1,#2) & ^IMPSENT[vis:~](#3) )
	IMPSENT[old=+](#3).

if ( KSWDEP[postat](#1,#2) & ^IMPSENT[vis:~](#3) )
	IMPSENT[postat=+](#3).

if ( KSWDEP[nostat](#1,#2) & ^IMPSENT(#3) )
	IMPSENT[nostat=+](#3).

if ( KSWDEP[nostat](#1) & ^IMPSENT[vis:~](#3) )
	IMPSENT[nostat=+](#3).

if ( KSWDEP[contr](#1,#2) & ^IMPSENT[vis:~](#3) )
	IMPSENT[contr=+](#3).

if ( KSWDEP[contr](#1) & ^IMPSENT[vis:~](#3) )
	IMPSENT[contr=+](#3).

if ( KSWDEP[weakcontr](#1,#2) & ^IMPSENT[vis:~](#3) )
	IMPSENT[weakcontr=+](#3).

if ( KSWDEP[weakcontr](#1) & ^IMPSENT[vis:~](#3) )
	IMPSENT[weakcontr=+](#3).

if ( KSWDEP[statknow](#1,#2) & ^IMPSENT[vis:~](#3) )
	IMPSENT[statknow=+](#3).

if ( KSWDEP[novstat](#1,#2) & ^IMPSENT(#3) )
	IMPSENT[novstat=+](#3).

if ( KSWDEP[grow](#1,#2) & ^IMPSENT(#3) )
	IMPSENT[grow=+](#3).

if ( KSWDEP[first](#1,#2) & ^IMPSENT(#3) )
	IMPSENT[first=+](#3).

if ( KSWDEP[first](#1) & ^IMPSENT(#3) )
	IMPSENT[first=+](#3).

if ( KSWDEP[emph](#1,#2) & ^IMPSENT(#3) )
	IMPSENT[emph=+](#3).

//if ( KSWDEP[attitude](#1,#2) & ^IMPSENT[vis:~](#3) )
if ( KSWDEP[attitude,surprise:~](#1,#2) & ^IMPSENT(#3) )
	IMPSENT[attitude=+](#3).

if ( KSWDEP[surprise](#1,#2) & ^IMPSENT(#3) )
	IMPSENT[surprise=+](#3).

//if ( KSWDEP[attitude](#1) & ^IMPSENT[vis:~](#3) )
if ( KSWDEP[attitude,surprise:~](#1) & ^IMPSENT(#3) )
	IMPSENT[attitude=+](#3).

if ( KSWDEP[surprise](#1) & ^IMPSENT(#3) )
	IMPSENT[surprise=+](#3).

// if an IMPSENT only has VIS label, it gets CONTR

if ( ^IMPSENT[vis,contr:~,attitude:~,surprise:~,first:~,grow:~,novstat:~,statknow:~,nostat:~,old:~,statknow:~,tempstat:~,emph:~](#1) )
   IMPSENT[vis,contrast=+](#1).
 

// if a IMPSENT does not have any feature and its verb whose subject is 

////////////////////////////////
// marking features of relsents
////////////////////////////////


| #1[questlevel] |
	LIXO(#1).

| #1[form:fquest] |
if ( ^SUMMARY(#2) & LIXO(#3) & ~SUMMARY[question](#2))
	SUMMARY[question=+](#2).

if ( ^LIXO(#1) )
	~.

| #1[possibility] |
if ( ^SUMMARY(#2))
	SUMMARY[postat=+](#2).


| #1[postat] |
if ( ^SUMMARY(#2))
	SUMMARY[postat=+](#2).

if ( ^SUMMARY(#2[future],#3[scope]) )
	SUMMARY[future=+](#2,#3).


if ( ^SUMMARY(#2[scope],#3[future]) )
	SUMMARY[future=+](#2,#3).


| #1[forneg] |
if ( ^SUMMARY(#2) )
	SUMMARY[negative=+](#2).

//| #1[form:fnot] |
if ( ^SUMMARY(#2) & $1(#1,#3[forneg,toutmaj:~]) )
	SUMMARY[negative=+](#2).

if ( ^SUMMARY(#2) & $1(#1[forneg,toutmaj:~],#3) )
	SUMMARY[negative=+](#2).

| #1[negative] |
if ( ^SUMMARY(#2) )
	SUMMARY[negative=+](#2).

| #1[question] |
if ( ^SUMMARY(#2)  & $1(#1[ksw_feat],#3[question]) )
	SUMMARY[question=+](#2).

| #1[question] |
if ( ^SUMMARY(#2)  & $1(#1[question],#3[ksw_feat]) )
	SUMMARY[question=+](#2).

if ( ^SUMMARY[postat:~,future:~,contr:~,question:~,title:~](#1) )
	SUMMARY[stat=+](#1).

//| #3[importance] |
//if ( ^SUMMARY(#1) & ~SUMMARY[strong](#1) )
//	SUMMARY[strong=+](#1).


//| #3[questlevel] |
//if ( ^SUMMARY[title](#1) & ~SUMMARY[strong](#1) )
//	SUMMARY[title=+,strong=+](#1).


//| #3[ksw,possibility:~,func:~] |
//if ( ^SUMMARY[title,question,negative:~](#1) & ~SUMMARY[strong](#1) )
//	SUMMARY[title=+,strong=+](#1).

//if ( ^SUMMARY(#1) & $1[ksw](#2[form:~fnot,form:~fno,negative:~]) )
//	SUMMARY[strong=+](#1).

//if ( ^SUMMARY(#1) & $1[ksw](#2[form:~fnot,form:~fno,negative:~],#3[form:~fnot,form:~fno,negative:~]) )
//	SUMMARY[strong=+](#1).



/////////////////////////////
//IMPSUMMARY
////////////////////////////

// Marking relevant sentences that are KSWDEPs - this doesn't seem to be an important category

if ( ^SUMMARY(#1) & IMPSENT[vis](#2) )
	IMPSUMMARY[vis=+](#1).

if ( KSWDEP[contrast](#1,#2) & ^IMPSUMMARY(#3) )
	IMPSUMMARY[contrast=+](#3).

if ( ^SUMMARY(#1) & IMPSENT[novstat](#2) )
	IMPSUMMARY[novstat=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[novstat](#2) )
	IMPSUMMARY[novstat=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[first](#2) )
	IMPSUMMARY[first=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[first](#2) )
	IMPSUMMARY[first=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[old](#2) )
	IMPSUMMARY[old=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[old](#2) )
	IMPSUMMARY[old=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[grow](#2) )
	IMPSUMMARY[grow=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[emph](#2) )
	IMPSUMMARY[emph=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[grow](#2) )
	IMPSUMMARY[grow=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[tempstat](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[tempstat=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[tempstat](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[tempstat=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[nostat](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[nostat=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[nostat](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[nostat=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[postat](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[postat=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[postat](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[postat=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[statknow](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[statknow=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[statknow](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[statknow=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[contr](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[contr=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[contr](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[contr=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[weakcontr](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[weakcontr=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[weakcontr](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[weakcontr=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[attitude,surprise:~](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[attitude=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[surprise](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[surprise=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[attitude,surprise:~](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[attitude=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[surprise](#2) & ~IMPSUMMARY[vis](#3) )
	IMPSUMMARY[surprise=+](#1).

if ( ^SUMMARY(#1) & IMPSENT[weakreview](#2) )
	IMPSUMMARY[weakreview=+](#1).

if ( ^IMPSUMMARY(#1) & IMPSENT[weakreview](#2) )
	IMPSUMMARY[weakreview=+](#1).


// if an IMPSUMMARY only has VIS label, it gets CONTR

if ( ^IMPSUMMARY[vis,contr:~,attitude:~,surprise:~,first:~,grow:~,novstat:~,statknow:~,nostat:~,old:~,statknow:~,tempstat:~,emph:~](#1) )
   IMPSUMMARY[vis,contrast=+](#1).


if ( IMPSUMMARY(#1) & ^IMPSENT(#2) )
	~.

if ( IMPSUMMARY(#1) & ^SUMMARY(#2) )
	~.

if ( ^IMPSUMMARY[strong](#1) )
	IMPSUMMARY[strong=~](#1).

// This is a correction: KSWDEP(REL)SENT having the features CONTR+OLD should have the feature VIS, CONTRAST and not TEMPSTAT or OLDSTAT

if ( ^$1[contr,old](#1) )
	$1[contr=~,old=~,tempstat=~,oldstat=~,contrast=+,vis=+](#1).

// Marking weak reviews

// grow

if ( ^IMPSENT[grow](#1) )
	IMPSENT[weakreview=+](#1).

if ( ^IMPSUMMARY[grow](#1) )
	IMPSUMMARY[weakreview=+](#1).

if ( ^IMPSENT[first](#1) )
	IMPSENT[weakreview=+](#1).

if ( ^IMPSUMMARY[first](#1) )
	IMPSUMMARY[weakreview=+](#1).

if ( ^IMPSENT[novstat,vis](#1) )
	IMPSENT[weakreview=+](#1).

if ( ^IMPSUMMARY[novstat,vis](#1) )
	IMPSUMMARY[weakreview=+](#1).

| #1[possibility] |
if ( ^IMPSENT[vis](#2) )
	IMPSENT[weakreview=+](#2).

| #1[possibility] |
if ( ^IMPSUMMARY[vis](#2) )
	IMPSUMMARY[weakreview=+](#2).

| #1[weakreview] |
if ( ^IMPSENT[vis](#2) )
	IMPSENT[weakreview=+](#2).

| #1[weakreview] |
if ( ^IMPSUMMARY[vis](#2) )
	IMPSUMMARY[weakreview=+](#2).

| #1[form:fquest] |
if ( ^IMPSENT[vis](#2) )
	IMPSENT[weakreview=+](#2).

| #1[form:fquest] |
if ( ^IMPSUMMARY[vis](#2) )
	IMPSUMMARY[weakreview=+](#2).


// If a weakreview sentence contains a ksksw and and a contr it should not be a weakreview

if ( ^IMPSENT[weakreview](#1) & KSWDEP(#2[ksksw]) & KSWDEP(#3[contr]) )
	IMPSENT[weakreview=~](#1)

if ( ^IMPSENT[weakreview](#1) & KSWDEP(#2[ksksw]) & KSWDEP(#3[contr],#4) )
	IMPSENT[weakreview=~](#1)

if ( ^IMPSENT[weakreview](#1) & KSWDEP(#2[ksksw]) & KSWDEP(#3,#4[contr]) )
	IMPSENT[weakreview=~](#1)

////////////////////

//excluding tables and mathematical formulae

| #1[lemme:\=] |
if (^IMPSENT(#2) )
   ~.

| #1[lemme:\=] |
if (^IMPSUMMARY(#2) )
   ~.

| #1[lemme:\=] |
if (^SUMMARY(#2) )
   ~.





