/*****************************
ICI, CALCUL DE DEPENDANCES MANQUANTES ET CORRECTIONS
******************************\


Déduction:

1> |FV{?*,#1[last]};IV{?*,#1[last]};GV{?*,#1[last]};verb#1,
    ?*[verb:~],?[verb:~,coord:~],PP{?*,?[last]{?*,#2[last]}}|
   if ( ~?(#1,#2) )
   VMOD(#1,#2)


1> |GV{prep#1,?*,#2[last]}|
   PREPOBJ(#2,#1)



// marquer les noun close
1> |NP[closed]{?*,#1[last]};PP[closed]{?*,?[last]{#1[last]}}|
   if ( #1[closed:~] & #1[closed=+] ) ~



////////////////////////////////////////////////////////////////////////////
//  DESAMBIGUISATION DES RATTACHEMENTS PP
///////////////////////////////////////////////////////////////////////////

// Si NMOD posit1 et NMOD posit2 sur un noun, alors preferer NMOD posit1
1> if ( NMOD[posit1](?[noun],#1) & ^NMOD[posit2](?[noun],#1) ) ~


// "il vous parait normal de..."
// on a 2 OBJspred : "vous" et "normal" : il faut supprimer "vous" qui devient
// VMOD du verbe du copule

1> if ( OBJ$1[spred](#1[copule], #2[pron,dat]) & (#2 < #1) & OBJ(#1,#3[pron:~]) )
  VMOD[arg=+](#1,#2), ~$1.


// tout SPRED ou OPRED est arg
1> if ( ^$1[spred](#1,#2) ) $1[arg=+,spred=+](#1,#2).
1> if ( ^$1[opred](#1,#2) ) $1[arg=+,opred=+](#1,#2).

// "il est possible de faire"
1> if ( DEEPSUBJ$1(#1,#2[inf]) & SUBJ[imperso](#1,?) & OBJ[spred](#1,#3) )
   ADJMOD[arg=+](#3,#2), ~$1.



// Si NMOD[arg] et NMOD[arg:~] on garde l'arg
1> if ( ^NMOD[arg:~](?,#1) & PREPOBJ(#1,?) & NMOD[arg](?,#1) ) ~ 

// Si NMOD[arg] et NMOD[arg:~] on garde l'arg
1> if ( ^NMOD(#1,#2[noun]) & PREPOBJ(#1,?) & NMOD(#3,#2) 
       & #3[closed]:#2[closed] & ~(#1[closed]:#2[closed])  ) ~ 

// Si NMOD[arg] et NMOD[arg:~] on garde l'arg
1> if ( ^NMOD[posit2](?,#1) & PREPOBJ(#1,?) & NMOD[posit1](?,#1) ) ~ 

// Si NMOD posit1 sur un noun sans det et VMOD posit2 sur un verb alors preferer le VMOD
#R-PREF
1> if ( VMOD$1[posit2](#3,#1) & NMOD$2[posit1](#2,#1) & (#1 > #3) & (#1 > #2) & ~DETERM(#2,?) & DETERM(#1,?) )
 ~$2,~$1,VMOD(#3,#1).

// Si ADJMOD non arg et NMOD/VMOD  arg preferer l'arg
1> if ( ^ADJMOD[arg:~](?,#1) & ( NMOD[arg](?,#1) | VMOD[arg](?,#1) ) ) ~ 


// Preference rattachement PP: si NMOD et VMOD et prep!=de ou a, alors VMOD
1> if ( VMOD(?,#1) & ^NMOD[arg:~](?,#1) & PREPOBJ(#1,?[prep,form:~fde,form:~fa]) ) ~

// Preference rattachement PP: si NMOD et VMOD alors NMOD
1> if ( ^VMOD[arg:~](#1,#2[time:~]) & NMOD(#3,#2) & (#1 < #3) & (#3 < #2)  ) ~


// Preference rattachement PP: si VMOD et ADJMOD 
1> if ( VMOD(?,#1) & ^ADJMOD[arg:~](?,#1)
       & PREPOBJ(#1,?) ) ~

// Preference rattachement PP: si NMOD et ADJMOD 
1> if ( NMOD(?,#1) & ^ADJMOD[arg:~](?,#1)
       & PREPOBJ(#1,?) ) ~


// Preference COORDITEMS
1> if ( ^COORDITEMS(#1,#2[maj:~]) &  COORDITEMS(#3,#2) & (#1 < #3) & (#3 < #2) &
     ~PREPOBJ(#2,?) & ~DETERM(#2,?) ) ~




// Correction des rattachements adjectivaux (post) en cas de pbmes d'accord
// si nmod post pas d'accord, alors effacer et chercher d'autres rattachements

#ACCORD
1> |NP{?*,#3[last]};PP{?*,?[last]{?*,#3[last]}},
   ?*[fin:~],
   AP{?*,adj#2};verb#2[partpas]|

   if ( ^NMOD(#1,#2) & (#1 < #2) & (#3 < #1)  &
        // mod de type adj ou vpap sans aux ou avec aux "etre"
       ( #2[adj] | ~AUXIL(#2,?) | ( AUXIL(#2,#4) & #4[form:fetre] ) ) 
       // absence d'accord de ce mod
       &
       ( ( 
          (   (#1[sg,pl:~] & #2[sg:~]) | (#1[pl,sg:~] & #2[pl:~]) |
              (#1[masc,fem:~] & #2[masc:~]) | (#1[fem,masc:~] & #2[fem:~])
          )
          & #2[noagr=+]   //marquer qu'il a pas d'accord
          & ~COORDITEMS(?,#1)
         ) | 
         ( COORDITEMS(#4,#1) &
           (
            ( #1[sg:~] & #2[pl:~] ) |
            ( #1[fem:~] & #2[masc:~] ) |
            ( #4[fem:~] & #2[masc:~]  )
           )
          )
        )
      &
      // accord avec le nouveau rattachement
        ( (#3[sg] & #2[sg]) || (#3[pl] & #2[pl]) )
      & ( (#3[masc] & #2[masc]) || (#3[fem] & #2[fem]) )
   )
  NMOD(#3,#2).





///////////////////////////////////////////////////////////////////////////



// MArquahe sujet passif

1> if ( AUXIL[passive](#1,?) & ^SUBJ(#1,#2) ) SUBJ[passive=+](#1,#2)

1> if ( SUBJ[passive](#1[opred],?) & ^OBJ(#1,#2) ) OBJ[spred=+](#1,#2)

// OBJ   pron[dat] + OBJ NP ==> preferer l'OBJ NP => laisser l'OBJ pron en VMOD seulement
1> if ( ^OBJ(#1,#2[pron,dat]) & VMOD(#1,#2) & OBJ(#1,?[pron:~]) ) ~

// sinon, si pas d'autres OBJ, laisser le pron dat en OBJ

1> if ( OBJ(#1,#2[pron,dat]) & ^VMOD(#1,#2) & ~OBJ(#1,?[pron:~]) ) ~


// si OBJ pron[clit,~dat] et OBJ NP, ce dernier est en fait un VMOD[opred]
1> if ( OBJ(#1,#2[pron,acc,dat:~,gen:~]) & ^OBJ(#1,#3[pron:~]) ) 
      VMOD[opred=+](#1,#3)



// Laisse-le-lui : OBJ(Laisse,le)

1> |SC{?*,FV{?*,?#1[last]}},Pron#2[acc,hyph]|
if ( #2[dat:~] | (~OBJ(#1,?) & #1[sn] ) )
OBJ(#1,#2)

// -lui , -en etc.
1> |SC{?*,FV{?*,?#1[last,asn]}},pron*[hyph],Pron#2[dat,hyph];Pron#2[gen,hyph]|
if ( ~OBJ(#1,#2) )
VMOD(#1,#2)



// il est obligé : OBJ_SPRED(est,grand)
1> |SC{?*,FV{?*,?#1[last,copule]}},(adv+),AP{?*,#2[last]}|
if ( ~obj(#1,?) & ~?(?,#2) )
OBJ[spred=+](#1,#2)

// il trouve normale (de parler...) : OBJ_OPRED(est,grand)
#FFFFFF
1> |SC{?*,FV{?*,?#1[last,opred]}},(adv+),AP{?*,#2[last]}|
if ( ~obj(#1,?) & ~?(?,#2) )
OBJ[opred=+](#1,#2)


// ...le chat qu'il décide de voir:  corriger  OBJ(decide,qu') ===> OBJ(voir,qu')
#CORR-OBJ
1> if ( ^OBJ(#1,#2[conjque]) &  VMOD(#1[desvinf],#3[inf]) & PREPOBJ(#3,#4[form:fde])  )
OBJ(#3,#2)


// BUG XIP: ne marche pas sur Guide.3.E4
// MAINTENANT, BUG corrigé
#r-PBME
1> if ( CONNECT(#1,#2) & ~OBJ[propque](?,#1) & OBJ[spred](#1,#3)
       & ADJMOD(#3,#4) & PREPOBJ(#4,#5[form:fde])
      )
  OBJ(#4,#2)




// sujet de verbe gerondif modifieur: Les arbres environnant la ville sont verts.
// ===> SUBJ(environnant, arbres)
//
1> |NP[nosubj:~, closed:+, fonc=fsubj,!noun:!, !pron:!]{?*,#1[last:+]},  
              ?*[verb:~],
              GV[argsubj:~,argsubj=+,!passive:!,!reflexive:!]{?*,#2[last:+]}|
 if (~SUBJ(#2,?) )
 SUBJ(#2,#1)


// NMOD des NUM sur les NOUN
// ex: les trois jeunes filles :   NMOD(trois,filles)
1> |NP{?*,num#1,?*,#2[last]}|
   if (~determ[num](#2,#1) )
   NMOD[num=+](#2,#1)


// VMOD de "ne pas" sur le verb inf
1> |IV{neg#1[nega,psneg],?*,?#2[last]}|
   VMOD[neg=+](#2,#1)

// ADJMOD entre ADV et ADJ
#ADJMOD-M
1> |AP{?*,adv#1,#2[last]}|
   if (~ADJMOD(#2,#1))
   ADJMOD(#2,#1)

// VMOD entre ADV et VERB
#VMOD-M1
1> |adv#1,verb#2|
   if (~?(?,#1))
   VMOD(#2,#1)


// ADVMOD entre ADV et ADV
1> |AP{?*,adv#1,adv#2}|
   if (~ADVMOD(#2,#1))
   ADVMOD(#2,#1)

// PREPMOD entre ADV et PREP : Peu avant 8h, il....
1> |adv#1,PP{prep#2[form:~fde,form:~fa]}|
   if (~?(?,#1))
   PREPMOD(#2,#1)


// COORD entre NUM
1> |num#1,coord#2,num#3|
   COORDITEMS(#1,#3)


// COORD entre IV
1> |IV{?*,#1[last]},COORD#2,(adv*),IV{?*,#3[last]}|
   if ( ~?(?,#1) |  ~?(?,#3) )
   COORD(#2,#1,#3)


// COORD entre ADJ
1> |AP{?*,adj#1,(adv;punct)*,coord#2,?*[adj:~],adj#3[last]}|
   if (~COORDITEMS(#1,#3) )
   COORD(#2,#1,#3)



// CONNECT entre conj et verb fini
1> |BG{conj#1},?*,FV[last]{?*,#2[last]}|
 if (~CONNECT(#2,#1))
 CONNECT(#2,#1)

// CONNECT entre conj et verb (partpas normalement)
1> |conj#1,?*[verb:~],verb#2|
 if (~CONNECT(#2,?))
 CONNECT(#2,#1)


/////////////////////////////////
// ICI, MARQUAGE TRAITS necessaires
/////////////////////////////////

1> if ( ^CONNECT(#1,#2) & OBJ(?,#2) & #2[pron=+,rel=+] )
  CONNECT[rel=+](#1,#2)

1> if ( ^CONNECT(#1[sn:+,fin],#2) & ~OBJ(#1,?) & ~VMOD(#1[desvinf],#3[inf]) & #2[pron=+,rel=+] )
  CONNECT[rel=+](#1,#2)



1> if ( ^CONNECT(#1[sn:+,fin],#2) & OBJ(#1,#3[verb,sn]) & ~OBJ(#3,?) & 
        #2[pron=+,rel=+] )
  CONNECT[rel=+](#1,#2)


1> |SC{?*,FV{neg,?*,?#1[last]}},(?+[queP:~]),conjque#2[pron:~]|
if ( ~CONNECT(?,#2) & #2[neg=+] )
VMOD[neg=+](#1,#2)



// CORRECTION de COREF dans le cas ou le pron relative est immediatement precede
// d'une COORD l'antecedent est le sujet d'une relative

1> |NP{?*,#1[last:+]};PP{?*,?[last]{?*,#1[last:+]}} , 
      ?*[noun:~,prep:~,pron:~], SC[rel], ?*[noun:~,prep:~,pron:~],
        NP{?*,#2[last:+]};PP{?*,?[last]{?*,#2[last:+]}},
        ?*[noun:~,prep:~,pron:~],
        COORD,
    SC[fonc:~]{ BG{?*,#3[pron:+,rel:+,last:+,terminal]};
	        BG{?*,?[last:+]{?*,#3[rel:+,last:+]}}}|
   if ( ^COREF(#2,#3) )
      COREF[rel=+](#1,#3).



// calcul d'un antecedent aux pron rels qui n'en ont pas (que)

1> |NP{?*,#1[last:+]};PP{?*,?[last]{?*,#1[last:+]}} , 
		?*[noun:~,prep:~,pron:~],
    SC{ BG{?*,#2[pron:+,rel:+,last:+,terminal]};
	        BG{?*,?[last:+]{?*,#2[rel:+,last:+]}}}|
   if ( CONNECT[rel](?,#2) & ~COREF(?,#2) )
   COREF[rel=+,posit1=+](#1,#2).



// SUBJ d'une relative
1> if ( CONNECT[rel](#1,#2[nom,rel]) & ~SUBJ(#1,?) )
        SUBJ(#1,#2)

// OBJ[spred] d'un relative "l'homme qu'il est"
1> if ( CONNECT[rel](#1[form:fetre,sn],#2[conjque,pron,rel]) & ~OBJ(#1,?) )
        OBJ[spred=+](#1,#2)

// OBJ d'une relative : le lait qu'il boit
1> if ( CONNECT[rel](#1[sn],#2[conjque,pron,rel]) & ~OBJ(#1,?) )
        OBJ(#1,#2)

// dont NMOD d'un NP qui le suit
// "l'homme dont la paleur" -> NMOD(paleur,dont) )
1> |BG{pron#1[dat,gen,rel,last]},adv*,NP{?*,#2[last]}|
  NMOD(#2,#1)


// VMOD d'une relative : le lait qu'il boit
1> if ( CONNECT[rel](#1,#2[pron]) & ~NMOD(?,#2) & ~VMOD(#1,#2) & (#2[gen] | #2[dat] | PREPOBJ(#2,?) ) )
        VMOD(#1,#2)


// OPRED OPRED
// VMOD predicat de l'objet : je la crois intelligente => VMOD[pred](crois,intelligente)
1> |SC{?*,FV{?*,#1[last]}};IV{?*,#1[last]};GV{?*,#1[last]},adv*,AP{?*,#2[last]}|
 if ( ~?(?,#2) & #1[opred,sadj] & OBJ(#1,#3) )
  VMOD[opred=+](#1,#2)


//#YAYAY1
//1> |SC{?*,FV{?*,#1[last]}};IV{?*,#1[last]};GV{?*,#1[last]},
//    adv*,(NP),adv*,PP{prep[form:fde],NP{?*,#2[last,time:~]}}|
// if ( #1[opred] & OBJ(#1,#3) & ( VMOD$1[opred:~](#1,#2) | NMOD$1(#3,#2) ) )
//  VMOD[opred=+](#1,#2), ~$1.


//#YAYAY2
//1> |SC{?*,FV{?*,#1[last]}};IV{?*,#1[last]};GV{?*,#1[last]},
//    adv*,(NP),adv*,PP{prep[form:fcomme],NP{?*,#2[last]}}|
// if ( #1[opred] & OBJ(#1,#3) & ( VMOD$1(#1,#2) | NMOD$1(#3,#2) ) )
//  VMOD[opred=+](#1,#2), ~$1.


// Marquage

// vpap n'est pas un adj si il a des dependants noun

1> if ( ?(#1[verb,partpas,adj],#2[noun]) & #1[adj=~] ) ~




///////////////////////////////////////////////////////////////////////////////
// RE-CHUNKING selon EASY
///////////////////////////////////////////////////////////////////////////////

Reconstructeur:

11> adv#1[form:favec],?*#2[verb:~],NP#3 = prep#1,#2,#3.


// Supprimer les niveaux SC
11> SC{?*#1,FV#2[last]} = #1,#2.

12> SC{?*#1,FV#2[last]} = #1,#2.

13> SC{?*#1,FV#2[last]} = #1,#2.

13> INS{?*#1,#2[last]} = #1,#2.


// Dans les NP, supprimer les niveaux NOUNs en plus
14> NOUN{?*#1,NOUN#2[last]} = #1,#2.

// Dans les NP, supprimer le niveau AP
15> NP{?*#1,AP#2{?*#3,#4[last]},?*#5,#6[last]} = NP{#1,#3,#4,#5,#6}.
15> NP{?*#1,AP#2{?*#3,#4[last]}} = NP{#1,#3,#4}.

// Dans les PP, supprimer le niveau NP
16> PP{?*#1,NP#2{?*#3,#4[last]}} = PP{#1,#3,#4}.


// Restreindre le FV du cote droit pour exclure le PAP et eventu. le "pas" de négation

17> FV{?*#1[verb:~],verb#2,?*#3,?#4[partpas,last]} = FV{#1,#2},#3,FV{#4}.

18> FV{?*#1[verb:~],verb#2,?*#3,?#4[partpas,last]} = FV{#1,#2},#3,FV{#4}.

// idem pour le IV
17> IV{?*#1[verb:~],verb#2,?*#3,?#4[partpas,last]} = IV{#1,#2},#3,FV{#4}.
18> IV{?*#1[verb:~],verb#2,?*#3,?#4[partpas,last]} = IV{#1,#2},#3,FV{#4}.

// idem pour le GV
17> GV{?*#1[verb:~],verb#2,?*#3,?#4[partpas,last]} = GV{#1,#2},#3,FV{#4}.
18> GV{?*#1[verb:~],verb#2,?*#3,?#4[partpas,last]} = GV{#1,#2},#3,FV{#4}.


// Etendre le FV a gauche pour inclure le clitique sujet

19> NP{Pron#1[clit,hyph:~]},FV{?*#2,?#3[last]} = FV{#1,#2,#3}. 
19> NP{Pron#1[p1,hyph:~];Pron#1[p2,hyph:~]},FV{?*#2,?#3[last]} = FV{#1,#2,#3}. 


// ou à droite pour inclure le NP clitique sujet inversé (-il/-elle/t-il/...)
19> FV{?*#1,?#2[last]},NP{Pron#3[hyph:+,last]} = FV{#1,#2,#3}. 


// Etendre le FV a droite pour inclure les clitiques

20> FV{?*#1,?#2[last]}, Pron#3[clit:+] = FV{#1,#2,#3}.

21> FV{?*#1,?#2[last]}, Pron#3[clit:+] = FV{#1,#2,#3}.

// Supprimer les BG

22> BG{?*#1,#2[last]} = #1,#2.



// Faire sortirseparer les advADJ coordonnee des AP (groupes adjectivaux)
23> AP{?*#1,adj#2,?*#3[adj:~],adj#4[last]} = AP{#1,#2},#3,AP{#4}.

24> AP{?*#1,adj#2,?*#3[adj:~],adj#4[last]} = AP{#1,#2},#3,AP{#4}.

25> AP{?*#1,adj#2,?*#3[adj:~],adj#4[last]} = AP{#1,#2},#3,AP{#4}.

// Faire sortir les adv des AP (groupes adjectivaux)
26> AP{adv*#1,#2[last]} = #1,AP{#2}.



// Changement des noms de groupes



30> AP#1 = GA#1.
31> NP#1 = GN#1.
32> PP#1 = GP#1.
33> FV#1 = NV#1.
33> IV{prep#1,?*#2,#3[last]} = PV{#1,#2,#3}.
33> GV{prep#1,?*#2,#3[last]} = PV{#1,#2,#3}.
34> IV#1 = NV#1.
34> GV#1 = NV#1.


/////////////////////////////////
// CHUNKS MANQUANTS
/////////////////////////////////


Séquence:


40> GR = adv[coordadv:~].
41> GA = |GR| verb[partpas:+,adj:+].
42> NV = verb.
42> GR = conjque[pron:~,neg:+].
43> GP = pron[rel,dat];pron[rel,gen].
44> GN = pron;conjque[pron].



// METTRE TEMPORAIREMENT LES INCISES/INSERTIONS MARQUEES (parentheses et hyph)
45> INS = punct[form:fopar],?*[form:~fcpar],punct[form:fcpar].
45> INS = punct[form:fhyph],?*[form:~fcpar,sent:~],punct[form:fhyph];sent.


Déduction:

// marquer les closed

50> |GN#9{?*,#1[last]};GP#9{?*,#1[last]}|
   if ( (DETERM(#1,?) | #1[proper] | PREPOBJ(#1,#2[det]) )
         & #1[closed=+] & #9[closed=+]) ~





/////////////////////////////////
// RE-ETIQUETAGE et REORIENTATIONS de DEPENDANCES selon EASY
/////////////////////////////////



// si un PP est un OBJ alors ce n'est pas un NMOD
100>
if ( OBJ(?,#1) & ^NMOD(?,#1) ) ~

// les sujets de VOICI et VOILA sont des obj
100>
if ( ^SUBJ(#1[voicila],#2) ) OBJ(#1,#2).


// Destruction des relations vers l'exterieur (du)

100>
if ( ^SUBJCLIT(#1,#2) )  SUBJ(#1,#2)

// changement de tetes/dependants

// GN antecedent DEP d'une relative ---> pron rel est le DEP
100>if ( ^$1[rel](#1,#2) & COREF[rel](#2,#3) & ~$1(#1,#3) )
     $1(#1,#3)

// DEP d'un aux -----> DEP du participe passe
100>
if ( ^$1(#1[aux],#2) & AUXIL(#3,#1) )
  $1(#3, #2)


// subj d'un participe passe --> sujet de l'aux
100>
if ( ^SUBJ(#1[partpas],#2) & AUXIL(#1,#3) )
 SUBJ(#3, #2)

100>
if ( ^SUBJ(#1[partpas],#2) & AUXIL(#1,#3) )
 SUBJ(#3, #2)


// "quel était le chef?" SUBJ(etait,Quel) et ATT(etait,chef)
// mais pour EASY c'est l'inverse : SUBJ(etait,chef) et ATT(etait,Quel)
100>
if ( SUBJ$1(#1[form:fetre],#2[pron,int]) & OBJ$2[spred](#1,#3) & (#1 < #3) ) 
     SUBJ(#1,#3), OBJ[spred=+](#1,#2), ~$1, ~$2.



// une relative est un MOD-N de l'antecedent

100>if ( CONNECT[rel](#1,#2) & COREF[rel](#3,#2) )
 NMOD[rel=+](#3,#1)



// ici: si on a des NMOD(x,y) et que s et y sont dans le meme NP ou GN,
// alors les remplacer par un seul NMOD(GN,GN) (avec plus tard a-propager=vrai)
// d'abord effacer les NMOD
100>|GN#3{?*,noun#1,?*,noun#2,?*}|
if ( ^NMOD(#1,#2) & #3[apropager=+] ) ~

// ensuite en creer une seule
100>|GN#1[apropager]|
  NMOD[apropager=+](#1,#1)




// GN|GA|GP queP ....   -> NMOD(,queP)
100> |GN{?*,?#1[last]},CONJQUE,?*[fin:~],NV{?*,#2[last,fin]}|
 if ( ~?(?,#2) & AUXIL(?,#2) ) 
 NMOD[propque=+](#1,#2)

// rattacher les PV seuls
#VMOD-PV1
100>|NV{?*,#1[last]},?*[verb:~,strongbreak:~],PV{?*,#2[last]}|
 if ( ~?(?,#2) )
 VMOD(#1,#2)


// COMP: "[PP avec le chat] et [NP le chien]" ==> COMP(avec,chien)

100> if ( COORDITEMS(#1,#2) & PREPOBJ(#1,#3) & ~PREPOBJ(#2,?) )
 COMP[prep=+](#2,#3)

100> if ( COORD(#9,#1,#2) & PREPOBJ(#1,#3) & ~PREPOBJ(#2,?) )
 COMP[prep=+](#2,#3)




/////////////////////////////////////////////////////////////////////////
// TRaduction COORD dans EASY: le "et" porte les dependances des elements coordonees
// COORD COORD COORD



// COORDITEMS -> COORD
100> |coord#1|
  if ( ^COORDITEMS(#2,#3) & (#2 < #1) )
  COORD(#1,#2,#3)

// MARQUER TOUS les ELEMENTS AYANT UNE FONCTION (rattachés en dependances)
100> if ( ?(?,#1) & #1[fonc:~] & #1[fonc=+] ) ~
100> |?#1[fonc:~]{?*,?[last,fonc]}|
     if ( #1[fonc=+] ) ~

100> if ( COORD(#1,?,?) & #1[fonc:~] & #1[fonc=+] ) ~




// COORD MANQUANTES
////////

// COORD entre verb nmod (partpas ou partpres)
#CC-NV-NV
100> |NV{?*,#1[last,partpas];#1[last,partpre]},?*[fonc],(punct[form:fcm]),
      COORD#2,(adv*),NV{?*,#3[last,partpas];#3[last,partpre]}|
   if ( ~COORD(#2,#1,#3) )
   COORD(#2,#1,#3)

// idem entre GA ou GP et 
#CC-GPGA-NVGA1
100> |GA{?*,#1[last]};GP{?*,#1[last]},(adv*),
      COORD#2,(adv*),NV{?*,#3[last,partpas];#3[last,partpre]};GA{?*,#3[last]}|
   if (  ~coord(?,#1,?) & ~coord(?,?,#3) & NMOD(?,#1) & ~?(?,#3)  )
   COORD(#2,#1,#3)

// idem entre GA ou GP sauf qu'on accepte firgule avant la COORD
#CC-GPGA-NVGA2
100> |GA{?*,#1[last]};GP{?*,#1[last]},GP+;NV+,punct[form:fcm],
      COORD#2,(adv*),NV{?*,#3[last,partpas];#3[last,partpre]};GA{?*,#3[last]}|
   if (  ~coord(?,#1,?) & ~coord(?,?,#3) & NMOD(?,#1) & ~?(?,#3)  )
   COORD(#2,#1,#3)


// COORD entre PV
#CC-PV1
100> |PV{?*,#1[last]},?*[verb:~,strongbreak:~,sent:~],COORD#9,PV{?*,#2[last]}|
   if ( ~coord(?,#1,?) & ~coord(?,?,#2) & prepobj(#1,#3) & prepobj(#2,#4)
        & #3[form]:#4[form] )
   COORD(#9,#1,#2)



//
100> if ( COORD(#1,#2,#3) &
        ( ($1[!traits:!](#4,#2) & (#4 < #2) )  | ( $1[!traits:!](#4,#3) & (#3 < #4) ) ) )
        $1[!traits:!](#4,#1)


100> if ( ( COORD(#1,#2,?) | COORD(#1,?,#2) ) & $1(#4,#1) & ^$1(#4,#2) ) ~


100> if ( COORD(#1,#2,#3) & $1[!traits:!](#3,#4[noagr]) & (#3 < #4) )
        $1[!traits:!](#1,#4), ~$1.



//100> if ( COORD(#1,#2,#3) &
//          ( ($1[!traits:!](#2,#4) & (#4 < #2) ) | ( $1[!traits:!](#3,#4) & (#3 < #4)  ) ) )
//        $1[!traits:!](#1,#4)
//
//100> if ( ( COORD(#1,#2,?) | COORD(#1,?,#2) ) & $1(#1,#4) & ^$1(#2,#4) ) ~




/////////////////////////////////////////////////////////////////////////





// changement de noms
100>
if ( ^SUBJ(#1,#2) )  SUJ-V(#1,#2)

100>
if ( ^AUXIL(#1,#2) )  AUX-V(#1,#2)

100>
if ( ^ADJMOD(#1,#2) )  MOD-A(#1,#2)

100>
if ( ^ADVMOD(#1,#2) )  MOD-R(#1,#2)

100>
if ( ^PREPMOD(#1,#2) )  MOD-P(#1,#2)

100>
if ( ^OBJ[spred](#1,#2) )  ATB-SO[spred=+](#1,#2)

100>
if ( ^OBJ(#1[form:fetre],#2) )  ATB-SO[spred=+](#1,#2)

100>
if ( ^OBJ[opred](#1,#2) )  ATB-SO[opred=+](#1,#2)

100>
if ( ^OBJ[spred:~](#1,#2) )  COD-V(#1,#2)

100>
if ( ^VMOD[opred](#1,#2) )  ATB-SO[opred=+](#1,#2)

100>
if ( ^VMOD(#1,#2) & PREPOBJ(#2[time:~],?) )  CPL-V(#1,#2)

100>
if ( ^VMOD(#1,#2) & COORD(#2,#3,?) & PREPOBJ(#3[time:~],?) )  CPL-V(#1,#2)

100>
if ( ^VMOD(#1,#2[pron]) )  CPL-V(#1,#2)

100>
if ( ^VMOD(#1,#2) )  MOD-V(#1,#2)




100>
if ( ^NMOD(#1,#2) )  MOD-N(#1,#2)
100>
if ( ^DETERM[num](#1,#2) )  MOD-N[num=+](#1,#2)


100>
if ( ^CONNECT[rel:~](#1,#2) )
  COMP(#1,#2)


// effacer les dep inutiles
100> if ( ^DETERM(?,?) ) ~
100> if ( ^PREPOBJ(?,?) ) ~
100> if ( ^DEEPOBJ(?,?) ) ~
100> if ( ^NEGAT(?) ) ~
100> if ( ^COREF(?,?) ) ~
100> if ( ^CONNECT(?,?) ) ~


/////////////////////////////////////////////////////////////////////////////
//
// BRICOLES pour la desambiguisiation entre GA et NV
//
// marquer comme partpas un ADJ qui est modifieur d'un nom qui est libre (pas relié)
// l'idée ici est que selon EASY ces ADJ sont des verb PAP
// ex: "Les enfant élevés, les parents 

100> |GA{?*,?#1[partpas,last]}|
    if ( MOD-N(#2,#1) & ~?(?,#2) & #1[verb=+] ) ~


Reconstructeur:
// de GA vers NV

110> GA{?*#1,?#2[partpas,verb,last]} = NV{#1,#2}.





Déduction:

/////
// APPOS
// Le directeur Jean Tavernier
#APPOS1
150> |GN[closed]{?*,#1[noun,last]};GP[closed]{?*,#1[noun,last]},
      GN[proper]{?*,#2[noun,subst:~,last,maj]}|
     if (  #1[maj:~,sg]  )
    APPOS(#2,#1)

// Le directeur J. Tavernier
#APPOS2
150> |GN[closed]{?*,#1[noun,last]};GP[closed]{?*,#1[noun,last]},
      GN{?[initial],?*,#2[noun,subst:~,last,maj]}|
     if (  #1[maj:~] & ~APPOS(#2,#1)  )
    APPOS(#2,#1)

// Le systeme XIP
#APPOS3
150> |GN[closed]{?*,#1[noun,last]};GP[closed]{?*,#1[noun,last]},
      (GP[closed:~]),
      GN{?*,#2[noun,subst:~,last,maj,toutmaj]}|
     if (  #1[maj:~,sg]  & ~APPOS(#2,#1) )
    APPOS(#2,#1)


// Le directeur, Jean Tavernier, ....
#APPOS4
150> |GN[closed]{?*,#1[noun,last]};GP[closed]{?*,#1[noun,last]},
      punct[form:fcm],
      GN{?*,#2[noun,subst:~,last,maj]},
      punct[form:fcm]|
     if (  #1[maj:~]  & ~APPOS(#2,#1) )
    APPOS(#2,#1)

// Jean Tavernier, le directeur du centre, a....
#APPOS5
150> |GN{?*,#1[noun,last]};GP[closed]{?*,#1[noun,last]},
      punct[form:fcm],
      GN{?*,#2[noun,last,maj:~]},(GA*;GP*;NV*[partpas]),
      punct[form:fcm]|
     if (  #1[maj,subst:~]  & ~APPOS(#2,#1) )
    APPOS(#2,#1)

// SI APPOS effacer le NMOD
150> if ( APPOS(#2,#1) & ^MOD-N(#1,#2) ) ~


/////////////////////////////////////////////////////////////////////
// JUXT
///



// MARQUER TOUS les ELEMENTS AYANT UNE FONCTION (rattachés en dependances)

150> if ( ?(?,#1) & #1[fonc:~] & #1[fonc=+] ) ~
150> |?#1[fonc:~]{?*,?[last,fonc]}|
     if ( #1[fonc=+] ) ~
150> if ( COORD(#1,?,?) & #1[fonc:~] & #1[fonc=+] ) ~
150> if ( COORD(#1,#2,?) & #2[fonc:~] & ?(?,#1) & #2[fonc=+] ) ~
150> if ( COORD(#1,?,#2) & #2[fonc:~] & ?(?,#1) & #2[fonc=+] ) ~


#JUXT-GN1
150> |GN{?*,#1[noun,last]};GP{?*,#1[noun,last]},
      ?*[fin:~,coord:~,punct:~],PUNCT,GN{?*,#2[noun,last]}|
   if ( #1[fonc:~] & (COORD(?,#2,?) |  JUXT(?,#2) ) & ~COORD(?,#1,#2) )
     JUXT(#2,#1)

150> |GN{?*,#1[noun,last]},PUNCT,GN{?*,#2[noun,last]}| 
    //if ( ~?(?,#1) & ~?(?,#2) & ~COORD(?,#1,#2) )
    if ( #1[fonc:~] | #2[fonc:~] )
     JUXT(#2,#1)

#JUXT-NV1
150> |GN#3,NV{?*,#1[last]},?*,PUNCT,?*,NV{?*,#2[last]}|
    // if ( ~?(?,#2) & ~?(?,#3) & ~COORD(?,#1,#2) )
    if ( (#1[partpre] | #1[partpas] ) &(#1[fonc:~] | #2[fonc:~]) & ~?(?,#3))
     JUXT(#2,#1)

#JUXT-NV2
150> |NV{?*,#1[last]},?*,PUNCT,?*,NV{?*,#2[last]}|
    // if ( ~?(?,#1) & ~?(?,#2) ) 
    if ( #1[fonc:~] & #2[fonc:~] & ~COORD(?,#1,#2)  )
     JUXT(#2,#1)


#JUXT-INS-NV1
150> |INS{?*,NV{?*,#1[last]}},INS{?*,NV{?*,#2[last]}}|
    if ( #2[fonc:~] & (#1[fonc] | #1[fonc=+]) )
    JUXT(#2,#1)

#JUXT-INS-GN1
150> |INS{?*,GN{?*,#1[last]}},INS{?*,GN{?*,#2[last]}}|
    if ( #2[fonc:~] & (#1[fonc] | #1[fonc=+]) )
    JUXT(#2,#1)

#JUXT-SEQNP
150> if ( ^SEQNP(#1[noun],#2[noun]) & ~JUXT(#2,#1) ) JUXT(#2,#1)
#JUXT-SEQNP2
150> if ( ^SEQNP(#1[verb],#2[verb]) & ~JUXT(#2,#1) ) JUXT(#2,#1)
#JUXT-SEQNP3
150> if ( ^SEQNP(#1[adj],#2[adj]) & ~JUXT(#2,#1) ) JUXT(#2,#1)

150> if ( ^SEQNP(#1,#2) ) ~

// JUXT
/////////////////////////////////////////////////////////////////////


Reconstructeur:

200> INS{?*#1,#2[last,form:fcpar]} = #1,#2.
200> INS{?*#1,#2[last,form:fhyph]} = #1,#2.
200> INS{?*#1,#2[last,sent]} = #1,#2.
