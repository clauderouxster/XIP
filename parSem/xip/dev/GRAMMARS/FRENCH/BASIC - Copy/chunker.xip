//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//! Xerox Research Centre Europe - Grenoble Laboratory
//!
//! Copyright (c) 2000 - 2007 Xerox Corporation.  All Rights Reserved.
//!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


/ the rules in this section define delimiters for input stream: english key word is SPLIT\
// Comented out because in EASY sentences are already defined with <E> and </E>

/DécoupeSéquence:\
/|?*,SENT#| .\



Séquence:

//DiRègles:

/=============== AP ========================================\

//1> AP -> (adv+[last:~]),adj[verb:~].
 
//1> AP -> (adv+[last:~]),(punct+[form:fcm,first:~,last:~]),
//        coord[first:~,last:~],adj+[verb:~, last:~], adj[last:+].


1> AP = (adv*),adj[verb:~],punct[form:fcm],(adv*),adj[verb:~],coord,(adv*),adj[verb:~].
1> AP = (adv*),adj[verb:~],coord,(adv*),adj[verb:~].
1> AP = adv,coord,adv,adj[verb:~].
1> AP = (adv+),adj[verb:~].


DiRègles:
/=============== NP ========================================\

/* avec un nom (det ou pas det) *\
2> NP -> (det+[prep:~]),(coord+[first:~,last:~]),(num+),
        (punct+[first:~,form:fcm]),(punct+[first:~,form:fquotes]),
        (AP+[first:~]),
        noun[last:+,proper:~].

2> NP -> (det+[prep:~]),(coord+[first:~,last:~]),num+,
        (punct+[first:~,form:fcm]),(punct+[first:~,form:fquotes]),
        adv,(AP+[first:~]),
        noun[last:+,proper:~].

/* only adj + noun, with no det, should not follow a noun
   or should not be time:+  *\

2> NP -> |?[noun:~]| AP[first:+],
        noun[last:+,proper:~].

2> NP -> || AP[first:+],
        noun[last:+,proper:~].

2> NP -> AP[first:+],
        noun[last:+,proper:~,time:~].

/* with a det and an adj *\
2> NP -> det+[prep:~],(coord+[first:~,last:~]),(num+),
        (punct+[first:~,form:fcm]),(punct+[first:~,form:~]),
        AP[last:+].
2> NP -> det+[prep:~],(coord+[first:~,last:~]),(num+),
        (punct+[first:~,form:fcm]),(punct+[first:~,form:~]),
        adj[last:+].

/* pronouns *\
2> NP[pron:+,nom:+,clit:!] -> pron[nom:+,prep:~,rel:~,!clit:!].
2> NP[pron:+,nom:+] -> pron[def:+,prep:~,rel:~].
2> NP[pron:+,nom:+,dem:+] -> pron[dem:+,prep:~,rel:~].
2> NP[pron:+,nom:+,poss:+] -> pron[poss:+,prep:~,rel:~].
2> NP[pron:+,nom:+,quant:+] -> pron[quant:+,prep:~,rel:~].

2> NP -> (det+[prep:~]),(coord+[first:~,last:~]),num+[last:+].
2> NP -> det[prep:~].


2> NP -> (det+[prep:~]),(noun+[last:~,tit:+]),(noun+[last:~,maj:+,person:+]),
      (noun+[last:~,proper:+,person:+]),noun[last:+,proper:+,person:+].

2> NP -> (det+[prep:~]),(noun+[last:~,maj:+,person:~]),
      (noun+[last:~,proper:+,person:~]),noun[last:+,proper:+,person:~].


2> NP -> (det+[prep:~]),(noun+[last:~,tit:+]),(noun+[last:~,maj:+]),
        (noun+[last:~,proper:+]),noun[last:+,maj:+].

   

2> NP -> det+[prep:~],(AP+),(noun+[last:~,proper:+,person:+]),
        (noun+[last:~,maj:+,person:+]),
        noun[last:+,proper:+,person:+].

2> NP -> det+[prep:~],(AP+),(noun+[last:~,proper:+,person:~]),
        (noun+[last:~,maj:+,person:~]),
        noun[last:+,proper:+,person:~].

2> NP -> det+[prep:~],(AP+),(noun+[last:~,proper:+]),
        (noun+[last:~,maj:+]),
        noun[last:+,maj:+].

PLRègles:

2> [det:+] < [num:+]
2> [det:+] < [adj:+]
2> [det:+] < [noun:+]
2> [adj:+] < [noun:+,proper:+]
2> [coord:+] < [noun:+,proper:+]



