package eu.project.Cacao.Apps.CLEF;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.Hashtable;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;


public class CLEFDomReader {
    Map<String, String> badToGood;
    String dcNS = "http://purl.org/dc/elements/1.1/";

    /**
     * @param args
     */
    public static void main(String[] args) {
        CLEFDomReader cdr = new CLEFDomReader();
        String in = "allIds2.txt";

        try {
            //			cdr.parseFile(new File(in));
            cdr.readGrepped(new File(in));
            in = "AC04350079";
            System.out.println(cdr.getOAI(in));
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        // TODO Auto-generated method stub
    }

    public String getOAI(String dbId) {
        return badToGood.get(dbId);
    }

    public void readGrepped(File xmlFile) throws IOException {
        badToGood = new Hashtable<String, String>();

        InputStreamReader isr = new InputStreamReader(new FileInputStream(
                    xmlFile), "UTF-8");

        //		BufferedReader xmlFileReader = new BufferedReader(new FileReader(xmlFile));
        BufferedReader xmlFileReader = new BufferedReader(isr);

        //		BufferedReader xmlFileReader = new BufferedReader(new FileReader(xmlFile));
        String xmlData = "";
        String line;
        int counter = 0;

        while ((line = xmlFileReader.readLine()) != null) {
            String oaiId = line;
            String dbId = xmlFileReader.readLine();
            int start = dbId.indexOf(">") + 1;

            //System.out.println(start);
            int end = dbId.indexOf("</dc");
            //System.out.println(end);
            dbId = dbId.substring(start, end);

            if (dbId.startsWith("oai:")) {
                System.out.println("error on id : " + counter);
                System.out.println("dbId " + dbId);

                return;
            }

            badToGood.put(dbId, oaiId);

            if ((counter % 10000) == 0) {
                System.out.println(counter + " Ids");
                System.out.println(dbId + "->" + oaiId);
            }

            counter++;
        }

        System.out.println("Mappings " + counter);
        ;
        System.out.println("Size of the hash " + badToGood.size());
        ;
    }

    private String readFile(File xmlFile) throws IOException {
        InputStreamReader isr = new InputStreamReader(new FileInputStream(
                    xmlFile), "UTF-8");

        //		BufferedReader xmlFileReader = new BufferedReader(new FileReader(xmlFile));
        BufferedReader xmlFileReader = new BufferedReader(isr);

        //		BufferedReader xmlFileReader = new BufferedReader(new FileReader(xmlFile));
        String xmlData = "";
        String line;

        while ((line = xmlFileReader.readLine()) != null) {
            //			xmlData += line.replace("<<", "").replace(">>", "").replace("&lt;", "").replace("&gt;", "");
            xmlData += line;
            System.out.println(line);
        }

        System.out.println(xmlData.substring(xmlData.length() - 50));

        return xmlData;
    }

    public static Document readXMLString(String f) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

        //factory.setNamespaceAware(true);
        //factory.setValidating(true);
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            InputSource is = new InputSource(new StringReader(f));
            is.setEncoding("UTF-8");

            return builder.parse(is);
        } catch (SAXParseException spe) {
            // Error generated by the parser      
            System.out.println("\n** Parsing error" + ", line " +
                spe.getLineNumber() + ", uri " + spe.getSystemId());
            System.out.println("  " + spe.getMessage());

            // Use the contained exception, if any      
            Exception x = spe;

            if (spe.getException() != null) {
                x = spe.getException();
            }

            x.printStackTrace();
        } catch (SAXException sxe) { // Error generated by this application      
                                     // (or a parser-initialization error)      

            Exception x = sxe;

            if (sxe.getException() != null) {
                x = sxe.getException();
            }

            x.printStackTrace();
        } catch (ParserConfigurationException pce) { // Parser with specified options can't be built      
            pce.printStackTrace();
        } catch (IOException ioe) { // I/O error     
            ioe.printStackTrace();
        }

        return null;
    }

    private void parseFile(File xmlFile) throws IOException {
        String xmlDate = readFile(xmlFile);
        Document doc = CLEFDomReader.readXMLString(xmlDate);
        NodeList records = doc.getElementsByTagName("record");
        int size = records.getLength();

        for (int i = 0; i < size; i++) {
            Element record = (Element) records.item(i);
            String realId = record.getElementsByTagName("id").item(0)
                                  .getNodeValue();
            String dbId = record.getElementsByTagNameNS("identifier", dcNS)
                                .item(0).getNodeValue();
            System.out.println(dbId + "->" + realId);
        }
    }

    private void analyzeDir(File dir) throws IOException {
        File[] xmlFiles = dir.listFiles();

        for (int i = 0; i < xmlFiles.length; i++) {
            if (xmlFiles[i].getName().endsWith(".xml")) {
                parseFile(xmlFiles[i]);
            }
        }
    }
}
