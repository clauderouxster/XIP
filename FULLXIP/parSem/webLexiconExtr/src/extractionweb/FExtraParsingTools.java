/*
 * FExtraParsingTools.java
 *
 * Created on April 29, 2008, 3:48 PM
 */

package extractionweb;

import extractionweb.PTableTemplate;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Vector;
import javax.swing.JPanel;

/**
 * Frame displaying the data extracted.
 * @author  CÃ©dric Tarsitano
 */
public class FExtraParsingTools extends javax.swing.JFrame {

    /**
     * A <i>Vector</i> containing the list of JPanel to display.
     */
    protected static Vector <JPanel> mTabList;
    /**
     * True if the key "control" is pressed, false otherwise.
     */
    private static boolean mCtrl;
    
    /** Creates new form FExtraParsingTools */
    public FExtraParsingTools() {
        initComponents();
        createTabList();
        addComponents();
        mCtrl = false;
        addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {}

            @Override
            public void keyPressed(KeyEvent e){
                JPanel panel = mTabList.elementAt(listsTabbedPane.getSelectedIndex());
                if(mCtrl)
                    switch(e.getKeyCode()){
                        case KeyEvent.VK_Y:
                            if(panel instanceof PTableTemplate){
                                PTableTemplate tab = (PTableTemplate) panel;
                                Main.finalLists.setElementAt(tab.redo(), listsTabbedPane.getSelectedIndex());
                            }
                            if(panel instanceof PListTemplate){
                                PListTemplate tab = (PListTemplate) panel;
                                tab.redo();
                            }
                            break;
                        case KeyEvent.VK_Z:
                            if(panel instanceof PTableTemplate){
                                PTableTemplate tab = (PTableTemplate) panel;
                                Main.finalLists.setElementAt(tab.undo(), listsTabbedPane.getSelectedIndex());
                            }
                            if(panel instanceof PListTemplate){
                                PListTemplate tab = (PListTemplate) panel;
                                tab.undo();
                            }
                            break;
                    }
                if(e.getKeyCode() == KeyEvent.VK_CONTROL)
                    mCtrl = true;
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if(e.getKeyCode() == KeyEvent.VK_CONTROL)
                    mCtrl = false;
            }
        });
        //setFocusTraversalKeysEnabled(false);
        //setFocusTraversalPolicyProvider(true);
        Main.centerFramePosition(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        listsTabbedPane = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manage your data");
        setBackground(java.awt.Color.white);

        jPanel1.setBackground(java.awt.Color.white);

        listsTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        listsTabbedPane.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listsTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 972, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listsTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Adds to <i>listsTabbedPane</i> all the panels to display in the JTabbedPane.
     */
    private void addComponents(){
        for (JPanel panel : mTabList) {
            if(panel instanceof PTableTemplate){
                PTableTemplate tab = (PTableTemplate) panel;
                listsTabbedPane.add("Data " + tab.getIndex(), tab);
            }
            if(panel instanceof PListTemplate){
                PListTemplate tab = (PListTemplate) panel;
                listsTabbedPane.add("Data " + tab.getIndex(), tab);
            }
        }
    }
    
    /**
     * Creates all the JPanel to be displayed and adds it to <i>mTabList</i>.
     */
    protected void createTabList(){
        mTabList = new Vector <JPanel>();
        int index  = 0;
        for(Vector <Data> v : Main.finalLists){
            int type = v.firstElement().getType();
            switch(type){
                case Data.PARAGRAPH:
                    mTabList.addElement(new PListTemplate(listsTabbedPane, index++, v));
                    break;
                case Data.LIST:
                case Data.TABLE:
                    mTabList.addElement(new PTableTemplate(listsTabbedPane, index++, v, type));
                    break;
                case Data.EMBED:
                    mTabList.addElement(new PTableTemplate(listsTabbedPane, index++, v, type));
                    System.err.println("EMBED");
            }
        }
    }
    
    /**
     * Adds a new tab to the JTabbedPane <i>listsTabbedPane</i>.
     * @param elements a <i>String</i> array containing the data of the new tab.
     * @param index the index where the new tab will be inserted.
     */
    protected static void addTab(String[] elements, int index){
        PTableTemplate tab = new PTableTemplate(listsTabbedPane, index, Main.insertData(elements, index), Data.LIST);
        listsTabbedPane.add(tab, index);
        listsTabbedPane.setTitleAt(index, listsTabbedPane.getTitleAt(index - 1) + "'");
        mTabList.insertElementAt(tab, index);
        refreshIndex(index + 1);
        listsTabbedPane.setSelectedIndex(index);
    }
    
    /**
     * Updates the indexes of the tabs from <i>index</i> when a new tab is inserted.
     * @param index the first index to be updated.
     */
    protected static void refreshIndex(int index){
        for (int i = index; i < mTabList.size(); ++i) {
            JPanel panel = mTabList.elementAt(i);
            if(panel instanceof PTableTemplate){
                PTableTemplate tab = (PTableTemplate) panel;
                tab.setIndex(i);
                //listsTabbedPane.setTitleAt(i, "Data " + i);
                continue;
            }
            if(panel instanceof PListTemplate){
                PListTemplate tab = (PListTemplate) panel;
                tab.setIndex(i);
                //listsTabbedPane.setTitleAt(i, "Data " + i);
            }
        }
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FExtraParsingTools FEPT = new FExtraParsingTools();
                FEPT.setVisible(true);
                FEPT.requestFocus();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private static javax.swing.JTabbedPane listsTabbedPane;
    // End of variables declaration//GEN-END:variables

}
