#Kif Formalism 

*1 = Mauvais format d'index
*2 = Mauvaise expression après un opérateur
*3 = Mauvaise liste de paramètres
*4 = Mauvaise expression entre parenthèses
*5 = Mauvaise déclaration de CADRE
*6 = Mauvaise déclaration d'argument
*7 = Mauvaise déclaration de FONCTION
*8 = Mauvaise EXPRESSION BOOLÉENNE
*10 = Mauvaise déclaration de SI
*11 = Mauvaise WHILE declaration
*12 = Mauvaise FOR declaration
*13 = Mauvais appel d'une fonction
*14 = Mauvais XPATH
*15 = Mauvaise Instruction
*16 = Mauvais SELECTION
*17 = Mauvais test dans un SELECTION
*18 = Mauvaise expression DANS
*19 = Mauvaise expression AVEC
*20 = Mauvaise déclaration de RÈGLE
*21 = Mauvais PATTERN dans une règle
*22 = Mauvais ESSAIE-CAPTE expression
*23 = Mauvais INTERVAL
*24 = Mauvaise section SINON
*25 = Mauvaise définition de VECTEUR
*26 = Mauvaise définition de DICTIONNAIRE
*27 = Mauvais appel à une fonction dans une référence d'index
*28 = Mauvais commentaires
*29 = Mauvais expression séparée par un "."
*30 = Mauvaise instruction
*31 = '}' manquante

+analyse

#we use the following rules for pre-tokenization: <,>,^,= --->  string in double quote, string in simple quote, token, number

!rc := [\10|\13]

!space := [\32^\9^rc]+

!shell := %# %! .+ rc (space)
!commentaires := (space) %/;28 %/ .* rc (space)

char := [A-Z|a-z|%é|%à|%è|%ç|%ê|%î|%ô|%â|%û|%ù|%Ç|%À|%É|%È|%Ë|%Ê|%Ï|%Î|%Û|%Ü|%ä|%ë|%ï|%ö|%ü|%_|%#]

#^ --> we use tokens
^word := char [char^0-9]*

^type := char [char^0-9]*

anydouble := [%\ .]^[~%"]
anysimple := ~%'

anycolon := [%% .]^[~%;]

operator := %&^%|^[%< %<]^[%> %>]^%+^%-^%*^%/^[%^ %^]^%%^%^

operatoraffectation := %=^[%< %< %=]^[%> %> %=]^[%+ %=]^[%- %=]^[%* %=]^[%/ %=]^[%% %=]^[%& %=]^[%| %=]^[%^ %^ %=]^[%^ %=]

orand := [%| %|]^[%& %&]

comparator := [%~ %=]^[%! %=]^[%< %>]^[%= %=]^[%< %=]^[%> %=]^%<^%>

depend := $with ;19 space word

%declaration := type (space) word (%( parameters %)) (space) (depend) (space) (%= [bodyrule^expressions])

treepattern := %| ;21 .+ %|  

xipblocend := %} {%;}

xipbloc := %{;20.+ xipblocend

bodyrule := (space) [[treepattern (space) ($if)]^[$if]]  [xipbloc^anycolon+]

declarationending := %;

%frame := (space) $cadre
 space;5type (space) [declarationending^instruction] (space)

instruction := %{ ;15 (space) (blocs) (space) %}

arguments := (space) declaration (%, ;6 arguments)

typefunction := $polynomial^$fonction^$autoexecute


%function := (space) typefunction space;7word %( (arguments) %) (space) [declarationending^instruction] (space)


%sousbloc := [declaration^affectation^expressions]
%bloc := (space)  sousbloc ;30 (space) %;
%complexbloc := switch^trycatch^loop^test^for
%blocs := [commentaires^frame^complexbloc^function^bloc]+

%analyse := (shell) (space) (commentaires) ([[%k^%K] [%i^%I] [%f^%F]] (space) %:) (space) blocs (space)

subfunc := %. ;27 regularcall
subfuncbis := %. regularcall
subvar := %. ;29 variable
regularcall := word %(;13 (parameters) %) (interval^indexes^subfunc)

returncall := $retour
breakpointcall := $pointarret
breakcall := $arret
continuecall := $continue

call :=  breakpointcall^breakcall^continuecall^regularcall^returncall

sep := (space) %: (space)

indexes := %[;1 expressions %] (interval^indexes^subfunc)
interval := %[ (space) (numbers) sep;23 (numbers) (space) %] (interval^indexes^subfunc)
variable := word (interval^indexes^subfuncbis^subvar)

%affectation := variable (space) operatoraffectation;14(space) [bodyrule^expressions]

operatorin := $notin^$in^[$not space $in]
operationin := operatorin;18 expression ($with ;19 (space) word) (space)
operation := operator (space) expressions
comparison := comparator (space) expressions


%list :=  (space) expressions (space) (%, (space) list)
valvector := %[;25(list) (space) %]

dkey := astringdouble^astringsimple
dvalue := expressions

%dico := (space) dkey (space) %: (space) dvalue (space) (%, (space) dico)
valmap := %{ ;26 (dico) (space) %}

negation := %~^[$not space]
parameters := expressions (%, ;3 parameters)
optional := %( ;4 expressions %)
expression := (space) (negation) (space) [xpathexpression^abool^astringdouble^astringsimple^anumber^call^optional^variable^valvector^valmap] (space)
expressions := expression (operationin^operation^comparison)
numbers := expression (operation)

#< --> we use the doublestring map
<astringdouble := %" anydouble* %"
#> --> we use the simplestring map
>astringsimple := %' anysimple* %'

#= --> we use numbers
=anumber := (%-) [0-9]+ (%. [0-9]+)
abool := $true^$false

optionalboolean := %( booleanexpression %)
booleanexpression := expressions (space) (orand ;8 (space) optionalboolean|booleanexpression)
%test := (space) $if (space) %( ;10 booleanexpression %) (space) [instruction^complexbloc^bloc] (space) (testelif) (space) ($else ;24 (space) [instruction^complexbloc^bloc]) (space)
%testelif := (space) $elif (space) %( ;10 booleanexpression %) (space) [instruction^complexbloc^bloc] (space) (testelif) (space) ($else ;24 (space) [instruction^complexbloc^bloc]) (space)
%loop := (space) $while (space) %( ;11 booleanexpression %) (space) [instruction^complexbloc^bloc] (space)
%for := (space) $for (space) %( ;12 [affectation^expression] %; booleanexpression %; [affectation^expression] %) (space) [instruction^complexbloc^bloc] (space)
%switch := (space) $switch (space) %( ;16 expression %) (space) %{ ;31 (space) testswitch+ (space) %} (space)
%trycatch := (space) $try (space) %{ ;22 (space) blocs (space) %} (space) $catch (space) %( (space) (word) (space) %) (space) [%;^[%{ ;22 (space) blocs (space) %}]]  (space)
testswitch := [default^astringdouble^astringsimple^anumber^abool] (space) %: ;17 (space) [instruction^complexbloc^bloc] (space)
default := $default 

xpathexpression := %@ word (space) %(;14 .* %) %- %> word %( .* %)



