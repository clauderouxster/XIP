/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * TypeOverview.java
 *
 * Created on March 14, 2007, 11:14 AM
 */
package com.xerox.xrce.xipui.goldminer.ui;

import com.xerox.xrce.xipui.goldminer.ui.table.*;
import com.xerox.xrce.xipui.util.*;
import com.xerox.xrce.xipui.goldminer.*;
import com.xerox.xrce.xipui.modules.*;
import com.xerox.xrce.xipui.ui.UIConstants;
import com.xerox.xrce.xipui.ui.XIPUIUtilities;
import com.xerox.xrce.xipui.util.TableSorter;
import java.awt.BorderLayout;
import java.awt.Cursor;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import javax.swing.event.*;

/**
 *
 * @author  vgrassau
 */
public class TypeOverview extends PanelModule implements ListSelectionListener {

    /** Creates new form TypeOverview
     * @param context 
     */
    public TypeOverview(ModuleContext context) {
        super(context);
        initComponents();
        this.limit.setModel(new SpinnerNumberModel(200, 0, 1000, 5));
        this.limitLabel.setIcon(XIPUIUtilities.getIcon(UIConstants.CONCEPT));
        this.detailLabel.setIcon(XIPUIUtilities.getIcon(UIConstants.DATA_3));
    }

    public void init() {
        GoldminerEngine engine = (GoldminerEngine) getProperty("goldminerEngine");
        listTypes.setCellRenderer(new BasicElementRenderer(engine));
        listTypes.removeListSelectionListener(this);
        Set<Integer> ids = engine.getTypesList().keySet();
        Vector v = new Vector<Integer>(ids);
        Collections.sort(v);
        listTypes.setListData(v);
        listTypes.addListSelectionListener(this);
        listTypes.setSelectedIndex(0);
    }

    public void close() {
    }

    public void valueChanged(ListSelectionEvent evt) {
        Integer i = (Integer) listTypes.getSelectedValue();
        GoldminerEngine engine = (GoldminerEngine) getProperty("goldminerEngine");
        Overview overview = engine.getOverview();
        scrollDetails.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        scroll.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        LemmasTask task = new LemmasTask(overview, i);
        CompleteTask task2 = new CompleteTask(i);
        task.execute();
        task2.execute();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        listLabel = new javax.swing.JLabel();
        detailLabel = new javax.swing.JLabel();
        lemmasLabel = new javax.swing.JLabel();
        scroll = new javax.swing.JScrollPane();
        limit = new javax.swing.JSpinner();
        limitLabel = new javax.swing.JLabel();
        srcoll2 = new javax.swing.JScrollPane();
        listTypes = new javax.swing.JList();
        scrollDetails = new javax.swing.JScrollPane();

        setLayout(new java.awt.GridBagLayout());

        setBackground(new java.awt.Color(255, 255, 255));
        listLabel.setBackground(new java.awt.Color(153, 255, 153));
        listLabel.setFont(new java.awt.Font("Arial", 0, 11));
        listLabel.setText("List of defined Types");
        listLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        listLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(listLabel, gridBagConstraints);

        detailLabel.setBackground(new java.awt.Color(153, 255, 153));
        detailLabel.setFont(new java.awt.Font("Arial", 0, 11));
        detailLabel.setText("Details");
        detailLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        detailLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(detailLabel, gridBagConstraints);

        lemmasLabel.setBackground(new java.awt.Color(153, 255, 153));
        lemmasLabel.setFont(new java.awt.Font("Arial", 0, 11));
        lemmasLabel.setText("Related Lemmas");
        lemmasLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        lemmasLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(lemmasLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(scroll, gridBagConstraints);

        limit.setFont(new java.awt.Font("Arial", 0, 11));
        limit.setMaximumSize(new java.awt.Dimension(70, 20));
        limit.setMinimumSize(new java.awt.Dimension(70, 20));
        limit.setPreferredSize(new java.awt.Dimension(70, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(limit, gridBagConstraints);

        limitLabel.setFont(new java.awt.Font("Arial", 2, 11));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(limitLabel, gridBagConstraints);

        listTypes.setFont(new java.awt.Font("Arial", 0, 11));
        listTypes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listTypes.setMaximumSize(new java.awt.Dimension(150, 300));
        listTypes.setMinimumSize(new java.awt.Dimension(150, 300));
        listTypes.setPreferredSize(new java.awt.Dimension(150, 300));
        srcoll2.setViewportView(listTypes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(7, 7, 7, 7);
        add(srcoll2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 6, 6);
        add(scrollDetails, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel detailLabel;
    private javax.swing.JLabel lemmasLabel;
    private javax.swing.JSpinner limit;
    private javax.swing.JLabel limitLabel;
    private javax.swing.JLabel listLabel;
    private javax.swing.JList listTypes;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JScrollPane scrollDetails;
    private javax.swing.JScrollPane srcoll2;
    // End of variables declaration//GEN-END:variables

    /**
     * This class permit to get all the BaiscElement in the database and print their labels and occuencies
     */
    private class LemmasTask extends SwingWorker<Void, TableModel> {

        private Overview overview;
        private int idType;

        public LemmasTask(Overview overview, int idType) {
            this.overview = overview;
            this.idType = idType;
        }

        protected void done() {
            scroll.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

        protected Void doInBackground() {
            Integer l = (Integer) limit.getValue();
            Map<String, Integer> map = overview.getLemmasFromFunction(idType, l.intValue());
            TableModel model = new ConceptTableModel(map);
            publish(model);
            return null;
        }

        protected void process(java.util.List<TableModel> list) {
            TableModel model = list.get(0);
            limitLabel.setText(String.valueOf(model.getRowCount()));
            TableSorter sorter = new TableSorter(model);
            JPanel panel = new JPanel();
            panel.setLayout(new BorderLayout());
            JTable table = new JTable();
            table.setModel(sorter);
            sorter.setTableHeader(table.getTableHeader());
            panel.add(table.getTableHeader(), BorderLayout.PAGE_START);
            panel.add(table, BorderLayout.CENTER);
            scroll.setViewportView(panel);
        }
    }

    private class CompleteTask extends SwingWorker<Void, TableModel> {

        private int idType;

        public CompleteTask(int idType) {
            this.idType = idType;
        }

        protected Void doInBackground() {
            Map details = new HashMap();
            GoldminerEngine engine = (GoldminerEngine) getProperty("goldminerEngine");
            Overview overview = engine.getOverview();
            BasicElement element = engine.getBasicElement(idType);
            if (element != null) {
                details.put("Label", element.getLabel());
                details.put("weight", element.getWeight());
                if (element.getDescription() != null) {
                    details.put("Description", element.getDescription());
                }
            }
            details.putAll(overview.getDetailsForFunction(idType));
            boolean[][] editable = new boolean[details.size()][2];
            Object[][] data = new Object[details.size()][2];
            Set set = details.keySet();
            int i = 0;
            for (Iterator it = set.iterator(); it.hasNext(); i++) {
                Object key = it.next();
                data[i][  
                0] = key;
                data[i][  
                1] = details.get(key);
                editable[i][  0] = false;
                editable[i][  1] = false;

            }
            TableModel model = new PropertiesTableModel(data, editable);
            publish(model);
            return null;
        }

        protected void done() {
            scrollDetails.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

        protected void process(java.util.List<TableModel> list) {
            TableModel model = list.get(
                    0);
            JTable table = new JTable();

            table.setModel(model);
            JPanel panel = new JPanel();
            panel.setLayout(new BorderLayout());
            panel.add(table.getTableHeader(), BorderLayout.PAGE_START);
            panel.add(table, BorderLayout.CENTER);
            scrollDetails.setViewportView(panel);
        }
    }
}//end of class

