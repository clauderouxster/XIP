/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * SetupBasicElement.java
 *
 * Created on October 30, 2006, 9:37 AM
 */
package com.xerox.xrce.xipui.goldminer.ui;

import com.xerox.xrce.xipui.goldminer.BasicElement;
import com.xerox.xrce.xipui.goldminer.GoldminerEngine;
import com.xerox.xrce.xipui.modules.ModuleContext;
import com.xerox.xrce.xipui.modules.PanelModule;
import com.xerox.xrce.xipui.util.ListTools;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.Color;

/**
 *
 * @author  vgrassau
 */
public abstract class SetupBasicElement extends PanelModule {
    //les element utilises, initialise avec goldminerEngine

    protected Vector<BasicElement> elements;
    protected Vector<BasicElement> elementsToRemove;
    //le dernier element selectione
    protected BasicElement selectedElement;

    /** Creates new form SetupBasicElement
     * @param context 
     */
    public SetupBasicElement(ModuleContext context) {
        super(context);
        initComponents();
        elements = new Vector();
        elementsToRemove = new Vector();
        setElements();
        setListElements();
        noSelectionElement();

        SpinnerNumberModel modelWeight = new SpinnerNumberModel(1, 1, 100, 1);
        weight.setModel(modelWeight);
        setLabels();

        panelElement.setBackground(new Color(128, 255, 128, 128));
        panelElement.setOpaque(false);
    }

    protected abstract void setLabels();

    private void setAllListElements() {
        GoldminerEngine engine = (GoldminerEngine) getProperty("goldminerEngine");
        Map<Integer, BasicElement> map = engine.getMapOfAvailableElement();
        Vector<BasicElement> availables = new Vector();
        Iterator<Integer> iteMap = map.keySet().iterator();
        while (iteMap.hasNext()) {
            BasicElement element1 = map.get(iteMap.next());
            if (!elements.contains(element1)) {
                availables.add(element1);
            }
        }
        availables = ListTools.sortEnumeration(Collections.enumeration(availables), true);
        this.allElementList.setListData(availables);
        allElementList.repaint();

    }

    protected void setListElements() {
        elements = (Vector) ListTools.sortEnumeration(Collections.enumeration(elements), true).clone();
        this.listElement.setListData(elements);
    }

    public abstract boolean apply();

    /**
     *Initialise le vecteur de basicElement utilises
     */
    protected abstract void setElements();

    protected abstract void addNewElement(BasicElement element);

    /**
     *Renvoie un table d'Element selectionne parmi la liste des elements
     *a utiliser dans goldminer.
     *@return
     */
    public BasicElement[] getSelectedElements() {
        Object[] values = this.listElement.getSelectedValues();

        if (values != null) {

            BasicElement[] selecteds = new BasicElement[values.length];
            for (int i = 0; i < values.length; i++) {
                selecteds[i] = (BasicElement) values[i];
            }
            return selecteds;

        } else {
            return null;
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
// <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        
        AvailableDialog = new javax.swing.JDialog();
        scroller3 = new javax.swing.JScrollPane();
        allElementList = new javax.swing.JList();
        okSelection = new javax.swing.JButton();
        labelDialog = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        addElement = new javax.swing.JButton();
        removeElement = new javax.swing.JButton();
        element = new javax.swing.JPanel();
        panelElement = new javax.swing.JPanel();
        realName = new javax.swing.JLabel();
        labelText = new javax.swing.JTextField();
        scroller2 = new javax.swing.JScrollPane();
        decriptionText = new javax.swing.JTextArea();
        weight = new javax.swing.JSpinner();
        label = new javax.swing.JLabel();
        labelWeight = new javax.swing.JLabel();
        labelDescription = new javax.swing.JLabel();
        labelList = new javax.swing.JLabel();
        scroller = new javax.swing.JScrollPane();
        listElement = new javax.swing.JList();
        
        AvailableDialog.getContentPane().setLayout(new java.awt.GridBagLayout());
        
        AvailableDialog.setAlwaysOnTop(true);
        AvailableDialog.setModal(true);
        allElementList.setFont(new java.awt.Font("Arial", 0, 11));
        scroller3.setViewportView(allElementList);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        AvailableDialog.getContentPane().add(scroller3, gridBagConstraints);
        
        okSelection.setFont(new java.awt.Font("Arial", 0, 11));
        okSelection.setText("Ok");
        okSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okSelectionActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        AvailableDialog.getContentPane().add(okSelection, gridBagConstraints);
        
        labelDialog.setBackground(new java.awt.Color(153, 255, 153));
        labelDialog.setFont(new java.awt.Font("Arial", 0, 11));
        labelDialog.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDialog.setText("Available Element");
        labelDialog.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labelDialog.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        AvailableDialog.getContentPane().add(labelDialog, gridBagConstraints);
        
        jLabel1.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel1.setText("Select one or several elements in the list.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        AvailableDialog.getContentPane().add(jLabel1, gridBagConstraints);
        
        
        setLayout(new java.awt.GridBagLayout());
        
        title.setFont(new java.awt.Font("Arial", 0, 11));
        title.setText("Defined Element");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(title, gridBagConstraints);
        
        addElement.setFont(new java.awt.Font("Arial", 0, 11));
        addElement.setText("Add");
        addElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addElementActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 8, 2, 4);
        add(addElement, gridBagConstraints);
        
        removeElement.setFont(new java.awt.Font("Arial", 0, 11));
        removeElement.setText("Remove");
        removeElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeElementActionPerformed(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 4);
        add(removeElement, gridBagConstraints);
        
        element.setLayout(new java.awt.GridBagLayout());
        
        element.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelElement.setLayout(new java.awt.GridBagLayout());
        
        realName.setBackground(new java.awt.Color(153, 255, 153));
        realName.setFont(new java.awt.Font("Arial", 1, 11));
        realName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        realName.setText("Real Name");
        realName.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        realName.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        panelElement.add(realName, gridBagConstraints);
        
        labelText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                labelTextKeyReleased(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelElement.add(labelText, gridBagConstraints);
        
        scroller2.setOpaque(false);
        decriptionText.setColumns(20);
        decriptionText.setRows(5);
        decriptionText.setMaximumSize(new java.awt.Dimension(160, 90));
        decriptionText.setMinimumSize(new java.awt.Dimension(160, 90));
        decriptionText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                decriptionTextKeyReleased(evt);
            }
        });
        
        scroller2.setViewportView(decriptionText);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 8, 8);
        panelElement.add(scroller2, gridBagConstraints);
        
        weight.setValue(1);
        weight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                weightStateChanged(evt);
            }
        });
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelElement.add(weight, gridBagConstraints);
        
        label.setFont(new java.awt.Font("Arial", 0, 11));
        label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label.setText("Label");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        panelElement.add(label, gridBagConstraints);
        
        labelWeight.setFont(new java.awt.Font("Arial", 0, 11));
        labelWeight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWeight.setText("Weight");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        panelElement.add(labelWeight, gridBagConstraints);
        
        labelDescription.setFont(new java.awt.Font("Arial", 0, 11));
        labelDescription.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDescription.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        panelElement.add(labelDescription, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        element.add(panelElement, gridBagConstraints);
        
        labelList.setBackground(new java.awt.Color(153, 255, 153));
        labelList.setFont(new java.awt.Font("Arial", 0, 11));
        labelList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelList.setText("Element Used");
        labelList.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labelList.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 6, 6);
        element.add(labelList, gridBagConstraints);
        
        listElement.setFont(new java.awt.Font("Arial", 0, 11));
        listElement.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listElementValueChanged(evt);
            }
        });
        
        scroller.setViewportView(listElement);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.33;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        element.add(scroller, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(element, gridBagConstraints);
        
    }// </editor-fold>//GEN-END:initComponents

    private void okSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okSelectionActionPerformed
        int[] elementToAdd = this.allElementList.getSelectedIndices();
        if (elementToAdd != null) {
            for (int i = 0; i < elementToAdd.length; i++) {
                ListModel model = allElementList.getModel();
                BasicElement element1 = (BasicElement) model.getElementAt(elementToAdd[i]);
                addNewElement(element1);
            }
        }
        //on retrie elements
        setListElements();
        this.listElement.repaint();
        this.AvailableDialog.setVisible(false);
    }//GEN-LAST:event_okSelectionActionPerformed

    protected void noSelectionElement() {
        realName.setText("no element selected");
        realName.setOpaque(false);
        //on ne peut pas changer les labels
        labelText.setText("no element selected");
        labelText.setEnabled(false);
        //on ne peut pas changer les descriptions
        decriptionText.setText("no element selected");
        decriptionText.setEnabled(false);
        //pas de poids...
        this.weight.setEnabled(false);
        this.panelElement.setOpaque(false);
        panelElement.setBorder(null);
    }

    public void close() {
    }

    private void listElementSelected() {
        selectedElement = (BasicElement) this.listElement.getSelectedValue();
        int[] indices = this.listElement.getSelectedIndices();
        boolean several = indices != null && indices.length > 1;

        if (selectedElement != null) {
            panelElement.setOpaque(true);
            panelElement.setBorder(BorderFactory.createRaisedBevelBorder());
            if (!several) {
                realName.setText(selectedElement.getRealName());
                realName.setOpaque(true);

                labelText.setText(selectedElement.getLabel());
                labelText.setEnabled(true);

                decriptionText.setText(selectedElement.getDescription());
                decriptionText.setEnabled(true);
                weight.setEnabled(true);
                weight.setValue(selectedElement.getWeight());
            } else {
                realName.setText("several selected");
                realName.setOpaque(false);
                //on ne peut pas changer les labels
                labelText.setText("several selected");
                labelText.setEnabled(false);
                //on ne peut pas changer les descriptions
                decriptionText.setText("several selected");
                decriptionText.setEnabled(false);
                weight.setEnabled(true);
            }
        } else {
            noSelectionElement();
        }
        repaint();
    }

    private void listElementValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listElementValueChanged
        listElementSelected();
    }//GEN-LAST:event_listElementValueChanged

    private void decriptionTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_decriptionTextKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && selectedElement != null) {
            selectedElement.setDescription(decriptionText.getText());
        }
    }//GEN-LAST:event_decriptionTextKeyReleased

    private void weightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_weightStateChanged
        BasicElement[] selection = this.getSelectedElements();
        Integer newWeight = (Integer) this.weight.getValue();
        for (int i = 0; i < selection.length; i++) {
            selection[i].setWeight(newWeight);
        }

    }//GEN-LAST:event_weightStateChanged

    private void labelTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_labelTextKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && selectedElement != null) {

            selectedElement.setLabel(labelText.getText());
        }
    }//GEN-LAST:event_labelTextKeyReleased

    private void removeElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeElementActionPerformed
        BasicElement[] selection = this.getSelectedElements();
        if (selection != null) {
            for (int i = 0; i < selection.length; i++) {
                elements.remove(selection[i]);
                this.elementsToRemove.addElement(selection[i]);
            }
            setListElements();

        }
    }//GEN-LAST:event_removeElementActionPerformed

    private void addElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addElementActionPerformed
        this.setAllListElements();
        this.AvailableDialog.setSize(200, 400);
        this.AvailableDialog.setVisible(true);



    }//GEN-LAST:event_addElementActionPerformed
// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog AvailableDialog;
    private javax.swing.JButton addElement;
    private javax.swing.JList allElementList;
    private javax.swing.JTextArea decriptionText;
    private javax.swing.JPanel element;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel label;
    private javax.swing.JLabel labelDescription;
    protected javax.swing.JLabel labelDialog;
    protected javax.swing.JLabel labelList;
    private javax.swing.JTextField labelText;
    private javax.swing.JLabel labelWeight;
    private javax.swing.JList listElement;
    private javax.swing.JButton okSelection;
    private javax.swing.JPanel panelElement;
    private javax.swing.JLabel realName;
    private javax.swing.JButton removeElement;
    private javax.swing.JScrollPane scroller;
    private javax.swing.JScrollPane scroller2;
    private javax.swing.JScrollPane scroller3;
    protected javax.swing.JLabel title;
    private javax.swing.JSpinner weight;
// End of variables declaration//GEN-END:variables
}
