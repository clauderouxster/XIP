/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 ****************************************************************************************
 * Copyright (c) 2006 Xerox Corporation                                                 *
 * Xerox Research Centre Europe - Grenoble                                              *
 * All Rights Reserved                                                                  *
 * Copyright protection claimed includes all forms and matters of copyrightable         *
 * material and information now allowed by statutory or judicial law or                 *
 * hereinafter granted, including without limitation, material generated from           *
 * the software programs which are displayed on the screen such as icons,               *
 * screen display looks, etc. All rights reserved. No part of this document             *
 * may be reproduced, stored in a retrieval system, or transmitted, in any              *
 * form or by any means, electronic, mechanical, photocopied, recorded, or              *
 * otherwise, without prior written consent from XEROX corporation.                     *
 ****************************************************************************************
 */
package com.xerox.xrce.xipui.ide.generator.ui;

import com.xerox.xrce.xipui.Xip;
import com.xerox.xrce.xipui.ide.generator.CommonMethod;
import com.xerox.xrce.xipui.ide.generator.RuleGenerator;
import com.xerox.xrce.xipui.ui.graph.*;

import com.xerox.xrce.xipui.modules.ModuleContext;
import java.util.*;
import com.xerox.jxip.*;

/**
 *
 * @author csaillet
 */
public class RightContextPanel extends GeneralPanel {

    /** Creates a new instance of RightContextPanel
     * @param context
     * @param id 
     */
    public RightContextPanel(ModuleContext context, int id) {
        super(context, id);
        initComponents();
        repaint();
        setProperty("panel_", this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        String typeRule = (String) this.getProperty("choiceRule");
        choiceRuleBox.setSelectedItem(typeRule);

        String choiceCategory = (String) this.getProperty("category");
        choiceCategoryBox.setSelectedItem(choiceCategory);

    }// </editor-fold>

    public void initPanel() {
        ruleLabel.setEnabled(false);
        choiceRuleBox.setEnabled(false);
        dependencyLabel.setVisible(false);
        dependencyBox.setVisible(false);
        longestBox.setVisible(false);
        indexBox.setVisible(false);
        addRuleButton.setVisible(false);
        outputLabel.setVisible(false);
        fileRadioButton.setVisible(false);
        bufferRadioButton.setVisible(false);
        clearTempFileButton.setVisible(false);
        String typeRule = (String) this.getProperty("choiceRule");
        if (typeRule.equals("Tagging")) {
            categoryLabel.setVisible(false);
            choiceCategoryBox.setVisible(false);
        } else if (typeRule.equals("Sequence") || typeRule.equals("ID Rule") || typeRule.equals("Term")) {
            categoryLabel.setEnabled(false);
            choiceCategoryBox.setEnabled(false);
        }
        if (typeRule.equals("ID Rule") | typeRule.equals("Tagging")) {
            setPageDoc("/com/xerox/xrce/xipui/ide/generator/doc/rightContextEnd.htm");
        } else if (typeRule.equals("Sequence") || typeRule.equals("Term")) {
            setPageDoc("/com/xerox/xrce/xipui/ide/generator/doc/rightContext.htm");
        }
        String rule = (String) this.getProperty("rule");
        jTextArea2.setText(rule);
        jTextArea2.setToolTipText(rule);

    }

    public void back() {
        clear();
        LeftContextPanel left = new LeftContextPanel(getModuleContext(), id);
        left.leftContP();
    }

    public void next() {
        String typeRule = (String) this.getProperty("choiceRule");
        if (typeRule.equals("Sequence") || typeRule.equals("Term")) {
            IndexLastWordPanel indexPanel = new IndexLastWordPanel(getModuleContext(), id);
            indexPanel.indexWordP();
        } else if (typeRule.equals("ID Rule") | typeRule.equals("Tagging")) {
            AddRule addR = new AddRule(getModuleContext(), id);
            addR.addRule();
        }
    }

    public void clear() {
        CommonMethod cmethod = new CommonMethod();
        Vector vecrightselect = (Vector) this.getProperty("vectRightSelect");
        if (vecrightselect.size() != 0) {
            cmethod.unselectXipNodeFromVector(vecrightselect, getModuleContext().getSessionGraph(id));
        }
        vecrightselect.clear();
        this.setProperty("vectRightSelect", vecrightselect);
    }

    public void close() {
    }

    public void indexWord() {
    }

    public void lonMatch() {
    }

    public void generateRule() {
        try {
            CommonMethod cmethod = new CommonMethod();
            SessionGraph session = getModuleContext().getSessionGraph(false, id);
            Vector v = session.getNodeGraphSelected();
            Vector selectedFeatures = new Vector();
            if (v != null) {
                Iterator ite = v.iterator();
                while (ite.hasNext()) {
                    NodeGraph ng = (NodeGraph) ite.next();
                    selectedFeatures.add(ng);
                }
            }
            Vector vecbodyselect = (Vector) this.getProperty("vectBodySelect");
            Vector vecheadselect = (Vector) this.getProperty("vectHeadSelect");
            Vector vecleftselect = (Vector) this.getProperty("vectLeftSelect");
            String choiceRuleType = (String) this.getProperty("choiceRule");
            Vector veckeepselect = (Vector) this.getProperty("vectKeepSelect");
            Vector veckselect = new Vector(veckeepselect);
            Vector veckeep = cmethod.subVector(veckselect, vecheadselect);
            Vector vecright = cmethod.vectNodeGraphToSelectedObject(getModuleContext(), id, selectedFeatures);
            // verifie que les anciens contexts sont toujours selectionne sinon les reselectionne
            if (choiceRuleType.equals("Sequence") || choiceRuleType.equals("ID Rule") || choiceRuleType.equals("Term")) {
                long body = cmethod.verifyNodeSelection(vecright, vecbodyselect);
                if (body != -1) {
                    warning("Wrong selection !");
                    session.selectXipNode(body);
                }
                long left = cmethod.verifyNodeSelection(vecright, vecleftselect);
                if (left != -1) {
                    warning("Wrong selection !");
                    session.selectXipNode(left);
                }
            } else if (choiceRuleType.equals("Tagging")) {
                long tag = cmethod.verifyNodeSelection(vecright, vecheadselect);
                if (tag != -1) {
                    warning("Wrong selection !");
                    session.selectXipNode(tag);
                }
                long left = cmethod.verifyNodeSelection(vecright, vecleftselect);
                if (left != -1) {
                    warning("Wrong selection !");
                    session.selectXipNode(left);
                }
                if (veckeep.size() != 0) {
                    long keep = cmethod.verifyNodeSelection(vecright, veckeep);
                    if (keep != -1) {
                        warning("Wrong selection !");
                        session.selectXipNode(keep);
                    }
                }
            } else {
                DEBUG_LOG.trace("type of rule !!!!");
            }
            // enleve de la selection les noeuds des autres contexts pour avoir les noeuds du contexte droit
            if (choiceRuleType.equals("Sequence") || choiceRuleType.equals("ID Rule") || choiceRuleType.equals("Term")) {
                Vector vec = cmethod.subVector(vecright, vecbodyselect);
                Vector vecrightselect = cmethod.subVector(vec, vecleftselect);
                this.setProperty("vectRightSelect", vecrightselect);
            } else {
                Vector vec = cmethod.subVector(vecright, vecheadselect);
                Vector vecrightselect = cmethod.subVector(vec, vecleftselect);
                this.setProperty("vectRightSelect", vecrightselect);
                if (veckeep.size() != 0) {
                    Vector vecleftsel = cmethod.subVector(vecrightselect, veckeep);
                    this.setProperty("vectRightSelect", vecleftsel);
                }
            }
            Vector vecrightselect = (Vector) this.getProperty("vectRightSelect");
            // verifie que le contexte droit est bien a la droite du body ou du head
            long minRight = cmethod.findMinSelObject(vecrightselect);
            if (choiceRuleType.equals("Sequence") || choiceRuleType.equals("ID Rule") || choiceRuleType.equals("Term")) {
                long maxBody = cmethod.findMaxSelObject(vecbodyselect);
                if (maxBody > minRight) {
                    warning("Wrong selection !");
                    long index = ((NodeGraph) v.lastElement()).getIndex();
                    session.unSelectXipNode(index);
                    cmethod.removeNodeGraphFromIndex(vecrightselect, index);
                }
            } else if (choiceRuleType.equals("Tagging")) {
                long maxHead = cmethod.findMaxSelObject(vecheadselect);
                if (veckeep.size() != 0) {
                    //Vector tagg = cmethod.concVector(veckeep,vecheadselect);
                    veckeep.addAll(vecheadselect);
                    long maxTagg = cmethod.findMaxSelObject(veckeep);
                    if (maxTagg > minRight) {
                        warning("Wrong selection !");
                        long index = ((NodeGraph) v.lastElement()).getIndex();
                        session.unSelectXipNode(index);
                        cmethod.removeNodeGraphFromIndex(vecrightselect, index);
                    }
                } else {
                    if (maxHead > minRight) {
                        warning("Wrong selection !");
                        long index = ((NodeGraph) v.lastElement()).getIndex();
                        session.unSelectXipNode(index);
                        cmethod.removeNodeGraphFromIndex(vecrightselect, index);
                    }
                }
            }
            //verifie que le noeud selectionne n est pas une feuille si oui deselectionne
            boolean stop = false;
            Iterator it = vecrightselect.iterator();
            while (it.hasNext() && stop == false) {
                SelectedObject selobj = (SelectedObject) it.next();
                Object xnode = selobj.getObject();
                long index = ((NodeGraph) v.lastElement()).getIndex();
                if (xnode instanceof XipDependency) {
                    warning("You can't choose the dependencies !");
                    session.unSelectXipDependency(index);
                    stop = true;
                } else if (xnode instanceof XipLeaf) {
                    warning("You can't choose the leaves !");
                    session.unSelectXipNode(index);
                    stop = true;
                }
            }
            Vector vect = new Vector();
            Xip xip = getProject().getXip();
            XipResult xresult = xip.getXipResult();
            Vector vOfXipUnit = xresult.getXipUnits();
            XipUnit unit = (XipUnit) vOfXipUnit.get(0);
            XipNode root1 = unit.getRoot();
            int ghandler = getModuleContext().getProject().getGhandler();
            CommonMethod.readXipNode(root1, vect, xip, ghandler);
//            cmethod.printXipNode(vect);
            // appel a la creation de la regle
            RuleGenerator generator = new RuleGenerator(getModuleContext(), id);
            String rule = generator.constructRules(vect);
            if (rule.equals("problem")) {
                long index = ((NodeGraph) v.lastElement()).getIndex();
                session.unSelectXipNode(index);
            } else {
                DEBUG_LOG.trace("rule = " + rule);
                this.setProperty("rule", rule);
                jTextArea2.setText(rule);
                jTextArea2.setToolTipText(rule);
            }
        } catch (Exception e) {
            DEBUG_LOG.trace(e);
        }
    }

    public void rightContP() {
        this.setProperty("panel", "right");
        RightContextPanel right = new RightContextPanel(getModuleContext(), id);
        this.refreshTabbedPane(right);
    }
}

