/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 ****************************************************************************************
 * Copyright (c) 2006 Xerox Corporation                                                 *
 * Xerox Research Centre Europe - Grenoble                                              *
 * All Rights Reserved                                                                  *
 * Copyright protection claimed includes all forms and matters of copyrightable         *
 * material and information now allowed by statutory or judicial law or                 *
 * hereinafter granted, including without limitation, material generated from           *
 * the software programs which are displayed on the screen such as icons,               *
 * screen display looks, etc. All rights reserved. No part of this document             *
 * may be reproduced, stored in a retrieval system, or transmitted, in any              *
 * form or by any means, electronic, mechanical, photocopied, recorded, or              *
 * otherwise, without prior written consent from XEROX corporation.                     *
 ****************************************************************************************
 */
package com.xerox.xrce.xipui.ide.generator.ui;

import com.xerox.xrce.xipui.Xip;
import com.xerox.xrce.xipui.ide.generator.*;
import com.xerox.xrce.xipui.ui.graph.*;


import com.xerox.xrce.xipui.modules.ModuleContext;
import java.util.*;
import com.xerox.jxip.*;

/**
 *
 * @author csaillet
 */
public class HeadPanel extends GeneralPanel {

    /** Creates a new instance of HeadPanel
     * @param context
     * @param id 
     */
    public HeadPanel(ModuleContext context, int id) {
        super(context, id);
        initComponents();
        repaint();
        setPageDoc("/com/xerox/xrce/xipui/ide/generator/doc/head.htm");
        setProperty("panel_", this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        String typeRule = (String) this.getProperty("choiceRule");
        choiceRuleBox.setSelectedItem(typeRule);
    }// </editor-fold>

    public void initPanel() {
        addRuleButton.setVisible(false);
        clearTempFileButton.setVisible(false);
        ruleLabel.setEnabled(false);
        choiceRuleBox.setEnabled(false);
        dependencyLabel.setVisible(false);
        dependencyBox.setVisible(false);
        categoryLabel.setVisible(false);
        choiceCategoryBox.setVisible(false);
        longestBox.setVisible(false);
        indexBox.setVisible(false);
        outputLabel.setVisible(false);
        fileRadioButton.setVisible(false);
        bufferRadioButton.setVisible(false);
        String rule = (String) this.getProperty("rule");
        jTextArea2.setText(rule);
        jTextArea2.setToolTipText(rule);
    }

    public void next() {
        Vector vecheadselect = (Vector) this.getProperty("vectHeadSelect");
        if (vecheadselect.size() == 0) {
            warning("select head please!");
        } else {
            KeepTagPanel keep = new KeepTagPanel(getModuleContext(), id);
            keep.keepTagP();
        }
    }

    public void back() {
        clear();
        SelectionRulePanel selection = new SelectionRulePanel(getModuleContext(), id);
        selection.selectionP();
    }

    public void clear() {
        CommonMethod cmethod = new CommonMethod();
        Vector vecheadselect = (Vector) this.getProperty("vectHeadSelect");
        if (vecheadselect.size() != 0) {
            cmethod.unselectXipNodeFromVector(vecheadselect, getModuleContext().getSessionGraph(id));
        }
        vecheadselect.clear();
        this.setProperty("vectHeadSelect", vecheadselect);
    }

    public void close() {
    }

    public void indexWord() {
    }

    public void lonMatch() {
    }

    public void generateRule() {
        try {
            CommonMethod cmethod = new CommonMethod();
            SessionGraph session = getModuleContext().getSessionGraph(false, id);
            Vector v = session.getNodeGraphSelected();
            Vector selectedFeatures = new Vector();
            if (v != null) {
                Iterator ite = v.iterator();
                while (ite.hasNext()) {
                    NodeGraph ng = (NodeGraph) ite.next();
                    selectedFeatures.add(ng);
                }
            }
            Vector vecheadselect = cmethod.vectNodeGraphToSelectedObject(getModuleContext(), id, selectedFeatures);
            this.setProperty("vectHeadSelect", vecheadselect);
            // verifie si une dependance a ete selectionne et la deselectionne
            boolean stop = false;
            Iterator it = vecheadselect.iterator();
            while (it.hasNext() && stop == false) {
                SelectedObject selobj = (SelectedObject) it.next();
                Object xnode = selobj.getObject();
                long index = ((NodeGraph) v.lastElement()).getIndex();
                if (xnode instanceof XipDependency) {
                    warning("You can't choose the dependencies !");
                    session.unSelectXipDependency(index);
                    stop = true;
                }
            }
            Vector vect = new Vector();
            Xip xip = getProject().getXip();
            XipResult xresult = xip.getXipResult();
            Vector vOfXipUnit = xresult.getXipUnits();
            XipUnit unit = (XipUnit) vOfXipUnit.get(0);
            XipNode root1 = unit.getRoot();
            int ghandler = getModuleContext().getProject().getGhandler();
            CommonMethod.readXipNode(root1, vect, xip, ghandler); // vect contient les noeuds de l arbre
//            cmethod.printXipNode(vect);

            RuleGenerator generator = new RuleGenerator(getModuleContext(), id);
            String rule = generator.constructRules(vect);
            if (rule.equals("problem")) {
                long index = ((NodeGraph) v.lastElement()).getIndex();
                session.unSelectXipNode(index);
            } else {
                DEBUG_LOG.trace("head rule = " + rule);
                this.setProperty("rule", rule);
                jTextArea2.setText(rule);
                jTextArea2.setToolTipText(rule);
            }
        } catch (Exception e) {
            DEBUG_LOG.trace(e);
        }
    }

    public void headTag() {
        this.setProperty("panel", "head");
        HeadPanel head = new HeadPanel(getModuleContext(), id);
        this.refreshTabbedPane(head);
    }
}
