/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 ****************************************************************************************
 * Copyright (c) 2007 Xerox Corporation                                                 *
 * Xerox Research Centre Europe - Grenoble                                              *
 * All Rights Reserved                                                                  *
 * Copyright protection claimed includes all forms and matters of copyrightable         *
 * material and information now allowed by statutory or judicial law or                 *
 * hereinafter granted, including without limitation, material generated from           *
 * the software programs which are displayed on the screen such as icons,               *
 * screen display looks, etc. All rights reserved. No part of this document             *
 * may be reproduced, stored in a retrieval system, or transmitted, in any              *
 * form or by any means, electronic, mechanical, photocopied, recorded, or              *
 * otherwise, without prior written consent from XEROX corporation.                     *
 ****************************************************************************************
 */
package com.xerox.xrce.xipui.ide.ui;

import com.xerox.xrce.xipui.CorpusElement;
import com.xerox.xrce.xipui.modules.ModuleContext;
import com.xerox.xrce.xipui.ui.*;
import com.xerox.xrce.xipui.util.FileTools;
import javax.swing.*;
import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;

/**
 *
 * @author  Vianney Grassaud
 */
public class ResultTree extends AbstractResult implements ActionListener {

    private Map<CorpusElement, Object> results;
    private boolean withXMLViewer = false;

    /**
     *Sets if the Viewer will be a XML viewer
     *@param b true to use an XML viewer, the result have to be a XML document
     */
    public void setWithXMLViewer(boolean b) {
        this.withXMLViewer = b;
    }

    /**
     *Returns if the viewer for results used is a XML Viewer
     *@return true is XML viewer will be used
     */
    public boolean isWithXMLViewer() {
        return this.withXMLViewer;
    }

    /**
     *Creates a new ResultTree for a basic output
     *@param context the context to use
     *@param id the id of this result
     *@param documents the map of the results
     *@param xml to use a XML viewer for the result, then the results have to be XML documents
     */
    public ResultTree(ModuleContext context, int id, Map<CorpusElement, Object> documents, boolean xml) {
        super(context, id);
        this.results = documents;
        initComponents();
        add(toolBar, BorderLayout.PAGE_START);
        setWithXMLViewer(xml);
        Set<CorpusElement> corpus = results.keySet();
        for (Iterator<CorpusElement> it = corpus.iterator(); it.hasNext();) {
            CorpusElement ce = it.next();
            this.listResult.addItem(ce);
        }
        info.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        SizeTask task = new SizeTask();
        task.execute();
        listResult.setRenderer(new CeRenderer());
        listResult.addActionListener(this);
        listResult.setSelectedIndex(0);
        setIcon(XIPUIUtilities.getIcon(UIConstants.PARSE));
    }

    /**
     *Returns the size in Kbytes from a bytes size
     *@param  size in bytes only
     *@return the size in Kbytes
     */
    private long getHumanSize(long size) {
        long humanSize = (size / 1024);
        long rest = size % 1024;
        if (rest > 0) {
            humanSize += 1;
        }
        return humanSize;
    }

    /**
     *Sets the name for this result
     *
     */
    public void setResultName() {
        this.resultName = "Parse (" + getId() + ")";
    }

    /**
     *Close the module, clear the results and the graphicals components
     */
    public void closeModule() {
        this.results.clear();
        this.removeAll();
    }

    /**
     *Called when an action is performed on the ComboBox.
     *show the analysis result of a file that had been parsed
     *@param event the event
     *
     */
    public void actionPerformed(ActionEvent event) {
        CorpusElement ce = (CorpusElement) listResult.getSelectedItem();
        if (ce != null) {
            this.showResult(ce);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panel = new javax.swing.JPanel();
        scroller = new javax.swing.JScrollPane();
        listResult = new javax.swing.JComboBox();
        info = new javax.swing.JLabel();
        panelInfo = new javax.swing.JPanel();
        sizeCorpus = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        parentLabel = new javax.swing.JLabel();
        pathCorpus = new javax.swing.JLabel();
        encodingLabel = new javax.swing.JLabel();
        encodingCorpus = new javax.swing.JLabel();
        fileLabel = new javax.swing.JLabel();
        fileCorpus = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        setBackground(new java.awt.Color(255, 255, 255));
        panel.setLayout(new java.awt.GridBagLayout());

        panel.setBackground(new java.awt.Color(255, 255, 255));
        panel.setFont(new java.awt.Font("Arial", 0, 11));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panel.add(scroller, gridBagConstraints);

        listResult.setFont(new java.awt.Font("Arial", 0, 11));
        listResult.setMaximumSize(new java.awt.Dimension(32767, 22));
        listResult.setMinimumSize(new java.awt.Dimension(23, 22));
        listResult.setPreferredSize(new java.awt.Dimension(28, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        panel.add(listResult, gridBagConstraints);

        info.setBackground(new java.awt.Color(255, 255, 255));
        info.setFont(new java.awt.Font("Arial", 0, 11));
        info.setText("...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        panel.add(info, gridBagConstraints);

        panelInfo.setLayout(new java.awt.GridBagLayout());

        panelInfo.setBackground(new java.awt.Color(255, 255, 255));
        sizeCorpus.setBackground(new java.awt.Color(255, 255, 255));
        sizeCorpus.setFont(new java.awt.Font("Arial", 0, 11));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelInfo.add(sizeCorpus, gridBagConstraints);

        sizeLabel.setBackground(new java.awt.Color(153, 255, 153));
        sizeLabel.setFont(new java.awt.Font("Arial", 0, 11));
        sizeLabel.setText("Size");
        sizeLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        sizeLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelInfo.add(sizeLabel, gridBagConstraints);

        parentLabel.setBackground(new java.awt.Color(153, 255, 153));
        parentLabel.setFont(new java.awt.Font("Arial", 0, 11));
        parentLabel.setText("Parent");
        parentLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        parentLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelInfo.add(parentLabel, gridBagConstraints);

        pathCorpus.setBackground(new java.awt.Color(255, 255, 255));
        pathCorpus.setFont(new java.awt.Font("Arial", 0, 11));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelInfo.add(pathCorpus, gridBagConstraints);

        encodingLabel.setBackground(new java.awt.Color(153, 255, 153));
        encodingLabel.setFont(new java.awt.Font("Arial", 0, 11));
        encodingLabel.setText("Encoding");
        encodingLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        encodingLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelInfo.add(encodingLabel, gridBagConstraints);

        encodingCorpus.setFont(new java.awt.Font("Arial", 0, 11));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelInfo.add(encodingCorpus, gridBagConstraints);

        fileLabel.setBackground(new java.awt.Color(153, 255, 153));
        fileLabel.setFont(new java.awt.Font("Arial", 0, 11));
        fileLabel.setText("File");
        fileLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        fileLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelInfo.add(fileLabel, gridBagConstraints);

        fileCorpus.setFont(new java.awt.Font("Arial", 0, 11));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panelInfo.add(fileCorpus, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 8, 8);
        panel.add(panelInfo, gridBagConstraints);

        add(panel, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    /**
     *Creates a label of an Error
     *@param ce, the corpusElement where an error had been detected
     *@param error the error.
     *
     */
    private JLabel addError(CorpusElement ce, Object error) {
        JLabel label = new JLabel();
        StringBuilder text = new StringBuilder("<html><body><b>");
        text.append("<p>");
        text.append(ce.getFile().getAbsolutePath());
        text.append("( " + ce.getEncoding() + " )</p>");
        text.append("<p>ERROR : ");
        text.append(error.toString());
        text.append("</p>");
        text.append("</b></body></html>");
        label.setFont(UIConstants.DEFAULT_FONT);
        label.setForeground(Color.RED);
        label.setText(text.toString());
        return label;
    }

    /**
     *show the result of a CorpusElement
     *@param ce the CorpusElement ot show the result of the analysis
     */
    public void showResult(CorpusElement ce) {
        Object res = results.get(ce);
        if (res instanceof File) {
            if (isWithXMLViewer()) {
                try {
                    JComponent table = XMLTreeTable.getFullXMLTreeTable((File) res, ce.getEncoding());
                    scroller.setViewportView(table);
                } catch (Exception e) {
                    this.scroller.setViewportView(addError(ce, e));
                }
            } else {
                ReadTask task = new ReadTask((File) res, ce.getEncoding());
                scroller.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                task.execute();
            }
        } else {
            this.scroller.setViewportView(addError(ce, res));
        }
        this.pathCorpus.setText(ce.getParent());
        this.sizeCorpus.setText(getHumanSize(ce.size()) + " Kb");
        this.encodingCorpus.setText(ce.getEncoding());
        this.fileCorpus.setText(ce.getFile().getAbsolutePath());
    }

    /**
     *The renderer for the Combobox
     */
    private class CeRenderer implements ListCellRenderer {

        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            JLabel label = new JLabel();
            label.setFont(UIConstants.DEFAULT_FONT);
            label.setOpaque(true);
            //color selection
            if (isSelected) {
                label.setForeground(new Color(255, 255, 153));
                label.setBackground(new Color(204, 0, 0));
            } else {
                label.setForeground(Color.BLACK);
                label.setBackground(Color.white);
            }
            // add some information instead of only the name of the CorpusElement parsed
            if (value instanceof CorpusElement) {
                CorpusElement ce = (CorpusElement) value;
                label.setText(ce.getName());
                label.setToolTipText(ce.getFile().getAbsolutePath());
                label.setIcon(XIPUIUtilities.getIcon(UIConstants.TEXT));
                if (ce.isInput() || ce.isPartOfInput()) {
                    label.setIcon(XIPUIUtilities.getIcon(UIConstants.INPUT));
                    label.setText("input");
                }
                if (ce.isXML()) {
                    label.setIcon(XIPUIUtilities.getIcon(UIConstants.XML));
                }
            } else {
                //if no CorpusElement
                label.setText(value.toString());
            }
            return label;
        }
    }

    /**
     *This class permits to read the result of the analysis in a
     *Thread, and, when finished show the result in the EDT
     */
    private class ReadTask extends SwingWorker<Boolean, String> {

        private File file;
        private String encoding;

        /**
         *Creates the read task
         *@param file the file to read
         *@param encoding, the encoding to use
         */
        public ReadTask(File file, String encoding) {
            this.file = file;
            this.encoding = encoding;
        }

        /**
         *When the task is finished, change the state of the cursor
         */
        @Override
        protected void done() {
            boolean ok = false;
            try {
                ok = get();
            } catch (Exception e) {
            }
            if (!ok) {
                JLabel label = new JLabel("Can't read the file : " + file);
                label.setForeground(Color.RED);
                scroller.setViewportView(label);
            }
            scroller.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            this.file = null;
            this.encoding = null;
        }

        /**
         *reading of the file
         *@return true if the file was well read
         */
        protected Boolean doInBackground() {
            boolean success = false;
            try {
                String content = FileTools.read(file, encoding);
                publish(content);
                success = true;
            } catch (Exception e) {
                log.error("ERROR", e);
                success = false;
            }
            return success;
        }

        /**
         *Show the results add a TextArea in the scroller
         */
        // @Override not accepted on mac
        protected void process(java.util.List<String> texts) {
            JTextArea text = new JTextArea();
            text.setFont(new Font("Courier", Font.PLAIN, 12));
            text.setLineWrap(false);
            text.setEditable(true);
            text.setColumns(50);
            text.setText(texts.get(0));
            text.setVisible(true);
            scroller.setViewportView(text);
            texts = null;
        }
    }

    private class SizeTask extends SwingWorker<Void, Long> {

        @Override
        protected void done() {
            info.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

        @Override
        protected Void doInBackground() {
            long totalSize = 0;
            long error = 0;
            Set<CorpusElement> corpus = results.keySet();
            for (Iterator<CorpusElement> it = corpus.iterator(); it.hasNext();) {
                CorpusElement ce = it.next();
                totalSize += ce.size();
                if (!(results.get(ce) instanceof File)) {
                    error += 1;
                }
            }
            publish(getHumanSize(totalSize), error);
            return null;
        }

        // @Override not accepted on mac
        protected void process(java.util.List<Long> list) {
            Long size = list.get(0);
            Long errors = list.get(1);
            StringBuilder builder = new StringBuilder("<html><body>");
            builder.append("<p><u>Total:</u> ");
            builder.append(results.size());
            builder.append(" file(s) ");
            builder.append("<font color=\"red\">");
            builder.append("<u> error(s)</u> :&nbsp;");
            builder.append(errors);
            builder.append(" </font>");
            builder.append("<u> Size</u> :&nbsp;");
            builder.append(size);
            builder.append(" Kb </p></body></html>");
            info.setText(builder.toString());
            builder = null;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel encodingCorpus;
    private javax.swing.JLabel encodingLabel;
    private javax.swing.JLabel fileCorpus;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JLabel info;
    private javax.swing.JComboBox listResult;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JLabel parentLabel;
    private javax.swing.JLabel pathCorpus;
    private javax.swing.JScrollPane scroller;
    private javax.swing.JLabel sizeCorpus;
    private javax.swing.JLabel sizeLabel;
    // End of variables declaration//GEN-END:variables
}
