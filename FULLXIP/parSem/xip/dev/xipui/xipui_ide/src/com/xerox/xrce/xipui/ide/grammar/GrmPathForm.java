/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * GrmPathForm.java
 *
 * Created on January 10, 2006, 12:02 PM
 */
package com.xerox.xrce.xipui.ide.grammar;

import com.xerox.xrce.xipui.GrmFile;
import com.xerox.xrce.xipui.VarEnv;
import com.xerox.xrce.xipui.ui.FileMenu;
import com.xerox.xrce.xipui.exception.UnknownVarEnvException;
import com.xerox.xrce.xipui.modules.ModuleContext;
import com.xerox.xrce.xipui.modules.PanelModule;
import com.xerox.xrce.xipui.ui.UIConstants;
import com.xerox.xrce.xipui.ui.XIPUIUtilities;
import javax.swing.*;
import java.awt.*;
import javax.swing.event.*;
import javax.swing.table.*;
import java.util.*;
import java.io.*;

/**
 *
 * @author  vgrassau
 */
public class GrmPathForm extends PanelModule implements TableModelListener {

    private Object[][] data;

    /** Creates new form GrmPathForm */
    public GrmPathForm(ModuleContext properties) {
        super(properties);
        initComponents();
        tablePanel.add(table.getTableHeader(), BorderLayout.PAGE_START);
        init();
        table.getModel().addTableModelListener(this);
        browse.setIcon(XIPUIUtilities.getIcon(UIConstants.OPEN));
        browse.setText("");
        addButton.setIcon(XIPUIUtilities.getIcon(UIConstants.ADD));
        removeButton.setIcon(XIPUIUtilities.getIcon(UIConstants.DELETE));
    }

    public void close() {
        this.isClosed = true;
        removeAll();
    }

    public void tableChanged(TableModelEvent e) {
        JMenuBar mb = (JMenuBar) getProperty(MENUBAR);
        if (mb != null) {
            FileMenu fileMenu = (FileMenu) mb.getComponent(0);
            fileMenu.setSavable(true);
        }
        int row = e.getFirstRow();
        Object name = ((TableModel) e.getSource()).getValueAt(row, 0);
        Object val = ((TableModel) e.getSource()).getValueAt(row, 1);
        data[row][0] = name;
        data[row][1] = val;
        if (name != null && val != null && !name.equals("") && !val.equals("")) {
            GrmFile grm = (GrmFile) getProperty("GRM_EDITED");
            try {
                grm.eval(name + "=" + val);
                if (!grm.check()) {
                    warning("Your grm is incorrectly written");
                }
            } catch (UnknownVarEnvException ex) {
                warning("You have an undefined variable : " + ex.variableName);
            }
        }
    }

    private void init() {
        GrmFile grm = (GrmFile) getProperty("GRM_EDITED");
        if (grm != null) {
            Vector paths = grm.getVariables();
            data = new Object[paths.size()][2];
            for (int i = 0; i < paths.size(); i++) {
                VarEnv variable = (VarEnv) paths.get(i);
                data[i][0] = variable.getName();
                data[i][1] = variable.getValue();
            }
        } else {
            setEnabled(false);
        }
        reloadTable();
    }

    private void reloadTable() {
        this.table.setModel(new javax.swing.table.DefaultTableModel(data, new String[]{"Variable Name", "Value"}));
        table.repaint();
        table.revalidate();
    }

    public Vector getAllPath() {
        int cptPath = table.getRowCount();
        Vector v = new Vector();
        for (int i = 0; i < cptPath; i++) {
            Object name = table.getValueAt(i, 0);
            Object value = table.getValueAt(i, 1);
            if (name != null && !name.toString().equals("") && value != null) {
                VarEnv var = new VarEnv(name.toString(), value.toString());
                v.add(var);
            }
        }
        return v;
    }

    public void setEnabled(boolean b) {
        this.table.setEnabled(b);
        this.addButton.setEnabled(b);
        this.removeButton.setEnabled(b);
        this.browse.setEnabled(b);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        browseDialog = new javax.swing.JDialog();
        browseChooser = new javax.swing.JFileChooser();
        title = new javax.swing.JRadioButton();
        panel = new javax.swing.JPanel();
        tablePanel = new javax.swing.JPanel();
        table = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        browse = new javax.swing.JButton();
        move = new javax.swing.JButton();

        browseChooser.setDialogTitle("Path");
        browseChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        browseDialog.getContentPane().add(browseChooser, java.awt.BorderLayout.CENTER);

        setLayout(new java.awt.GridBagLayout());

        setBackground(new java.awt.Color(255, 255, 255));
        title.setBackground(java.awt.Color.pink);
        title.setSelected(true);
        title.setText("Paths");
        title.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 102, 0)));
        title.setBorderPainted(true);
        title.setFocusPainted(false);
        title.setMargin(new java.awt.Insets(0, 0, 0, 0));
        title.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(title, gridBagConstraints);

        panel.setLayout(new java.awt.GridBagLayout());

        panel.setBackground(new java.awt.Color(255, 255, 255));
        tablePanel.setLayout(new java.awt.BorderLayout());

        tablePanel.setBackground(new java.awt.Color(255, 255, 255));
        table.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Variable Name", "Value"
            }
        ));
        tablePanel.add(table, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 4);
        panel.add(tablePanel, gridBagConstraints);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 4);
        panel.add(addButton, gridBagConstraints);

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panel.add(removeButton, gridBagConstraints);

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panel.add(browse, gridBagConstraints);

        move.setText("Move");
        move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        panel.add(move, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 4);
        add(panel, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    public void move() {
        moveActionPerformed(null);
    }

    private void moveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveActionPerformed
        int row = table.getSelectedRow();
        if (row != -1) {
            Object[][] newData = data;
            if (row != table.getRowCount() - 1) {
                Object toMoveName = data[row][0];
                Object toMoveVal = data[row][1];
                Object toChangeName = data[row + 1][0];
                Object toChangeVal = data[row + 1][1];
                newData[row + 1][0] = toMoveName;
                newData[row + 1][1] = toMoveVal;
                newData[row][0] = toChangeName;
                newData[row][1] = toChangeVal;
                reloadTable();
                table.setRowSelectionInterval(row + 1, row + 1);
            } else {
                int size = table.getRowCount();
                Object[][] nData = new Object[size][2];
                nData[0][0] = data[size - 1][0];
                nData[0][1] = data[size - 1][1];
                for (int i = 1; i < size; i++) {
                    nData[i][0] = data[i - 1][0];
                    nData[i][1] = data[i - 1][1];
                }
                data = nData;
                reloadTable();
                table.setRowSelectionInterval(0, 0);
            }

        }


    }//GEN-LAST:event_moveActionPerformed

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        //ouverture de la fenetre de selection de repertoire
        GrmFile grm = (GrmFile) getProperty("GRM_EDITED");
        if (grm != null) {
            browseChooser.setCurrentDirectory(grm.getFile());
        }
        int returnVal = browseChooser.showOpenDialog(browseDialog);
        browseDialog.setVisible(true);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File path = browseChooser.getSelectedFile();
            int row = table.getSelectedRow();
            //int col = table.getSelectedColumn();
            if (row < table.getRowCount()) {
                data[row][1] = path.getAbsolutePath();
            }
        }
        browseDialog.setVisible(false);
        reloadTable();

    }//GEN-LAST:event_browseActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int row2Delete = table.getSelectedRow();
        if (row2Delete != -1) {
            int cptPath = table.getRowCount();
            Object[][] newData = new Object[cptPath - 1][2];
            int j = 0;
            for (int i = 0; i < cptPath; i++) {
                if (i != row2Delete) {
                    newData[j][0] = table.getValueAt(i, 0).toString();
                    newData[j][1] = table.getValueAt(i, 1).toString();
                    j++;
                }
            }
            data = newData;
            reloadTable();
        }

    }//GEN-LAST:event_removeButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        //ajout d'un nouvelle ligne 
        int cptPath = table.getRowCount();
        Object[][] newData = new Object[cptPath + 1][2];
        for (int i = 0; i < cptPath; i++) {
            newData[i][0] = table.getValueAt(i, 0).toString();
            newData[i][1] = table.getValueAt(i, 1).toString();
        }
        data = newData;
        reloadTable();
        table.setRowSelectionInterval(cptPath, cptPath);

    }//GEN-LAST:event_addButtonActionPerformed

    public void add() {
        addButtonActionPerformed(null);

    }

    public int getPathCount() {
        return table.getRowCount();
    }

    public void setPath(String name, String val, int row) {
        try {
            table.setValueAt(name, row, 0);
            table.setValueAt(val, row, 1);
        } catch (Exception e) {
        }
    }

    private void titleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleActionPerformed
        if (title.isSelected()) {
            title.setBackground(Color.PINK);
            panel.setVisible(true);
        } else {
            title.setBackground(Color.WHITE);
            panel.setVisible(false);
        }
    }//GEN-LAST:event_titleActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton browse;
    private javax.swing.JFileChooser browseChooser;
    private javax.swing.JDialog browseDialog;
    private javax.swing.JButton move;
    private javax.swing.JPanel panel;
    private javax.swing.JButton removeButton;
    private javax.swing.JTable table;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JRadioButton title;
    // End of variables declaration//GEN-END:variables
}
