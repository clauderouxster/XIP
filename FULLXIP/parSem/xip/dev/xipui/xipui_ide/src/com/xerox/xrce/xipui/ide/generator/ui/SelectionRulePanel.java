/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 ****************************************************************************************
 * Copyright (c) 2006 Xerox Corporation                                                 *
 * Xerox Research Centre Europe - Grenoble                                              *
 * All Rights Reserved                                                                  *
 * Copyright protection claimed includes all forms and matters of copyrightable         *
 * material and information now allowed by statutory or judicial law or                 *
 * hereinafter granted, including without limitation, material generated from           *
 * the software programs which are displayed on the screen such as icons,               *
 * screen display looks, etc. All rights reserved. No part of this document             *
 * may be reproduced, stored in a retrieval system, or transmitted, in any              *
 * form or by any means, electronic, mechanical, photocopied, recorded, or              *
 * otherwise, without prior written consent from XEROX corporation.                     *
 ****************************************************************************************
 */
package com.xerox.xrce.xipui.ide.generator.ui;

import com.xerox.xrce.xipui.ui.graph.*;

import com.xerox.xrce.xipui.modules.ModuleContext;
import java.util.*;
import com.xerox.jxip.*;

/**
 *
 * @author csaillet
 */
public class SelectionRulePanel extends GeneralPanel {

    /** Creates a new instance of SelectionRulePanel
     * @param context
     * @param id 
     */
    public SelectionRulePanel(ModuleContext context, int id) {
        super(context, id);
        initComponents();
        setPageDoc("/com/xerox/xrce/xipui/ide/generator/doc/selectionRule.htm");
        setProperty("panel_", this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        String typeRule = (String) this.getProperty("choiceRule");
        if (typeRule == null) {
            typeRule = "Dependency";
        }
        choiceRuleBox.setSelectedItem(typeRule);
    }// </editor-fold>

    public void initPanel() {
        addRuleButton.setVisible(false);
        clearTempFileButton.setVisible(false);
        backButton.setEnabled(false);
        clearButton.setEnabled(false);
        dependencyLabel.setVisible(false);
        dependencyBox.setVisible(false);
        categoryLabel.setVisible(false);
        choiceCategoryBox.setVisible(false);
        longestBox.setVisible(false);
        indexBox.setVisible(false);
        outputLabel.setVisible(false);
        fileRadioButton.setVisible(false);
        bufferRadioButton.setVisible(false);
    }

    public void next() {
        DependencyTypePanel typeDep = new DependencyTypePanel(getModuleContext(), id);
        CategoryPanel cat = new CategoryPanel(getModuleContext(), id);
        HeadPanel head = new HeadPanel(getModuleContext(), id);
        MarkingPanel mark = new MarkingPanel(getModuleContext(), id);
        String choiceRuleType = new String();
        choiceRuleType = (String) choiceRuleBox.getSelectedItem();
        this.setProperty("choiceRule", choiceRuleType);
        if (choiceRuleType.equals("Dependency")) {
            typeDep.typeDependency();
        } else if (choiceRuleType.equals("Sequence")) {
            cat.categoryP();
        } else if (choiceRuleType.equals("ID Rule")) {
            cat.categoryP();
        } else if (choiceRuleType.equals("Term")) {
            cat.categoryP();
        } else if (choiceRuleType.equals("Tagging")) {
            head.headTag();
        } else if (choiceRuleType.equals("Marking")) {
            mark.markingP();
        } else {
            DEBUG_LOG.trace("wrong choice");
        }
    }

    public void back() {
    }

    public void clear() {
    }

    public void close() {
    }

    public void indexWord() {
    }

    public void lonMatch() {
    }

    public void generateRule() {
        // deselection automatique de toutes selections de noeuds
        SessionGraph session = getModuleContext().getSessionGraph(false, id);
        Vector v = session.getNodeGraphSelected();
        if ((v.size()) != 0) {
            warning("Wrong choice !");
            long index = ((NodeGraph) v.firstElement()).getIndex();
            if (((NodeGraph) v.firstElement()).getSelectedObject().getObject() instanceof XipNode) {
                session.unSelectXipNode(index);
            } else if (((NodeGraph) v.firstElement()).getSelectedObject().getObject() instanceof XipDependency) {
                session.unSelectXipDependency(index);
            }
        }
    }

    public void selectionP() {
        SelectionRulePanel selection = new SelectionRulePanel(getModuleContext(), id);
        this.refreshTabbedPane(selection);
    }
}
