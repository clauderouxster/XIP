/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * TypeFileStep.java
 *
 * Created on June 26, 2006, 3:09 PM
 */
package com.xerox.xrce.xipui.ui;

import com.xerox.xrce.xipui.modules.ModuleContext;
import java.util.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;

/**
 *
 * @author  vgrassau
 */
public class TypeFileStep extends AbstractStep {

    public static final String grammar_file = "Grammar Files";
    public static final String corpus_file = "Corpus Files";
    public static final String other_file = "Other";
    private Hashtable tableOfType;
    private String categoryChoosen = null;

    /**
     * Creates new form TypeFileStep
     * @param properties
     * @param managerProperties 
     */
    public TypeFileStep(ModuleContext properties, Hashtable managerProperties) {
        super(properties);
        setManagerProperties(managerProperties);
        tableOfType = new Hashtable();
        initComponents();
        setDescription("Choose a type");
        typeList.setCellRenderer(new TypeListRenderer());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
// <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        
        categoriesTree = new javax.swing.JTree();
        labCategories = new javax.swing.JLabel();
        labFileType = new javax.swing.JLabel();
        scroll2 = new javax.swing.JScrollPane();
        typeList = new javax.swing.JList();
        labDescription = new javax.swing.JLabel();
        scroll3 = new javax.swing.JScrollPane();
        descriptionTxt = new javax.swing.JTextArea();
        scroll1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        
        
        setLayout(new java.awt.GridBagLayout());
        
        labCategories.setBackground(new java.awt.Color(153, 255, 153));
        labCategories.setFont(new java.awt.Font("Arial", 0, 11));
        labCategories.setText("Categories");
        labCategories.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labCategories.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(labCategories, gridBagConstraints);
        
        labFileType.setBackground(new java.awt.Color(153, 255, 153));
        labFileType.setFont(new java.awt.Font("Arial", 0, 11));
        labFileType.setText("File types");
        labFileType.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labFileType.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(labFileType, gridBagConstraints);
        
        scroll2.setViewportView(typeList);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 8, 6, 6);
        add(scroll2, gridBagConstraints);
        
        labDescription.setBackground(new java.awt.Color(153, 255, 153));
        labDescription.setFont(new java.awt.Font("Arial", 0, 11));
        labDescription.setText("Description");
        labDescription.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 102, 51)));
        labDescription.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(labDescription, gridBagConstraints);
        
        descriptionTxt.setColumns(20);
        descriptionTxt.setRows(5);
        scroll3.setViewportView(descriptionTxt);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(scroll3, gridBagConstraints);
        
        jPanel1.setLayout(new java.awt.BorderLayout());
        
        scroll1.setViewportView(jPanel1);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 8);
        add(scroll1, gridBagConstraints);
        
    }// </editor-fold>//GEN-END:initComponents

    /**
     *This method creates the table of the file types availables
     *
     */
    private void createTableOfType() {
        Short option = (Short) managerProperties.get(FileStepManager.option_fileManager);
        String[] grammarFiles = {"xip", "grm"};
        String[] corpusFiles = {"txt", "xml", "html", "xhtml"};
        switch (option.shortValue()) {
            case FileStepManager.ALL: {
                tableOfType.put(grammar_file, grammarFiles);
                tableOfType.put(corpus_file, corpusFiles);
                break;
            }
            case FileStepManager.CORPUS_ONLY: {
                tableOfType.put(corpus_file, corpusFiles);
                break;
            }
            case FileStepManager.GRAMMAR_ONLY: {
                tableOfType.put(grammar_file, grammarFiles);
                break;
            }
        }
    }

    public void initStepManager() {
        this.jPanel1.removeAll();
        //we construct the Tree of categories : 
        createTableOfType();
        Vector v = new Vector();
        Set set = tableOfType.keySet();
        Iterator ite = set.iterator();
        while (ite.hasNext()) {
            v.add(ite.next());
        }
        categoriesTree = new JTree(v);
        categoriesTree.setRootVisible(false);
        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) categoriesTree.getCellRenderer();
        renderer.setLeafIcon(XIPUIUtilities.getIcon(UIConstants.ADD));
        renderer.setClosedIcon(XIPUIUtilities.getIcon(UIConstants.ADD));
        renderer.setOpenIcon(XIPUIUtilities.getIcon(UIConstants.ADD));
        categoriesTree.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                categorySelection(e);
            }
        });
        jPanel1.add(categoriesTree, BorderLayout.CENTER);
        categoriesTree.setSelectionRow(0);
    }

    private void categorySelection(TreeSelectionEvent e) {
        TreePath selPath = e.getPath();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) selPath.getLastPathComponent();
        if (node != null) {
            if (!node.isRoot()) {
                Object o = node.getUserObject();
                categoryChoosen = (String) o;
                String[] types = (String[]) tableOfType.get(o);
                typeList.setListData(types);
                typeList.setSelectedIndex(0);
            }
        }
    }

    public void close() {
    }

    public String getType() {
        Object o = typeList.getSelectedValue();
        if (o != null) {
            return (String) o;
        } else {
            return null;
        }
    }

    public boolean isValide() {
        try {
            String type = getType();

            if (type != null && categoryChoosen != null) {
                managerProperties.put(FileStepManager.type_file, type);
                managerProperties.put(FileStepManager.category_file, categoryChoosen);
            } else {
                return false;
            }
            return true;
        } catch (Exception e) {
            severe("ERROR ", e);
            return false;
        }
    }

    public void loadModePolicy(short mode) {
    }
// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree categoriesTree;
    private javax.swing.JTextArea descriptionTxt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labCategories;
    private javax.swing.JLabel labDescription;
    private javax.swing.JLabel labFileType;
    private javax.swing.JScrollPane scroll1;
    private javax.swing.JScrollPane scroll2;
    private javax.swing.JScrollPane scroll3;
    private javax.swing.JList typeList;
// End of variables declaration//GEN-END:variables

    //class to represent file type in the list : 
    class TypeListRenderer extends JLabel implements ListCellRenderer {

        // This is the only method defined by ListCellRenderer.
        // We just reconfigure the JLabel each time we're called.
        public Component getListCellRendererComponent(
                JList list,
                Object value, // value to display
                int index, // cell index
                boolean isSelected, // is the cell selected
                boolean cellHasFocus) // the list and the cell have the focus
        {
            if (value != null) {
                String s = value.toString();

                setText(s);
                setFont(UIConstants.DEFAULT_FONT);
                setBackground(isSelected ? new Color(235, 235, 235) : Color.white);
                setForeground(isSelected ? Color.red : Color.black);
                setOpaque(true);

                if (s.equalsIgnoreCase("grm")) {
                    setIcon(XIPUIUtilities.getIcon(UIConstants.CONF_FILE));
                } else if (s.equalsIgnoreCase("xip")) {
                    setIcon(XIPUIUtilities.getIcon(UIConstants.CODE));
                } else if (s.equalsIgnoreCase("txt")) {
                    setIcon(XIPUIUtilities.getIcon(UIConstants.TEXT));
                } else if (s.equalsIgnoreCase("xml")) {
                    setIcon(XIPUIUtilities.getIcon(UIConstants.XML));
                } else {
                    setIcon(XIPUIUtilities.getIcon(UIConstants.FILE));
                }
            }
            return this;
        }
    }
}
