/*
 * Xerox Research Centre Europe - Grenoble Laboratory
 * 
 * Copyright (c) 2006 - 2007 Xerox Corporation.  All Rights Reserved.
 * 
 * CorpusRenderer.java
 *
 * Created on February 23, 2006, 3:22 PM
 */
package com.xerox.xrce.xipui.ui.corpus;

import com.xerox.xrce.xipui.CorpusElement;
import com.xerox.xrce.xipui.CorpusSet;
import com.xerox.xrce.xipui.ui.UIConstants;
import com.xerox.xrce.xipui.ui.XIPUIUtilities;
import java.awt.*;

/**
 *
 * @author  vgrassau
 */
public class CorpusRenderer extends javax.swing.JPanel {

    /** Creates new form CorpusRenderer
     * @param ce 
     */
    public CorpusRenderer(CorpusElement ce) {
        initComponents();
        labelTree.setIconTextGap(5);
        labelTree.setFont(new Font("Arial", Font.PLAIN, 11));
        labelTree.setText(ce.toString());
        setToolTipText(ce.getFile().getAbsolutePath());
        //labelTree.setToolTipText(ce.getFile().getAbsolutePath());
        if (ce.isXML()) {
            labelTree.setIcon(XIPUIUtilities.getIcon(UIConstants.XML));
        } else {
            labelTree.setIcon(XIPUIUtilities.getIcon(UIConstants.TEXT));
        }
        if (ce.isInput()) {
            labelTree.setIcon(XIPUIUtilities.getIcon(UIConstants.INPUT));
        }
        if (ce.isDirectory()) {
            labelTree.setIcon(XIPUIUtilities.getIcon(UIConstants.OPEN));
        }
        if (!ce.exists()) {
            labelTree.setIcon(XIPUIUtilities.getIcon(UIConstants.CODE_ERROR));
            labelTree.setForeground(Color.red);
        }
        ////// icon pour la parsing  :
        setToParse(ce.isToParse());
    }

    public CorpusRenderer(CorpusSet cs) {
        initComponents();
        labelTree.setIconTextGap(5);
        labelTree.setFont(new Font("Arial", Font.PLAIN, 11));
        labelTree.setText(cs.getName() + " (" + cs.countCorpusElementToParse() + ")");
        setToolTipText(cs.getAllCorpusElement().size() + " file(s)");
        labelTree.setToolTipText(cs.getAllCorpusElement().size() + " file(s)");
        labelTree.setIcon(XIPUIUtilities.getIcon(UIConstants.CORPUS));
        ////// icon pour la parsing  :
        setToParse(cs.isToParse());
    }

    public CorpusRenderer(CorpusElement ce, boolean selected) {
        this(ce);
        this.setSelected(selected);
    }

    public CorpusRenderer(CorpusSet cs, boolean selected) {
        this(cs);
        this.setSelected(selected);
    }

    private void setToParse(boolean toParse) {
        if (toParse) {
            iconParse.setIcon(XIPUIUtilities.getIcon(UIConstants.TOPARSE));
        } else {
            iconParse.setIcon(null);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labelTree = new javax.swing.JLabel();
        iconParse = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(2147483647, 27));
        setMinimumSize(new java.awt.Dimension(150, 27));
        setPreferredSize(new java.awt.Dimension(150, 27));
        labelTree.setMaximumSize(new java.awt.Dimension(600, 23));
        labelTree.setMinimumSize(new java.awt.Dimension(100, 23));
        labelTree.setOpaque(true);
        labelTree.setPreferredSize(new java.awt.Dimension(150, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(labelTree, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 2);
        add(iconParse, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    /**
     *Change la couleur d'un element selectionne ou non
     * @param selected 
     */
    public void setSelected(boolean selected) {
        labelTree.setBackground(selected ? Color.lightGray : Color.white);
        labelTree.setForeground(selected ? Color.red : Color.black);
    }

    /**
     *Change l'icon si le la ligne selectionne dans l'arbre est a l'etat expand
     *@param expanded
     */
    public void setExpanded(boolean expanded) {
        if (expanded) {
            labelTree.setIcon(XIPUIUtilities.getIcon(UIConstants.CORPUS_OPEN));
        } else {
            labelTree.setIcon(XIPUIUtilities.getIcon(UIConstants.CORPUS));
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel iconParse;
    private javax.swing.JLabel labelTree;
    // End of variables declaration//GEN-END:variables
}
