Variables:
string lem;
int position#;
int i=1;

DependencyRules:
10> if (coord(#1,#2) & position#1=i & i=i+1)~.
10> if (coord(#1,#2) & position#2=i)~.
10> if (ifthen(#1,#2[lemme:while]) & #2[lemme="then"])~.

//Some transformations
10> if (determ(#2,#1[lemme:that,pl:+]) & #1[lemme="those"] ) ~.
10> if (determ(#2,#1[lemme:this,pl:+]) & #1[lemme="these"] ) ~.

generation:

//Some initialisations
15> if (determ(#1,#2) & #1[def]={#2})~.

//We create the groups
16> if (coord(#1[adj],#2[adj,conjcoord:and]) & ~AP(#2) & conj#3[lemme=and]) AP(#2){conj(#3),adj(#2)}
16> if (coord(#1[adj],#2[adj,conjcoord:or]) & ~AP(#2) & conj#3[lemme=or]) AP(#2){conj(#3),adj(#2)}
16> if (coord(#1[adj],#2[adj]) & ^AP(#2) & ~AP(#1)) AP(#1){adj(#1)}


20> if (subj(#1,#2) | obj(#1,#2[noun]) & ~Gn(#2)) GN(#2){noun(#2)}.
20> if (obj(#1,#2[adj]) & ~AP(#2)) AP(#2){adj(#2)}.
20> if (obj(#1,#2[Verb]) & ~GV(#2)) GV(#2){Verb(#2)}.

20>  if (subj(#1)) GV(#1){verb(#1)}.
20> if (subj(#1,#2) & ~Gv(#1)) Gv(#1){verb(#1)}.
20> if (pmod(#1,#2) & ~Gn(#1)) Gn(#1){noun(#1)}.
20> if (rmod(#1,#2) & ~Gv(#1)) Gv(#1){verb(#1)}.
20> if (vinf(#1,#2) & ~gv(#2)) Gv(#2){verb(#2)}.
20> if (subj(#1,#2) & ~subj(?,#2) & ~rmod(#1,?) & ~P(#1)) P(#1).
20> if (amod(#1,#2) & ~Gn(#1)) GN(#1){noun(#1)}.
20> if (amod(#1,#2[verb:~]) & ~AP(#2)) AP(#2){adj(#2)}.
20> if (amod(#1,#2[verb]) & ~AP(#2)) AP(#2){Verb(#2)}.
20> if (advmod(#1[adj],#2) & ~AP(#1)) AP(#1){adj(#1)}.
20> if (vinf(#1,#2) & ~Gv(#1)) Gv(#1){verb(#1)}.
20> if (vinf(#1,#2) & ~Gv(#2)) Gv(#2){verb(#2)}.
20> if (pvmod(#1,#2) & ~GV(#1)) Gv(#1){verb(#1)}.
//NMOD
20> if (nmod(#1[noun],#2) & ~Gn(#1)) GN(#1){noun(#1)}.
20> if (nmod(#1[noun],#2) & ~Gn(#2)) GN(#2){noun(#2)}.

//VMOD
20> if (vmod(#1,#2[verb]) & ~Gv(#1)) Gv(#1){verb(#1)}.
20> if (vmod(#1,#2[verb]) & ~Gv(#2)) Gv(#2){verb(#2)}.

DependencyRules:
22> if (rmod(#1,#2[lemme:whose]) & subj(#1,#3) & ^determ(#3,#4) & #3[det=+]  ) ~.

Generation:
//We connect the dots
//Infinitive if not a clause...
23> if (rmod(#1[verb],#2[clausepron:~]) & #1[tense=~] & #1[tense=inf]) ~.

23> if (amod(#1,#2) & ^gn(#1) & ap$#1(#2) & #1[invert=-]) $#1.

//If we have a definite head, then we add of
23> if ((nmod(#1[def:+],#2) | nmod(#1[def:~],#2[def:+]) | nmod(#1[invert:-],#2)) & ^gn(#1) & gn$#1(#2) & prep#3[lemme=of] )   PP(#3){prep(#3),$#1}.

//Otherwise, we invert our construction
23> if (nmod(#1[def:~,invert:~],#2[def:~]) & ~nmod(#2,#3) & ^gn(#1) & gn$#1(#2)  & #1[det=+] & #2[pl=~] & #2[det=+])  $#1[used=+].

23> if (nmod(#1,#2)  & ~{PP(#3){prep(#3),gn(#2)}} & ^gn(#1) & gn$#1(#2) & prep#3[lemme=of] )   PP(#3){prep(#3),$#1}.

25> if (pvmod(#1,#2)  & GV$#1(#1) & ~prep(#2)) PP(#2){prep(#2),$#1}.
25> if (pvmod(#1,#2)  & GV$#1(#1) & ^PP(#2))  $#1.

25> if (advmod(#1,#2[lemme:~during]) & ^Gv(#1)) adv(#2).

25> if (ppe(#1,#2) & ^Gv(#1) & Gv$#1(#2) & #2[tense=~] & #2[tense=ppe])  verbinf$#1(#2).
25> if (vinf(#1,#2) & ^Gv(#1) & Gv$#1(#2) ) $#1.

27> if (vinf(#1[aux:~],#2) & ^Gv(#2)  & prep#4[lemme=to]) prep(#4).


30> if (vmod(#1[aux:~],#2[verb]) & #2[tense=~] & #2[tense=inf] & ^gv(#1) & gv$#1(#2) & ~pvmod(#2,#3) ) $#1.
30> if (vmod(#1[aux:~],#2[verb]) & #2[tense=~] & ^gv(#1) & pvmod(#2,#3)  & PP$#1(#3)) $#1.

30> if (subj(#1,#2) & ^P(#1) & Gn$#1(#2)) $#1.
30> if (subj(#1,#2) & ^P(#1) & Gv$#1(#1)) $#1.

30> if (obj(#1,#2[noun]) & ^Gv(#1) & Gn$#1(#2))  $#1.
30> if (obj(#1,#2) & ^Gv(#1) & AP$#1(#2))  $#1.
30> if (obj(#1,#2) & ^Gv(#1) & GV$#1(#2))  $#1.

30> if (pmod(#1,#2) & Gn$#1(#1) & ~GNC(#1)) PP(#2){prep(#2),$#1}.

30> if (pmod(#1,#2) & Gn$#1(#1) & ~PP(#2)) PP(#2){prep(#2),$#1}.

//Adjective and adverb
30> if (advmod(#1[adj],#2) & ^AP(#1)) adv(#2).
//The auxiliary with be
30> if (vinf(#1[lemme:be],#2) & ^gv(#1) & gv$#1(#2) & #2[tense=~] & #2[tense=ppe]) $#1.
30> if (vmod(#1,#2) & pmod(#2,#3) & PP$#1(#2) & ^GV(#1)) $#1.


35> if (pmod(#1,#2[lemme:by]) & #1[det=+])~.

//Insertion of the relative subject pronoun
35> if (rmod(#1,#2[case:nom]) & ^P(#1)) pron(#2).
35> if (rmod(#1,#2[case:gen]) & ^P(#1)) pron(#2).

35> if (rmod(#1,#2[case:~nom]) & ^GV(#1) & ~pron(#2)  & ~P(#1)) pron(#2).
35> if (rmod(#1,#2[case:~nom]) & GV(#1) & ~pron(#2)  & ^P(#1)) pron(#2).

//Insertion of a determiner
35> if (determ(#1[proper:~,pron:~],#2) & ^gn(#1) & #1[det=+]) det(#2).
35> if (^GN(#1[det:~,noun:+,proper:~,pl:~,def:~,pron:~]) ) det(det[lemme=a]).

35> if (rmod(#1,#2[case:nom]) & GV$#1(#1) & ~pron(#2) & ~P(#1)) P(#1){pron(#2),$#1}

35> if (vmod(#1,#2[noun])  & pmod(#2,#3) & PP$#1(#3) & ^P(#1)) $#1.

//The conjunction
37> if (^gn(#1[conjcoord:and]) ) conj(conj[lemme=and]).
37> if (^gn(#1[conjcoord:or])) conj(conj[lemme=or]).
37> if (^gv(#1[conjcoord:and])) conj(conj[lemme=and]).
37> if (^gv(#1[conjcoord:or])) conj(conj[lemme=or]).
//In the case of conjunction, the verb should have a plural form...
37> if (coord(#1,#2) & subj(#3,#1) & #3[pl=+]) ~.

//Case of a lonely subject. We add "people"
40> if (subj(#1[tense:~inf,conjcoord:~]) & ^gv(#1) &  #1[pers=3,pl=+]) noun(noun[lemme=people],#1).
40> if (subj(#1[tense:~inf]) & coord(#1,#2) & position#1~:1 & ^noun(#3,#1)) ~.

40> if (subj(#1,#2) & ~P(#1) & GN$1(#2) & GV$#2(#1)) P(#1){$#1,$#2}.


//The present perfect
50> if (Advmod(#1,#2[lemme:during])   & gv$#1(#1) & verb#4[lemme=be] & #4[tense]={#1} &  #1[tense=~] & #1[tense=prog])  
            gv(#4,#1){verb(#4,#1),$#1}.
50> if (gv$#1(#4,#1) & ^P(#1)) $#1.

dependencyrules:

55> if (Advmod(#1[tense:prog],#2[lemme:during]) & ^subj(#1,#3)  & verb(#4,#1) ) subj(#4,#3).

//Agreement, if it's not a pronoun with a pers feature already instantiated it is: pers:3
60> if (subj(#1,#2[pers:~]) & #1[pers=3] )~.
60> if (subj(#1,#2) &  #1[accordgen]={#2} )~.

generation:
//The negation
65> if (neg(#1) & ^verb(#1[auxnot:~]) & verb#4[lemme=do] & #4[accordgen]={#1} &
	 #1[tense=~] & #1[tense=inf] & neg#5[lemme=not])	verb(#4),neg(#5).


65> if (coord(#1[noun],#2[noun]) & ^GN(#2) & GN$#1(#1)) GNC[$=0](#1){$#1}.

//We move the P next to its antecedent
80> if (antecedent(#1,#2) & pron$#1(#1) & nodemother($#1,$#2) & ^Gn(#2)) $#2.

//We move the clause next to its verb
80> if (clause(#1,#2) & ^P(#1) & rmod(#3,#2)  & P$#1(#3)) $#1.

//We move a preposition to its antecedent
80> if (antecedent(#1[prep],#2) & ^GN(#2) & pvmod(#3,#1) & PP$#1(#1)) $#1.

//We remove some elements with specific lemmas.
85> if ($#1(#1[lemme:"###"])) ~$#1.

//85> if (compmod(#1,#2) & rmod(#3,#2))

//The a in an
90> if (words("a","[a,e,i,o,u,é]?+") & setword(0,"an")) ~.


//Tokens
100> if (^Verb(#1)) token(#1).
100> if (^Verb(#1,#2)) token(#1).
100> if (^Noun(#1)) token(#1).
100> if (^Pron(#1)) token(#1).

110> if (neg(#1) & ^verb(#1[auxnot]) & neg#5[lemme=not])  neg(#5).

110> if (ifthen(#1,#2) & pron$#1(#1) & pron$#2(#2) & nodemother($#1,$#3) & nodemother($#2,$#4)) $#3{$#4}

120> if (head(#1,#2) & ^P(#1) & #2[before=+]) conj(#2).

120> if (prepmod(#1,#2) & ^AP(#2) & PP$#1(#1)) $#1.
120> if (prepmod(#1,#2) & ^Gn(#2) & PP$#1(#1)) $#1.

120> if (antecedent(#1[lemme:that],#2)  & gn$#1(#2)  & pron$#2(#1) & nodemother($#2,$#3)) $#1{$#3} 
120> if (antecedent(#1[lemme:that],#2[c_person])  &  pron$#1(#1)  & #1[lemme=who]) ~.

120> if (^verb(#1[tense:fut]))  aux[$=0](aux[lemme=will]).

order:
16> AP<?.
23> gn < noun.
23> ap < noun.
25> adv<verb.
25> prep<verb.
27> prep<verb.
28> GNC <?.
30> adv < ?.
35> pron < ?.
35> det < ?.
37> Gnc< conj.
37> conj<noun.
37> conj<verb.
37> conj<ap.
40> noun<verb.
120> token(#1[before]) < ?(#2).
120> conj(#1[before]) < ?(#2).


Script:
200> addsentences(@generated,python_exchange_data);









































