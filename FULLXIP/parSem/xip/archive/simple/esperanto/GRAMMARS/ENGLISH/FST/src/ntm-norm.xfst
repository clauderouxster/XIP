# ============================================================================
# TYPE:		(x)fst
# CONTENT:	NTM normalizer for white space
#
# AUTHOR:	A. Schiller
#
# CREATED:	22-Mar-2002
#
# MODIFIED: F. Trouilleux - 18-Oct-2002
#
# ============================================================================
# USAGE:	xfst -l [ThisFile]
# ============================================================================

clear

# --------------------------------------------------------------
echo >>> define characters
define SP	" " ;
define NL	"\n" ;
define TAB  "\t" ;
define CR   "\r" ;
define NS	%& n b s p %; ;

define WS	[" " | "\n" | "\t" | "\r" ];
define WS2	[ WS | NS ];

define SEP	[ %; | %, | %. | %: | %? | %! | %' | %` | %"       #"
		| %( | %) | %[ | %] | %- ];

define QUOTE	[ %" | %« | %» | %` %` | %' %' ];	#"

### CBTEST#####################################################
## To avoid /the Xerox Corp.'s associates/ to be segmented
## in two sentences ....
##############################################################

define Num [ %0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ] ;

define UP [ B|C|D|F|G|H|J|K|L|M|N|P|Q|R|S|T|V|W|X|Y|Z|Ç|Ð|Ñ|A|E|I|O|U|
            Ä|Ö|Ü|À|Á|Å|Â|Ã|Æ|È|É|Ê|Ë|Î|Ï|Ì|Í|Ó|Ò|Ô|Õ|Ù|Ú|Û|Ý  ];

define Low [ b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z|ß|ç|ñ|a|e|i|o|u|
             ä|ö|ü|à|á|â|ã|å|æ|è|é|ê|ë|í|î|ï|ì|ó|ô|ð|ò|õ|ù|ú|û|ý|ÿ ];

define PUNC [
  %!    |  %"    |  %'    |  %(    |  %)    |  %*    |  %+    |
  %,    |  %-    |  %.    |  %/    |  %:    |  %;    |  %<    |  %=    |
  %>    |  %?    |  %@    |  %[    |  %\    |  %]    |  %^    |  %_    |
  %`    |  %|    |  %~    |  %¡    |  %«    |  %»    |  %¿    |  %#    |
  EOT   ] ;


define PRINT [ Num|UP|Low|WS|WS2 |SEP |PUNC| QUOTE] ;

define LES [ s | S ] ;

define PRINTWITHOUTS [PRINT - LES ] ;


# --------------------------------------------------------------
echo >>> white space normalisation

# white space sequence

define WSSEQ [ WS2+ ] ;

# if a WS sequence contains at least 2 newline, it is normalized as 2 newline
# category +Sent in the lexicon

define VSPACESENT [ WSSEQ & [ $[NL ?* NL] | $[CR ?* CR] ] ] ;



regex [ [NL NL] .x. VSPACESENT ] ;


# otherwise, normalised as one SP

regex  [SP] .x. [ WSSEQ & ~[ $[NL ?* NL] | $[CR ?* CR] ] ] ;



# --------------------------------------------------------------
echo >>> hyphen

# CB: I comment this rule because  it is handled later 
#regex [ [0:%-|%-]   LC [ [WS|BOT] [C|c] [O|o] ].r ] ;


# --------------------------------------------------------------



# --------------------------------------------------------------
echo >>> upper case normalisation
define SENT	[ %. | %? | %! | %: | %) | %] ] ;
define PAREN	[ %( | %[ | %> | BOT ] ;


define UPP2LOW  [A:a|B:b|C:c|D:d|E:e|F:f|G:g|H:h|I:i|J:j|K:k|L:l|M:m|N:n|O:o
                |P:p|Q:q|R:r|S:s|T:t|U:u|V:v|W:w|X:x|Y:y|Z:z
                |À:à|Á:á|Â:â|Ã:ã|Ä:ä|Å:å|Æ:æ|Ç:ç|È:è|É:é|Ê:ê|Ë:ë|Ì:ì|Í:í|Î:î
                |Ï:ï|Ð:ð|Ñ:ñ|Ò:ò|Ó:ó|Ô:ô|Õ:õ|Ö:ö|Ø:ø|Ù:ù|Ú:ú|Û:û|Ü:ü|Ý:ý|Þ:þ
                ];

define UPP	UPP2LOW.u ;

define OptLOW	UPP2LOW | UPP ;




echo >>> initial caps
read regex	[
	OptLOW
	].i;





# --------------------------------------------------------------
echo >>> combine all
union net


