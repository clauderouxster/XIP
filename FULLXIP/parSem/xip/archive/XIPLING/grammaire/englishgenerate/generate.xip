
dependencyrules:



generation:
//On cree nos blocs sujet
1> if (subj(#1,#2[pron:~])) P(#1){GN(#2){Noun(#2)},GV(#1){Verb(#1)}}.

1> if (subj(#1,#2[pron:+])) P(#2,#1){GN[pron=+](#2){Pron(#2)},GV(#1){Verb(#1)}}.

//Puis les blocs PP
1> if (pmod(#1,#2)) PP(#1){Prep(#2),GN(#1){Noun(#1)}}.

//Puis les COD
1> if (obj(#1,#2[pron:~]) & ^GV(#1)) GN(#2){Noun(#2)}.
//Avec pronom relatif dans une phrase
5> if (obj(#1,#2[pron:+]) & ^P(#1)) GN[$=0,pron=+](#2){Pron(#2)}.

5> if (obj(#1,#2[pron:+]) & P$#1(#1)) $#1(#2,#1).

//Dans le cas d'un nmod lie a un PP (hundeta iniars...), si le GN n'existe pas, on le cree
10> if (nmod(#1,#2) & pmod(#2,#3) & ~GN(#1)) GN(#1){Noun(#1)}.

//Notre GN existe, il a deja ete cree, on place alors le PP juste apres lui
20> if (nmod(#1,#2) & pmod(#2,#3) & ^GN(#1) && PP$#1(#2)) $#1.

//Le simple complement du nom, on inverse si le nom est un etre humain
25> if (nmod(#1,#2[c_person]) & ~pmod(#2,?) & GN$#1(#1) & #1[det=+,detremove=+]) GN(#2){Noun(#2),saxongenitive(prep[lemme="'s"]),$#1}.
25> if (^determ(#1[detremove],#2)) ~.

//25> if (nmod(#1,#2[c_person:~]) & ~pmod(#2,?) & ^GN(#1)) PP(#2){prep(prep[lemme=of]),GN(#2){Noun(#2)}}.
25> if (nmod(#1,#2[c_person:~]) & ~pmod(#2,?) & GN$#1(#1) & #1[det=+,detremove=+]) GN(#2){Noun(#2),$#1}.

//Traitement de l'adjectif
30> if (amod(#1,#2) & ^GN(#1)) AP(#2){adj(#2)}.

//L'antecedent d'un pronom relatif
//En anglais pour une personne on remplace that par who
40> if (antecedent(#1[case:nom],#2[c_person]) & #1[lemme=who])~.

40> if (antecedent(#1,#2) & ^GN(#2) & P$#1(#1,?)) $#1.

//Rajout du mod
40> if (mod(#1,#2) & ^GV(#1) & PP$#1(#2)) $#1.

//Traitement du determinant present dans la grammaire
45> if (determ(#1,#2) & ^GN(#1) & #1[det=+] ) det(#2).

//Traitement du determinant au depart de la phrase. On met un "the"
50> if (^GN(#1[det:~,start])) det(det[det=+,lemme="the"]).

//Traitement du determinant ailleurs
50> if (^GN(#1[pron:~,det:~,start:~])) det(det[det=+,lemme="a"]).

//La negation, on rajoute don't..
90> if (neg(#1) & ^GV(#1) & #1[neg=~]) Aux(verb[lemme=do,neg=+]).

//Pour le present, un temps different: Prog
90> if (^Gv(#2[neg:~,tense:pres,rel:+]) & #2[tense=~] & #2[tense=prog]) Aux(verb[lemme=be,tense=pres]).

90> if (GV(#1){aux(#3)} & verb(#1) & #3[tense]={#1} & #3[number]={#1}) ~.

dependencyrules:
95> if (^subj(#1,#2) & GV(#1){aux(#3)}) subj(#3,#2).

generation:
//Traitement de l'accord entre le verbe et son sujet, cas de base...
100> if (subj(#1,#2) & #2[pers:~] & #1[pers=3] & #2[number:~] & #1[sg=+]) ~.

//Rajout de la particule au verbe
130> if (particle(#1,#2[lemme:~"at"]) & ^GV(#1)) prep(#2);

//Rajout de la virgule a la fin de la relative
140> if (^P(#2,#1[rel])) punct(punct[lemme="%,"]).


//Creation des tokens
300> if (^noun(#1)) token(#1).
300> if (^verb(#1)) token(#1).
300> if (^aux(#1)) token(#1).
300> if (^punct(#1)) token(#1).

350> if (particle(#1,#2[lemme:"at"]) & ^Verb(#1)) prep(#2).

350> if (^prep(#1)) token(#1).

//Initialisation des traits et du lemme
400> if (token(#1) & initlookdown(#1)) ~.

430> if (token(#1[lemme:do,neg:+,tense:pres,pers:3])  & #1[lemme="doesn't"])~.
430> if (token(#1[lemme:do,neg:+,tense:past,pers:3])  & #1[lemme="didn't"])~.

470> if (words("a","[a,e,i,o,u,é]?+") & setword(0,"an")) ~.

order:

//Dans la construction du COD, on veut que le GN soit apres le verbe
1> Verb < GN.


//Pour le rajout d'un PP, il faut qu'il soit place APRES notre noeud N
20> Noun < PP.

AP<Noun.
AP<PP.

40> PP < GV.

Aux<Verb.
//Le determinant vient se placer avant le nom

Det<AP.
Det<Noun.


Script:
500> SetSentence(@generated);








