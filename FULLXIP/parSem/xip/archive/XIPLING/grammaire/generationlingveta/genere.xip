

//dependencyrules:

Script:

1> if (sujv(#2[rel:+],#1) | codv(#2[rel:+],#1)) {
	#1[rel=+];
}

generation:

10> if (sujv(#2,#1) & #2[case=nom]) P(#1){GN(#2){Noun(#2)},GV(#1){Verb(#1)}}.
10> if (codv(#2,#1) & #2[case=acc] & ^GV(#1)) GN(#2){Noun(#2)}.

10> if (modn(#1[verb:~],#2) & ^GN(#2) & ~prepobj(#1,?) & #1[case]={#2} ) ADJ(#1).

10> if (modn(#1[verb:~],#2) & prepobj$1(#1,#3) & ~GN(#2) & #1[case=~] & #1[case=gen]) ~$1,GN(#2){Noun(#2),Gn(#1){Noun(#1)}}.
10> if (prepobj(#1,#2) & #1[case=~] & #1[case=DAT] & GN$#1(#1)) PP(#1,#2){Prep(#2),$#1}.
10> if (prepobj(#1,#2) & #1[case=~] & #1[case=DAT] & ~GN(#1)) PP(#1,#2){Prep(#2),GN(#1){Noun(#1)}}.
10> if (cplv(#2,#1) & PP$#1(#2,#3) & ^GV(#1) & #3[case=nom]) $#1.

10> if (modn(#1[verb],#2) & P$#1(#1){GN(#3[rel:+])} & ^GN(#2) & setfeature(#3,"antecedentcase",#2[case])) $#1.
10> if (codv(#1[rel:+],#2) & sujv(#3,#2) & ^P(#2) & GN$#1(#1) ) $#1[$=0].

//cas d'un complement entre un nom et un pp...
10> if (modn(#1[verb:~],#2) & ^GN(#2) & prepobj(#1,#3) & PP$#1(#1,#3[lemme:de]) & GN$#2(#1) & #1[case=~] & #1[case=gen] ) ~$#1,$#2.
10> if (modn(#1[verb:~],#2) & ^GN(#2) & prepobj(#1,#3) & PP$#1(#1,#3[lemme:~de]) & #3[case=gen] & setfeature(#3,"antecedentcase",#2[case])) $#1.

10> if (modv(#1[lemme:pas],#2) & #2[neg=+]) ~.

10> if (modv(#1,#2) & PP$#1(#1,#3) & ^P(#2) & #3[case=nom]) $#1[$=-1].

12> if (determ(#1,#2[def:+]) & ^GN(#1) & #2[case]={#1}) det(#2){token(#2)}.

15> if (Prep(#1[case:gen,antecedentcase:~]) & #1[antecedentcase=nom])~.
15> if (^Verb(#1)) token(#1);
15> if (^Noun(#1)) token(#1);
15> if (^Adj(#1)) token(#1);
15> if (^Prep(#1)) token(#1);
15> if (^Pron(#1)) token(#1);

20> if (P$#1(#1[rel]) & ^P(#2[rel:~])) $#1.

order:
10> Gn < Verb.
10> adj < Noun.
10> PP < verb.
12> Det < Noun.
12> Det < Adj.

20> P < GV.

script:

150> if (token(#1)) {
    wordform(#1);
 }

150> SetSentence(@generated);

